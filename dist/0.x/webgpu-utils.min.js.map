{"version":3,"file":"webgpu-utils.min.js","sources":["../../../src/typed-arrays.ts","../../../src/buffer-views.ts","../../src/3rdParty/wgsl_reflect/wgsl_reflect.module.js","../../../src/data-definitions.ts","../../../src/generate-mipmap.ts","../../../src/attribute-utils.ts","../../../src/texture-utils.ts","../../../src/primitives.ts","../../../src/utils.ts"],"sourcesContent":["import {\n    roundUpToMultipleOf,\n} from './utils.js';\n\nexport type TypedArrayConstructor =\n    | Int8ArrayConstructor\n    | Uint8ArrayConstructor\n    | Int16ArrayConstructor\n    | Uint16ArrayConstructor\n    | Int32ArrayConstructor\n    | Uint32ArrayConstructor\n    | Float32ArrayConstructor\n    | Float64ArrayConstructor;\n\nexport type TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array;\n\nexport class TypedArrayViewGenerator {\n    arrayBuffer: ArrayBuffer;\n    byteOffset: number;\n\n    constructor(sizeInBytes: number) {\n        this.arrayBuffer = new ArrayBuffer(sizeInBytes);\n        this.byteOffset = 0;\n    }\n    align(alignment: number) {\n        this.byteOffset = roundUpToMultipleOf(this.byteOffset, alignment);\n    }\n    pad(numBytes: number) {\n        this.byteOffset += numBytes;\n    }\n    getView<T extends TypedArray>(Ctor: TypedArrayConstructor, numElements: number): T {\n        const view = new Ctor(this.arrayBuffer, this.byteOffset, numElements);\n        this.byteOffset += view.byteLength;\n        return view as T;\n    }\n}\n\nexport function subarray<T extends TypedArray>(arr: TypedArray, offset: number, length: number): T {\n  return arr.subarray(offset, offset + length) as T;\n}\n\n// TODO: fix better?\nexport const isTypedArray = (arr: any) =>\n  arr && typeof arr.length === 'number' && arr.buffer instanceof ArrayBuffer && typeof arr.byteLength === 'number';\n","import {\n    FieldDefinition,\n    IntrinsicDefinition,\n    StructDefinition,\n} from './data-definitions.js';\nimport {\n    isTypedArray,\n    TypedArrayConstructor,\n    TypedArray,\n} from './typed-arrays.js';\n\ntype TypeDef = {\n    numElements: number;\n    align: number;\n    size: number;\n    type: string;\n    View: TypedArrayConstructor;\n    pad?: number[];\n};\n\nconst b: Record<string, TypeDef> = {\n  i32: { numElements: 1, align: 4, size: 4, type: 'i32', View: Int32Array },\n  u32: { numElements: 1, align: 4, size: 4, type: 'u32', View: Uint32Array },\n  f32: { numElements: 1, align: 4, size: 4, type: 'f32', View: Float32Array },\n  f16: { numElements: 1, align: 2, size: 2, type: 'u16', View: Uint16Array },\n\n  vec2f: { numElements: 2, align:  8, size:  8, type: 'f32', View: Float32Array },\n  vec2i: { numElements: 2, align:  8, size:  8, type: 'i32', View: Int32Array },\n  vec2u: { numElements: 2, align:  8, size:  8, type: 'u32', View: Uint32Array },\n  vec2h: { numElements: 2, align:  4, size:  4, type: 'u16', View: Uint16Array },\n  vec3i: { numElements: 3, align: 16, size: 12, type: 'i32', View: Int32Array },\n  vec3u: { numElements: 3, align: 16, size: 12, type: 'u32', View: Uint32Array },\n  vec3f: { numElements: 3, align: 16, size: 12, type: 'f32', View: Float32Array },\n  vec3h: { numElements: 3, align:  8, size:  6, type: 'u16', View: Uint16Array },\n  vec4i: { numElements: 4, align: 16, size: 16, type: 'i32', View: Int32Array },\n  vec4u: { numElements: 4, align: 16, size: 16, type: 'u32', View: Uint32Array },\n  vec4f: { numElements: 4, align: 16, size: 16, type: 'f32', View: Float32Array },\n  vec4h: { numElements: 4, align:  8, size:  8, type: 'u16', View: Uint16Array },\n\n  // AlignOf(vecR)\tSizeOf(array<vecR, C>)\n  mat2x2f: { numElements:  4, align:  8, size: 16,              type: 'f32', View: Float32Array },\n  mat2x2h: { numElements:  4, align:  4, size:  8,              type: 'u16', View: Uint16Array },\n  mat3x2f: { numElements:  6, align:  8, size: 24,              type: 'f32', View: Float32Array },\n  mat3x2h: { numElements:  6, align:  4, size: 12,              type: 'u16', View: Uint16Array },\n  mat4x2f: { numElements:  8, align:  8, size: 32,              type: 'f32', View: Float32Array },\n  mat4x2h: { numElements:  8, align:  4, size: 16,              type: 'u16', View: Uint16Array },\n  mat2x3f: { numElements:  8, align: 16, size: 32, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat2x3h: { numElements:  8, align:  8, size: 16, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat3x3f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat3x3h: { numElements: 12, align:  8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat4x3f: { numElements: 16, align: 16, size: 64, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat4x3h: { numElements: 16, align:  8, size: 32, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat2x4f: { numElements:  8, align: 16, size: 32,              type: 'f32', View: Float32Array },\n  mat2x4h: { numElements:  8, align:  8, size: 16,              type: 'u16', View: Uint16Array },\n  mat3x4f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat3x4h: { numElements: 12, align:  8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat4x4f: { numElements: 16, align: 16, size: 64,              type: 'f32', View: Float32Array },\n  mat4x4h: { numElements: 16, align:  8, size: 32,              type: 'u16', View: Uint16Array },\n};\n\nconst typeInfo: Record<string, TypeDef> = {\n  ...b,\n\n  'vec2<i32>': b.vec2f,\n  'vec2<u32>': b.vec2i,\n  'vec2<f32>': b.vec2u,\n  'vec2<f16>': b.vec2h,\n  'vec3<i32>': b.vec3i,\n  'vec3<u32>': b.vec3u,\n  'vec3<f32>': b.vec3f,\n  'vec3<f16>': b.vec3h,\n  'vec4<i32>': b.vec4i,\n  'vec4<u32>': b.vec4u,\n  'vec4<f32>': b.vec4f,\n  'vec4<f16>': b.vec4h,\n\n  'mat2x2<f32>': b.mat2x2f,\n  'mat2x2<f16>': b.mat2x2h,\n  'mat3x2<f32>': b.mat3x2f,\n  'mat3x2<f16>': b.mat3x2h,\n  'mat4x2<f32>': b.mat4x2f,\n  'mat4x2<f16>': b.mat4x2h,\n  'mat2x3<f32>': b.mat2x3f,\n  'mat2x3<f16>': b.mat2x3h,\n  'mat3x3<f32>': b.mat3x3f,\n  'mat3x3<f16>': b.mat3x3h,\n  'mat4x3<f32>': b.mat4x3f,\n  'mat4x3<f16>': b.mat4x3h,\n  'mat2x4<f32>': b.mat2x4f,\n  'mat2x4<f16>': b.mat2x4h,\n  'mat3x4<f32>': b.mat3x4f,\n  'mat3x4<f16>': b.mat3x4h,\n  'mat4x4<f32>': b.mat4x4f,\n  'mat4x4<f16>': b.mat4x4h,\n};\n\nexport type TypedArrayOrViews = TypedArray | Views | Views[];\nexport interface Views {\n  [x: string]: TypedArrayOrViews;\n}\nexport type ArrayBufferViews = {\n    views: TypedArrayOrViews;\n    arrayBuffer: ArrayBuffer;\n}\n\n// This needs to be fixed! ðŸ˜±\nfunction getSizeOfStructDef(fieldDef: FieldDefinition): number {\n  if (Array.isArray(fieldDef)) {\n    return fieldDef.length * getSizeOfStructDef(fieldDef[0]);\n  } else {\n    return fieldDef.size;\n  }\n}\n\n/**\n * Creates a set of named TypedArray views on an ArrayBuffer\n * @param structDef Definition of the various types of views.\n * @param arrayBuffer Optional ArrayBuffer to use (if one provided one will be created)\n * @param offset Optional offset in existing ArrayBuffer to start the views.\n * @returns A bunch of named TypedArray views and the ArrayBuffer\n */\nexport function makeTypedArrayViews(structDef: StructDefinition, arrayBuffer?: ArrayBuffer, offset?: number): ArrayBufferViews {\n    const baseOffset = offset || 0;\n    const buffer = arrayBuffer || new ArrayBuffer(getSizeOfStructDef(structDef));\n\n    const makeViews = (structDef: FieldDefinition): TypedArrayOrViews => {\n        if (Array.isArray(structDef)) {\n            return (structDef as StructDefinition[]).map(elemDef => makeViews(elemDef)) as Views[];\n        } else if (typeof structDef === 'string') {\n            throw Error('unreachable');\n        } else {\n            const fields = (structDef as StructDefinition).fields;\n            if (fields) {\n                const views: Views = {};\n                for (const [name, def] of Object.entries(fields)) {\n                    views[name] = makeViews(def as StructDefinition);\n                }\n                return views;\n            } else {\n                const { size, offset, type } = structDef as IntrinsicDefinition;\n              try {\n                const { View } = typeInfo[type];\n                const numElements = size / View.BYTES_PER_ELEMENT;\n                return new View(buffer, baseOffset + offset, numElements);\n              } catch {\n                throw new Error(`unknown type: ${type}`);\n              }\n            }\n        }\n    };\n    return { views: makeViews(structDef), arrayBuffer: buffer };\n}\n\n/**\n * Given a set of TypeArrayViews and matching JavaScript data\n * sets the content of the views.\n * @param data The new values\n * @param views TypedArray views as returned from {@link makeTypedArrayViews}\n */\nexport function setStructuredView(data: any, views: TypedArrayOrViews): void {\n    if (data === undefined) {\n        return;\n    } else if (isTypedArray(views)) {\n        const view = views as TypedArray;\n        if (view.length === 1 && typeof data === 'number') {\n            view[0] = data;\n        } else {\n            if (Array.isArray(data[0]) || isTypedArray(data[0])) {\n                // complete hack!\n                // there's no type data here so let's guess based on the user's data\n                const dataLen = data[0].length;\n                const stride = dataLen === 3 ? 4 : dataLen;\n                for (let i = 0; i < data.length; ++i) {\n                    const offset = i * stride;\n                    view.set(data[i], offset);\n                }\n            } else {\n                view.set(data as number[]);\n            }\n        }\n    } else if (Array.isArray(views)) {\n        const asArray = views as Views[];\n        (data as any[]).forEach((newValue, ndx) => {\n            setStructuredView(newValue, asArray[ndx]);\n        });\n    } else {\n        const asViews = views as Views;\n        for (const [key, newValue] of Object.entries(data)) {\n            const view = asViews[key];\n            if (view) {\n                setStructuredView(newValue, view);\n            }\n        }\n    }\n}\n\nexport type StructuredView = ArrayBufferViews & {\n    /**\n     * Sets the contents of the TypedArrays based on the data passed in\n     * Note: The data may be sparse\n     *\n     * example:\n     *\n     * ```js\n     * const code = `\n     * struct HSL {\n     *   hue: f32,\n     *   sat: f32,\n     *   lum: f32,\n     * };\n     * struct MyUniforms {\n     *    colors: array<HSL, 4>,\n     *    brightness: f32,\n     *    kernel: array<f32, 9>,\n     * };\n     * @group(0) @binding(0) var<uniform> myUniforms: MyUniforms;\n     * `;\n     * const defs = makeShaderDataDefinitions(code);\n     * const myUniformValues = makeStructuredView(defs.uniforms.myUniforms);\n     *\n     * myUniformValues.set({\n     *   colors: [\n     *     ,\n     *     ,\n     *     { hue: 0.5, sat: 1.0, lum: 0.5 },  // only set the 3rd color\n     *   ],\n     *   brightness: 0.8,\n     *   kernel: [\n     *      1, 0, -1,\n     *      2, 0, -2,\n     *      1, 0, -1,\n     *   ],\n     * });\n     * ```\n     *\n     * @param data\n     */\n    set(data: any): void;\n}\n\n/**\n * Given a StructDefinition, create matching TypedArray views\n * @param structDef A StructDefinition as returned from {@link makeShaderDataDefinitions}\n * @param arrayBuffer Optional ArrayBuffer for the views\n * @param offset Optional offset into the ArrayBuffer for the views\n * @returns TypedArray views for the various named fields of the structure as well\n *    as a `set` function to make them easy to set, and the arrayBuffer\n */\nexport function makeStructuredView(structDef: StructDefinition, arrayBuffer?: ArrayBuffer, offset = 0): StructuredView {\n    const views = makeTypedArrayViews(structDef, arrayBuffer, offset);\n    return {\n        ...views,\n        set(data: any) {\n            setStructuredView(data, views.views);\n        },\n    };\n}\n\ntype ViewsByCtor = Map<TypedArrayConstructor, TypedArray>;\nconst s_views = new WeakMap<ArrayBuffer, ViewsByCtor>();\n\nfunction getViewsByCtor(arrayBuffer: ArrayBuffer): ViewsByCtor {\n    let viewsByCtor = s_views.get(arrayBuffer);\n    if (!viewsByCtor) {\n        viewsByCtor = new Map();\n        s_views.set(arrayBuffer, viewsByCtor);\n    }\n    return viewsByCtor;\n}\n\nfunction getView<T extends TypedArray>(arrayBuffer: ArrayBuffer, Ctor: TypedArrayConstructor): T {\n    const viewsByCtor = getViewsByCtor(arrayBuffer);\n    let view = viewsByCtor.get(Ctor);\n    if (!view) {\n        view = new Ctor(arrayBuffer);\n        viewsByCtor.set(Ctor, view);\n    }\n    return view as T;\n}\n\nexport function setStructuredValues(fieldDef: FieldDefinition, data: any, arrayBuffer: ArrayBuffer, offset = 0) {\n    const asIntrinsicDefinition = fieldDef as IntrinsicDefinition;\n    if (asIntrinsicDefinition.type) {\n        const type = typeInfo[asIntrinsicDefinition.type];\n        const view = getView(arrayBuffer, type.View);\n        const index = (offset + asIntrinsicDefinition.offset) / view.BYTES_PER_ELEMENT;\n        if (typeof data === 'number') {\n            view[index] = data;\n        } else {\n            view.set(data, index);\n        }\n    } else if (Array.isArray(fieldDef)) {\n        // It's IntrinsicDefinition[] or StructDefinition[]\n        data.forEach((newValue: any, ndx: number) => {\n            setStructuredValues(fieldDef[ndx], newValue, arrayBuffer, offset);\n        });\n    } else {\n        // It's StructDefinition\n        const asStructDefinition = fieldDef as StructDefinition;\n        for (const [key, newValue] of Object.entries(data)) {\n            const fieldDef = asStructDefinition.fields[key];\n            if (fieldDef) {\n                setStructuredValues(fieldDef, newValue, arrayBuffer, offset);\n            }\n        }\n    }\n}","class ParseContext {\n    constructor() {\n        this.constants = new Map();\n        this.aliases = new Map();\n        this.structs = new Map();\n    }\n}\n/**\n * @class Node\n * @category AST\n * Base class for AST nodes parsed from a WGSL shader.\n */\nclass Node {\n    constructor() { }\n    get isAstNode() {\n        return true;\n    }\n    get astNodeType() {\n        return \"\";\n    }\n    evaluate(context) {\n        throw new Error(\"Cannot evaluate node\");\n    }\n    evaluateString(context) {\n        return this.evaluate(context).toString();\n    }\n}\n/**\n * @class Statement\n * @extends Node\n * @category AST\n */\nclass Statement extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class Function\n * @extends Statement\n * @category AST\n */\nclass Function extends Statement {\n    constructor(name, args, returnType, body) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.returnType = returnType;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"function\";\n    }\n}\n/**\n * @class StaticAssert\n * @extends Statement\n * @category AST\n */\nclass StaticAssert extends Statement {\n    constructor(expression) {\n        super();\n        this.expression = expression;\n    }\n    get astNodeType() {\n        return \"staticAssert\";\n    }\n}\n/**\n * @class While\n * @extends Statement\n * @category AST\n */\nclass While extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"while\";\n    }\n}\n/**\n * @class For\n * @extends Statement\n * @category AST\n */\nclass For extends Statement {\n    constructor(init, condition, increment, body) {\n        super();\n        this.init = init;\n        this.condition = condition;\n        this.increment = increment;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"for\";\n    }\n}\n/**\n * @class Var\n * @extends Statement\n * @category AST\n */\nclass Var extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"var\";\n    }\n}\n/**\n * @class Let\n * @extends Statement\n * @category AST\n */\nclass Let extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"let\";\n    }\n}\n/**\n * @class Const\n * @extends Statement\n * @category AST\n */\nclass Const extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"const\";\n    }\n    evaluate(context) {\n        return this.value.evaluate(context);\n    }\n}\nvar IncrementOperator;\n(function (IncrementOperator) {\n    IncrementOperator[\"increment\"] = \"++\";\n    IncrementOperator[\"decrement\"] = \"--\";\n})(IncrementOperator || (IncrementOperator = {}));\n(function (IncrementOperator) {\n    function parse(val) {\n        const key = val;\n        if (key == \"parse\")\n            throw new Error(\"Invalid value for IncrementOperator\");\n        return IncrementOperator[key];\n    }\n    IncrementOperator.parse = parse;\n})(IncrementOperator || (IncrementOperator = {}));\n/**\n * @class Increment\n * @extends Statement\n * @category AST\n */\nclass Increment extends Statement {\n    constructor(operator, variable) {\n        super();\n        this.operator = operator;\n        this.variable = variable;\n    }\n    get astNodeType() {\n        return \"increment\";\n    }\n}\nvar AssignOperator;\n(function (AssignOperator) {\n    AssignOperator[\"assign\"] = \"=\";\n    AssignOperator[\"addAssign\"] = \"+=\";\n    AssignOperator[\"subtractAssin\"] = \"-=\";\n    AssignOperator[\"multiplyAssign\"] = \"*=\";\n    AssignOperator[\"divideAssign\"] = \"/=\";\n    AssignOperator[\"moduloAssign\"] = \"%=\";\n    AssignOperator[\"andAssign\"] = \"&=\";\n    AssignOperator[\"orAssign\"] = \"|=\";\n    AssignOperator[\"xorAssign\"] = \"^=\";\n    AssignOperator[\"shiftLeftAssign\"] = \"<<=\";\n    AssignOperator[\"shiftRightAssign\"] = \">>=\";\n})(AssignOperator || (AssignOperator = {}));\n(function (AssignOperator) {\n    function parse(val) {\n        const key = val;\n        if (key == \"parse\")\n            throw new Error(\"Invalid value for AssignOperator\");\n        return AssignOperator[key];\n    }\n    AssignOperator.parse = parse;\n})(AssignOperator || (AssignOperator = {}));\n/**\n * @class Assign\n * @extends Statement\n * @category AST\n */\nclass Assign extends Statement {\n    constructor(operator, variable, value) {\n        super();\n        this.operator = operator;\n        this.variable = variable;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"assign\";\n    }\n}\n/**\n * @class Call\n * @extends Statement\n * @category AST\n */\nclass Call extends Statement {\n    constructor(name, args) {\n        super();\n        this.name = name;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"call\";\n    }\n}\n/**\n * @class Loop\n * @extends Statement\n * @category AST\n */\nclass Loop extends Statement {\n    constructor(body, continuing) {\n        super();\n        this.body = body;\n        this.continuing = continuing;\n    }\n    get astNodeType() {\n        return \"loop\";\n    }\n}\n/**\n * @class Switch\n * @extends Statement\n * @category AST\n */\nclass Switch extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"body\";\n    }\n}\n/**\n * @class If\n * @extends Statement\n * @category AST\n */\nclass If extends Statement {\n    constructor(condition, body, elseif, _else) {\n        super();\n        this.condition = condition;\n        this.body = body;\n        this.elseif = elseif;\n        this.else = _else;\n    }\n    get astNodeType() {\n        return \"if\";\n    }\n}\n/**\n * @class Return\n * @extends Statement\n * @category AST\n */\nclass Return extends Statement {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"return\";\n    }\n}\n/**\n * @class Struct\n * @extends Statement\n * @category AST\n */\nclass Struct extends Statement {\n    constructor(name, members) {\n        super();\n        this.name = name;\n        this.members = members;\n    }\n    get astNodeType() {\n        return \"struct\";\n    }\n    /// Return the index of the member with the given name, or -1 if not found.\n    getMemberIndex(name) {\n        for (let i = 0; i < this.members.length; i++) {\n            if (this.members[i].name == name)\n                return i;\n        }\n        return -1;\n    }\n}\n/**\n * @class Enable\n * @extends Statement\n * @category AST\n */\nclass Enable extends Statement {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"enable\";\n    }\n}\n/**\n * @class Alias\n * @extends Statement\n * @category AST\n */\nclass Alias extends Statement {\n    constructor(name, type) {\n        super();\n        this.name = name;\n        this.type = type;\n    }\n    get astNodeType() {\n        return \"alias\";\n    }\n}\n/**\n * @class Discard\n * @extends Statement\n * @category AST\n */\nclass Discard extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"discard\";\n    }\n}\n/**\n * @class Break\n * @extends Statement\n * @category AST\n */\nclass Break extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"break\";\n    }\n}\n/**\n * @class Continue\n * @extends Statement\n * @category AST\n */\nclass Continue extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"continue\";\n    }\n}\n/**\n * @class Type\n * @extends Node\n * @category AST\n */\nclass Type extends Node {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"type\";\n    }\n}\n/**\n * @class TemplateType\n * @extends Type\n * @category AST\n */\nclass TemplateType extends Type {\n    constructor(name, format, access) {\n        super(name);\n        this.format = format;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"template\";\n    }\n}\n/**\n * @class PointerType\n * @extends Type\n * @category AST\n */\nclass PointerType extends Type {\n    constructor(name, storage, type, access) {\n        super(name);\n        this.storage = storage;\n        this.type = type;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"pointer\";\n    }\n}\n/**\n * @class ArrayType\n * @extends Type\n * @category AST\n */\nclass ArrayType extends Type {\n    constructor(name, attributes, format, count) {\n        super(name);\n        this.attributes = attributes;\n        this.format = format;\n        this.count = count;\n    }\n    get astNodeType() {\n        return \"array\";\n    }\n}\n/**\n * @class SamplerType\n * @extends Type\n * @category AST\n */\nclass SamplerType extends Type {\n    constructor(name, format, access) {\n        super(name);\n        this.format = format;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"sampler\";\n    }\n}\n/**\n * @class Expression\n * @extends Node\n * @category AST\n */\nclass Expression extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class StringExpr\n * @extends Expression\n * @category AST\n */\nclass StringExpr extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"stringExpr\";\n    }\n    toString() {\n        return this.value;\n    }\n    evaluateString() {\n        return this.value;\n    }\n}\n/**\n * @class CreateExpr\n * @extends Expression\n * @category AST\n */\nclass CreateExpr extends Expression {\n    constructor(type, args) {\n        super();\n        this.type = type;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"createExpr\";\n    }\n}\n/**\n * @class CallExpr\n * @extends Expression\n * @category AST\n */\nclass CallExpr extends Expression {\n    constructor(name, args) {\n        super();\n        this.name = name;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"callExpr\";\n    }\n    evaluate(context) {\n        switch (this.name) {\n            case \"abs\":\n                return Math.abs(this.args[0].evaluate(context));\n            case \"acos\":\n                return Math.acos(this.args[0].evaluate(context));\n            case \"acosh\":\n                return Math.acosh(this.args[0].evaluate(context));\n            case \"asin\":\n                return Math.asin(this.args[0].evaluate(context));\n            case \"asinh\":\n                return Math.asinh(this.args[0].evaluate(context));\n            case \"atan\":\n                return Math.atan(this.args[0].evaluate(context));\n            case \"atan2\":\n                return Math.atan2(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"atanh\":\n                return Math.atanh(this.args[0].evaluate(context));\n            case \"ceil\":\n                return Math.ceil(this.args[0].evaluate(context));\n            case \"clamp\":\n                return Math.min(Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context)), this.args[2].evaluate(context));\n            case \"cos\":\n                return Math.cos(this.args[0].evaluate(context));\n            //case \"cross\":\n            //TODO: (x[i] * y[j] - x[j] * y[i])\n            case \"degrees\":\n                return (this.args[0].evaluate(context) * 180) / Math.PI;\n            //case \"determinant\":\n            //TODO implement\n            case \"distance\":\n                return Math.sqrt(Math.pow(this.args[0].evaluate(context) - this.args[1].evaluate(context), 2));\n            case \"dot\":\n            //TODO: (x[i] * y[i])\n            case \"exp\":\n                return Math.exp(this.args[0].evaluate(context));\n            case \"exp2\":\n                return Math.pow(2, this.args[0].evaluate(context));\n            //case \"extractBits\":\n            //TODO: implement\n            //case \"firstLeadingBit\":\n            //TODO: implement\n            case \"floor\":\n                return Math.floor(this.args[0].evaluate(context));\n            case \"fma\":\n                return (this.args[0].evaluate(context) * this.args[1].evaluate(context) +\n                    this.args[2].evaluate(context));\n            case \"fract\":\n                return (this.args[0].evaluate(context) -\n                    Math.floor(this.args[0].evaluate(context)));\n            //case \"frexp\":\n            //TODO: implement\n            case \"inverseSqrt\":\n                return 1 / Math.sqrt(this.args[0].evaluate(context));\n            //case \"length\":\n            //TODO: implement\n            case \"log\":\n                return Math.log(this.args[0].evaluate(context));\n            case \"log2\":\n                return Math.log2(this.args[0].evaluate(context));\n            case \"max\":\n                return Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"min\":\n                return Math.min(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"mix\":\n                return (this.args[0].evaluate(context) *\n                    (1 - this.args[2].evaluate(context)) +\n                    this.args[1].evaluate(context) * this.args[2].evaluate(context));\n            case \"modf\":\n                return (this.args[0].evaluate(context) -\n                    Math.floor(this.args[0].evaluate(context)));\n            case \"pow\":\n                return Math.pow(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"radians\":\n                return (this.args[0].evaluate(context) * Math.PI) / 180;\n            case \"round\":\n                return Math.round(this.args[0].evaluate(context));\n            case \"sign\":\n                return Math.sign(this.args[0].evaluate(context));\n            case \"sin\":\n                return Math.sin(this.args[0].evaluate(context));\n            case \"sinh\":\n                return Math.sinh(this.args[0].evaluate(context));\n            case \"saturate\":\n                return Math.min(Math.max(this.args[0].evaluate(context), 0), 1);\n            case \"smoothstep\":\n                return (this.args[0].evaluate(context) *\n                    this.args[0].evaluate(context) *\n                    (3 - 2 * this.args[0].evaluate(context)));\n            case \"sqrt\":\n                return Math.sqrt(this.args[0].evaluate(context));\n            case \"step\":\n                return this.args[0].evaluate(context) < this.args[1].evaluate(context)\n                    ? 0\n                    : 1;\n            case \"tan\":\n                return Math.tan(this.args[0].evaluate(context));\n            case \"tanh\":\n                return Math.tanh(this.args[0].evaluate(context));\n            case \"trunc\":\n                return Math.trunc(this.args[0].evaluate(context));\n            default:\n                throw new Error(\"Non const function: \" + this.name);\n        }\n    }\n}\n/**\n * @class VariableExpr\n * @extends Expression\n * @category AST\n */\nclass VariableExpr extends Expression {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"varExpr\";\n    }\n}\n/**\n * @class ConstExpr\n * @extends Expression\n * @category AST\n */\nclass ConstExpr extends Expression {\n    constructor(name, initializer) {\n        super();\n        this.name = name;\n        this.initializer = initializer;\n    }\n    get astNodeType() {\n        return \"constExpr\";\n    }\n    evaluate(context) {\n        var _a, _b;\n        if (this.initializer instanceof CreateExpr) {\n            // This is a struct constant\n            const property = (_a = this.postfix) === null || _a === void 0 ? void 0 : _a.evaluateString(context);\n            const type = (_b = this.initializer.type) === null || _b === void 0 ? void 0 : _b.name;\n            const struct = context.structs.get(type);\n            const memberIndex = struct === null || struct === void 0 ? void 0 : struct.getMemberIndex(property);\n            if (memberIndex != -1) {\n                const value = this.initializer.args[memberIndex].evaluate(context);\n                return value;\n            }\n            console.log(memberIndex);\n        }\n        return this.initializer.evaluate(context);\n    }\n}\n/**\n * @class LiteralExpr\n * @extends Expression\n * @category AST\n */\nclass LiteralExpr extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"literalExpr\";\n    }\n    evaluate() {\n        return this.value;\n    }\n}\n/**\n * @class BitcastExpr\n * @extends Expression\n * @category AST\n */\nclass BitcastExpr extends Expression {\n    constructor(type, value) {\n        super();\n        this.type = type;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"bitcastExpr\";\n    }\n}\n/**\n * @class TypecastExpr\n * @extends Expression\n * @category AST\n */\nclass TypecastExpr extends Expression {\n    constructor(type, args) {\n        super();\n        this.type = type;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"typecastExpr\";\n    }\n    evaluate(context) {\n        return this.args[0].evaluate(context);\n    }\n}\n/**\n * @class GroupingExpr\n * @extends Expression\n * @category AST\n */\nclass GroupingExpr extends Expression {\n    constructor(contents) {\n        super();\n        this.contents = contents;\n    }\n    get astNodeType() {\n        return \"groupExpr\";\n    }\n    evaluate(context) {\n        return this.contents[0].evaluate(context);\n    }\n}\n/**\n * @class Operator\n * @extends Expression\n * @category AST\n */\nclass Operator extends Expression {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class UnaryOperator\n * @extends Operator\n * @category AST\n * @property {string} operator +, -, !, ~\n */\nclass UnaryOperator extends Operator {\n    constructor(operator, right) {\n        super();\n        this.operator = operator;\n        this.right = right;\n    }\n    get astNodeType() {\n        return \"unaryOp\";\n    }\n    evaluate(context) {\n        switch (this.operator) {\n            case \"+\":\n                return this.right.evaluate(context);\n            case \"-\":\n                return -this.right.evaluate(context);\n            case \"!\":\n                return this.right.evaluate(context) ? 0 : 1;\n            case \"~\":\n                return ~this.right.evaluate(context);\n            default:\n                throw new Error(\"Unknown unary operator: \" + this.operator);\n        }\n    }\n}\n/**\n * @class BinaryOperator\n * @extends Operator\n * @category AST\n * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||\n */\nclass BinaryOperator extends Operator {\n    constructor(operator, left, right) {\n        super();\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n    get astNodeType() {\n        return \"binaryOp\";\n    }\n    evaluate(context) {\n        switch (this.operator) {\n            case \"+\":\n                return this.left.evaluate(context) + this.right.evaluate(context);\n            case \"-\":\n                return this.left.evaluate(context) - this.right.evaluate(context);\n            case \"*\":\n                return this.left.evaluate(context) * this.right.evaluate(context);\n            case \"/\":\n                return this.left.evaluate(context) / this.right.evaluate(context);\n            case \"%\":\n                return this.left.evaluate(context) % this.right.evaluate(context);\n            case \"==\":\n                return this.left.evaluate(context) == this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"!=\":\n                return this.left.evaluate(context) != this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"<\":\n                return this.left.evaluate(context) < this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \">\":\n                return this.left.evaluate(context) > this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"<=\":\n                return this.left.evaluate(context) <= this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \">=\":\n                return this.left.evaluate(context) >= this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"&&\":\n                return this.left.evaluate(context) && this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"||\":\n                return this.left.evaluate(context) || this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            default:\n                throw new Error(`Unknown operator ${this.operator}`);\n        }\n    }\n}\n/**\n * @class SwitchCase\n * @extends Node\n * @category AST\n */\nclass SwitchCase extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class Case\n * @extends SwitchCase\n * @category AST\n */\nclass Case extends SwitchCase {\n    constructor(selector, body) {\n        super();\n        this.selector = selector;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"case\";\n    }\n}\n/**\n * @class Default\n * @extends SwitchCase\n * @category AST\n */\nclass Default extends SwitchCase {\n    constructor(body) {\n        super();\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"default\";\n    }\n}\n/**\n * @class Argument\n * @extends Node\n * @category AST\n */\nclass Argument extends Node {\n    constructor(name, type, attributes) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n    }\n    get astNodeType() {\n        return \"argument\";\n    }\n}\n/**\n * @class ElseIf\n * @extends Node\n * @category AST\n */\nclass ElseIf extends Node {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"elseif\";\n    }\n}\n/**\n * @class Member\n * @extends Node\n * @category AST\n */\nclass Member extends Node {\n    constructor(name, type, attributes) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n    }\n    get astNodeType() {\n        return \"member\";\n    }\n}\n/**\n * @class Attribute\n * @extends Node\n * @category AST\n */\nclass Attribute extends Node {\n    constructor(name, value) {\n        super();\n        this.name = name;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"attribute\";\n    }\n}\n\nvar _a;\nvar TokenClass;\n(function (TokenClass) {\n    TokenClass[TokenClass[\"token\"] = 0] = \"token\";\n    TokenClass[TokenClass[\"keyword\"] = 1] = \"keyword\";\n    TokenClass[TokenClass[\"reserved\"] = 2] = \"reserved\";\n})(TokenClass || (TokenClass = {}));\nclass TokenType {\n    constructor(name, type, rule) {\n        this.name = name;\n        this.type = type;\n        this.rule = rule;\n    }\n    toString() {\n        return this.name;\n    }\n}\n/// Catalog of defined token types, keywords, and reserved words.\nclass TokenTypes {\n}\n_a = TokenTypes;\nTokenTypes.none = new TokenType(\"\", TokenClass.reserved, \"\");\nTokenTypes.eof = new TokenType(\"EOF\", TokenClass.token, \"\");\nTokenTypes.reserved = {\n    asm: new TokenType(\"asm\", TokenClass.reserved, \"asm\"),\n    bf16: new TokenType(\"bf16\", TokenClass.reserved, \"bf16\"),\n    do: new TokenType(\"do\", TokenClass.reserved, \"do\"),\n    enum: new TokenType(\"enum\", TokenClass.reserved, \"enum\"),\n    f16: new TokenType(\"f16\", TokenClass.reserved, \"f16\"),\n    f64: new TokenType(\"f64\", TokenClass.reserved, \"f64\"),\n    handle: new TokenType(\"handle\", TokenClass.reserved, \"handle\"),\n    i8: new TokenType(\"i8\", TokenClass.reserved, \"i8\"),\n    i16: new TokenType(\"i16\", TokenClass.reserved, \"i16\"),\n    i64: new TokenType(\"i64\", TokenClass.reserved, \"i64\"),\n    mat: new TokenType(\"mat\", TokenClass.reserved, \"mat\"),\n    premerge: new TokenType(\"premerge\", TokenClass.reserved, \"premerge\"),\n    regardless: new TokenType(\"regardless\", TokenClass.reserved, \"regardless\"),\n    typedef: new TokenType(\"typedef\", TokenClass.reserved, \"typedef\"),\n    u8: new TokenType(\"u8\", TokenClass.reserved, \"u8\"),\n    u16: new TokenType(\"u16\", TokenClass.reserved, \"u16\"),\n    u64: new TokenType(\"u64\", TokenClass.reserved, \"u64\"),\n    unless: new TokenType(\"unless\", TokenClass.reserved, \"unless\"),\n    using: new TokenType(\"using\", TokenClass.reserved, \"using\"),\n    vec: new TokenType(\"vec\", TokenClass.reserved, \"vec\"),\n    void: new TokenType(\"void\", TokenClass.reserved, \"void\"),\n};\nTokenTypes.keywords = {\n    array: new TokenType(\"array\", TokenClass.keyword, \"array\"),\n    atomic: new TokenType(\"atomic\", TokenClass.keyword, \"atomic\"),\n    bool: new TokenType(\"bool\", TokenClass.keyword, \"bool\"),\n    f32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\n    i32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\n    mat2x2: new TokenType(\"mat2x2\", TokenClass.keyword, \"mat2x2\"),\n    mat2x3: new TokenType(\"mat2x3\", TokenClass.keyword, \"mat2x3\"),\n    mat2x4: new TokenType(\"mat2x4\", TokenClass.keyword, \"mat2x4\"),\n    mat3x2: new TokenType(\"mat3x2\", TokenClass.keyword, \"mat3x2\"),\n    mat3x3: new TokenType(\"mat3x3\", TokenClass.keyword, \"mat3x3\"),\n    mat3x4: new TokenType(\"mat3x4\", TokenClass.keyword, \"mat3x4\"),\n    mat4x2: new TokenType(\"mat4x2\", TokenClass.keyword, \"mat4x2\"),\n    mat4x3: new TokenType(\"mat4x3\", TokenClass.keyword, \"mat4x3\"),\n    mat4x4: new TokenType(\"mat4x4\", TokenClass.keyword, \"mat4x4\"),\n    ptr: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),\n    sampler: new TokenType(\"sampler\", TokenClass.keyword, \"sampler\"),\n    sampler_comparison: new TokenType(\"sampler_comparison\", TokenClass.keyword, \"sampler_comparison\"),\n    struct: new TokenType(\"struct\", TokenClass.keyword, \"struct\"),\n    texture_1d: new TokenType(\"texture_1d\", TokenClass.keyword, \"texture_1d\"),\n    texture_2d: new TokenType(\"texture_2d\", TokenClass.keyword, \"texture_2d\"),\n    texture_2d_array: new TokenType(\"texture_2d_array\", TokenClass.keyword, \"texture_2d_array\"),\n    texture_3d: new TokenType(\"texture_3d\", TokenClass.keyword, \"texture_3d\"),\n    texture_cube: new TokenType(\"texture_cube\", TokenClass.keyword, \"texture_cube\"),\n    texture_cube_array: new TokenType(\"texture_cube_array\", TokenClass.keyword, \"texture_cube_array\"),\n    texture_multisampled_2d: new TokenType(\"texture_multisampled_2d\", TokenClass.keyword, \"texture_multisampled_2d\"),\n    texture_storage_1d: new TokenType(\"texture_storage_1d\", TokenClass.keyword, \"texture_storage_1d\"),\n    texture_storage_2d: new TokenType(\"texture_storage_2d\", TokenClass.keyword, \"texture_storage_2d\"),\n    texture_storage_2d_array: new TokenType(\"texture_storage_2d_array\", TokenClass.keyword, \"texture_storage_2d_array\"),\n    texture_storage_3d: new TokenType(\"texture_storage_3d\", TokenClass.keyword, \"texture_storage_3d\"),\n    texture_depth_2d: new TokenType(\"texture_depth_2d\", TokenClass.keyword, \"texture_depth_2d\"),\n    texture_depth_2d_array: new TokenType(\"texture_depth_2d_array\", TokenClass.keyword, \"texture_depth_2d_array\"),\n    texture_depth_cube: new TokenType(\"texture_depth_cube\", TokenClass.keyword, \"texture_depth_cube\"),\n    texture_depth_cube_array: new TokenType(\"texture_depth_cube_array\", TokenClass.keyword, \"texture_depth_cube_array\"),\n    texture_depth_multisampled_2d: new TokenType(\"texture_depth_multisampled_2d\", TokenClass.keyword, \"texture_depth_multisampled_2d\"),\n    u32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\n    vec2: new TokenType(\"vec2\", TokenClass.keyword, \"vec2\"),\n    vec3: new TokenType(\"vec3\", TokenClass.keyword, \"vec3\"),\n    vec4: new TokenType(\"vec4\", TokenClass.keyword, \"vec4\"),\n    bitcast: new TokenType(\"bitcast\", TokenClass.keyword, \"bitcast\"),\n    block: new TokenType(\"block\", TokenClass.keyword, \"block\"),\n    break: new TokenType(\"break\", TokenClass.keyword, \"break\"),\n    case: new TokenType(\"case\", TokenClass.keyword, \"case\"),\n    continue: new TokenType(\"continue\", TokenClass.keyword, \"continue\"),\n    continuing: new TokenType(\"continuing\", TokenClass.keyword, \"continuing\"),\n    default: new TokenType(\"default\", TokenClass.keyword, \"default\"),\n    discard: new TokenType(\"discard\", TokenClass.keyword, \"discard\"),\n    else: new TokenType(\"else\", TokenClass.keyword, \"else\"),\n    elseif: new TokenType(\"elseif\", TokenClass.keyword, \"elseif\"),\n    enable: new TokenType(\"enable\", TokenClass.keyword, \"enable\"),\n    fallthrough: new TokenType(\"fallthrough\", TokenClass.keyword, \"fallthrough\"),\n    false: new TokenType(\"false\", TokenClass.keyword, \"false\"),\n    fn: new TokenType(\"fn\", TokenClass.keyword, \"fn\"),\n    for: new TokenType(\"for\", TokenClass.keyword, \"for\"),\n    function: new TokenType(\"function\", TokenClass.keyword, \"function\"),\n    if: new TokenType(\"if\", TokenClass.keyword, \"if\"),\n    let: new TokenType(\"let\", TokenClass.keyword, \"let\"),\n    const: new TokenType(\"const\", TokenClass.keyword, \"const\"),\n    loop: new TokenType(\"loop\", TokenClass.keyword, \"loop\"),\n    while: new TokenType(\"while\", TokenClass.keyword, \"while\"),\n    private: new TokenType(\"private\", TokenClass.keyword, \"private\"),\n    read: new TokenType(\"read\", TokenClass.keyword, \"read\"),\n    read_write: new TokenType(\"read_write\", TokenClass.keyword, \"read_write\"),\n    return: new TokenType(\"return\", TokenClass.keyword, \"return\"),\n    storage: new TokenType(\"storage\", TokenClass.keyword, \"storage\"),\n    switch: new TokenType(\"switch\", TokenClass.keyword, \"switch\"),\n    true: new TokenType(\"true\", TokenClass.keyword, \"true\"),\n    alias: new TokenType(\"alias\", TokenClass.keyword, \"alias\"),\n    type: new TokenType(\"type\", TokenClass.keyword, \"type\"),\n    uniform: new TokenType(\"uniform\", TokenClass.keyword, \"uniform\"),\n    var: new TokenType(\"var\", TokenClass.keyword, \"var\"),\n    workgroup: new TokenType(\"workgroup\", TokenClass.keyword, \"workgroup\"),\n    write: new TokenType(\"write\", TokenClass.keyword, \"write\"),\n    r8unorm: new TokenType(\"r8unorm\", TokenClass.keyword, \"r8unorm\"),\n    r8snorm: new TokenType(\"r8snorm\", TokenClass.keyword, \"r8snorm\"),\n    r8uint: new TokenType(\"r8uint\", TokenClass.keyword, \"r8uint\"),\n    r8sint: new TokenType(\"r8sint\", TokenClass.keyword, \"r8sint\"),\n    r16uint: new TokenType(\"r16uint\", TokenClass.keyword, \"r16uint\"),\n    r16sint: new TokenType(\"r16sint\", TokenClass.keyword, \"r16sint\"),\n    r16float: new TokenType(\"r16float\", TokenClass.keyword, \"r16float\"),\n    rg8unorm: new TokenType(\"rg8unorm\", TokenClass.keyword, \"rg8unorm\"),\n    rg8snorm: new TokenType(\"rg8snorm\", TokenClass.keyword, \"rg8snorm\"),\n    rg8uint: new TokenType(\"rg8uint\", TokenClass.keyword, \"rg8uint\"),\n    rg8sint: new TokenType(\"rg8sint\", TokenClass.keyword, \"rg8sint\"),\n    r32uint: new TokenType(\"r32uint\", TokenClass.keyword, \"r32uint\"),\n    r32sint: new TokenType(\"r32sint\", TokenClass.keyword, \"r32sint\"),\n    r32float: new TokenType(\"r32float\", TokenClass.keyword, \"r32float\"),\n    rg16uint: new TokenType(\"rg16uint\", TokenClass.keyword, \"rg16uint\"),\n    rg16sint: new TokenType(\"rg16sint\", TokenClass.keyword, \"rg16sint\"),\n    rg16float: new TokenType(\"rg16float\", TokenClass.keyword, \"rg16float\"),\n    rgba8unorm: new TokenType(\"rgba8unorm\", TokenClass.keyword, \"rgba8unorm\"),\n    rgba8unorm_srgb: new TokenType(\"rgba8unorm_srgb\", TokenClass.keyword, \"rgba8unorm_srgb\"),\n    rgba8snorm: new TokenType(\"rgba8snorm\", TokenClass.keyword, \"rgba8snorm\"),\n    rgba8uint: new TokenType(\"rgba8uint\", TokenClass.keyword, \"rgba8uint\"),\n    rgba8sint: new TokenType(\"rgba8sint\", TokenClass.keyword, \"rgba8sint\"),\n    bgra8unorm: new TokenType(\"bgra8unorm\", TokenClass.keyword, \"bgra8unorm\"),\n    bgra8unorm_srgb: new TokenType(\"bgra8unorm_srgb\", TokenClass.keyword, \"bgra8unorm_srgb\"),\n    rgb10a2unorm: new TokenType(\"rgb10a2unorm\", TokenClass.keyword, \"rgb10a2unorm\"),\n    rg11b10float: new TokenType(\"rg11b10float\", TokenClass.keyword, \"rg11b10float\"),\n    rg32uint: new TokenType(\"rg32uint\", TokenClass.keyword, \"rg32uint\"),\n    rg32sint: new TokenType(\"rg32sint\", TokenClass.keyword, \"rg32sint\"),\n    rg32float: new TokenType(\"rg32float\", TokenClass.keyword, \"rg32float\"),\n    rgba16uint: new TokenType(\"rgba16uint\", TokenClass.keyword, \"rgba16uint\"),\n    rgba16sint: new TokenType(\"rgba16sint\", TokenClass.keyword, \"rgba16sint\"),\n    rgba16float: new TokenType(\"rgba16float\", TokenClass.keyword, \"rgba16float\"),\n    rgba32uint: new TokenType(\"rgba32uint\", TokenClass.keyword, \"rgba32uint\"),\n    rgba32sint: new TokenType(\"rgba32sint\", TokenClass.keyword, \"rgba32sint\"),\n    rgba32float: new TokenType(\"rgba32float\", TokenClass.keyword, \"rgba32float\"),\n    static_assert: new TokenType(\"static_assert\", TokenClass.keyword, \"static_assert\"),\n    // WGSL grammar has a few keywords that have different token names than the strings they\n    // represent. Aliasing them here.\n    /*int32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\n        uint32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\n        float32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\n        pointer: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),*/\n};\nTokenTypes.tokens = {\n    decimal_float_literal: new TokenType(\"decimal_float_literal\", TokenClass.token, /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+f?)/),\n    hex_float_literal: new TokenType(\"hex_float_literal\", TokenClass.token, /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+f?))/),\n    int_literal: new TokenType(\"int_literal\", TokenClass.token, /-?0x[0-9a-fA-F]+|0|-?[1-9][0-9]*/),\n    uint_literal: new TokenType(\"uint_literal\", TokenClass.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),\n    ident: new TokenType(\"ident\", TokenClass.token, /[a-zA-Z][0-9a-zA-Z_]*/),\n    and: new TokenType(\"and\", TokenClass.token, \"&\"),\n    and_and: new TokenType(\"and_and\", TokenClass.token, \"&&\"),\n    arrow: new TokenType(\"arrow \", TokenClass.token, \"->\"),\n    attr: new TokenType(\"attr\", TokenClass.token, \"@\"),\n    attr_left: new TokenType(\"attr_left\", TokenClass.token, \"[[\"),\n    attr_right: new TokenType(\"attr_right\", TokenClass.token, \"]]\"),\n    forward_slash: new TokenType(\"forward_slash\", TokenClass.token, \"/\"),\n    bang: new TokenType(\"bang\", TokenClass.token, \"!\"),\n    bracket_left: new TokenType(\"bracket_left\", TokenClass.token, \"[\"),\n    bracket_right: new TokenType(\"bracket_right\", TokenClass.token, \"]\"),\n    brace_left: new TokenType(\"brace_left\", TokenClass.token, \"{\"),\n    brace_right: new TokenType(\"brace_right\", TokenClass.token, \"}\"),\n    colon: new TokenType(\"colon\", TokenClass.token, \":\"),\n    comma: new TokenType(\"comma\", TokenClass.token, \",\"),\n    equal: new TokenType(\"equal\", TokenClass.token, \"=\"),\n    equal_equal: new TokenType(\"equal_equal\", TokenClass.token, \"==\"),\n    not_equal: new TokenType(\"not_equal\", TokenClass.token, \"!=\"),\n    greater_than: new TokenType(\"greater_than\", TokenClass.token, \">\"),\n    greater_than_equal: new TokenType(\"greater_than_equal\", TokenClass.token, \">=\"),\n    shift_right: new TokenType(\"shift_right\", TokenClass.token, \">>\"),\n    less_than: new TokenType(\"less_than\", TokenClass.token, \"<\"),\n    less_than_equal: new TokenType(\"less_than_equal\", TokenClass.token, \"<=\"),\n    shift_left: new TokenType(\"shift_left\", TokenClass.token, \"<<\"),\n    modulo: new TokenType(\"modulo\", TokenClass.token, \"%\"),\n    minus: new TokenType(\"minus\", TokenClass.token, \"-\"),\n    minus_minus: new TokenType(\"minus_minus\", TokenClass.token, \"--\"),\n    period: new TokenType(\"period\", TokenClass.token, \".\"),\n    plus: new TokenType(\"plus\", TokenClass.token, \"+\"),\n    plus_plus: new TokenType(\"plus_plus\", TokenClass.token, \"++\"),\n    or: new TokenType(\"or\", TokenClass.token, \"|\"),\n    or_or: new TokenType(\"or_or\", TokenClass.token, \"||\"),\n    paren_left: new TokenType(\"paren_left\", TokenClass.token, \"(\"),\n    paren_right: new TokenType(\"paren_right\", TokenClass.token, \")\"),\n    semicolon: new TokenType(\"semicolon\", TokenClass.token, \";\"),\n    star: new TokenType(\"star\", TokenClass.token, \"*\"),\n    tilde: new TokenType(\"tilde\", TokenClass.token, \"~\"),\n    underscore: new TokenType(\"underscore\", TokenClass.token, \"_\"),\n    xor: new TokenType(\"xor\", TokenClass.token, \"^\"),\n    plus_equal: new TokenType(\"plus_equal\", TokenClass.token, \"+=\"),\n    minus_equal: new TokenType(\"minus_equal\", TokenClass.token, \"-=\"),\n    times_equal: new TokenType(\"times_equal\", TokenClass.token, \"*=\"),\n    division_equal: new TokenType(\"division_equal\", TokenClass.token, \"/=\"),\n    modulo_equal: new TokenType(\"modulo_equal\", TokenClass.token, \"%=\"),\n    and_equal: new TokenType(\"and_equal\", TokenClass.token, \"&=\"),\n    or_equal: new TokenType(\"or_equal\", TokenClass.token, \"|=\"),\n    xor_equal: new TokenType(\"xor_equal\", TokenClass.token, \"^=\"),\n    shift_right_equal: new TokenType(\"shift_right_equal\", TokenClass.token, \">>=\"),\n    shift_left_equal: new TokenType(\"shift_left_equal\", TokenClass.token, \"<<=\"),\n};\nTokenTypes.storage_class = [\n    _a.keywords.function,\n    _a.keywords.private,\n    _a.keywords.workgroup,\n    _a.keywords.uniform,\n    _a.keywords.storage,\n];\nTokenTypes.access_mode = [\n    _a.keywords.read,\n    _a.keywords.write,\n    _a.keywords.read_write,\n];\nTokenTypes.sampler_type = [\n    _a.keywords.sampler,\n    _a.keywords.sampler_comparison,\n];\nTokenTypes.sampled_texture_type = [\n    _a.keywords.texture_1d,\n    _a.keywords.texture_2d,\n    _a.keywords.texture_2d_array,\n    _a.keywords.texture_3d,\n    _a.keywords.texture_cube,\n    _a.keywords.texture_cube_array,\n];\nTokenTypes.multisampled_texture_type = [\n    _a.keywords.texture_multisampled_2d,\n];\nTokenTypes.storage_texture_type = [\n    _a.keywords.texture_storage_1d,\n    _a.keywords.texture_storage_2d,\n    _a.keywords.texture_storage_2d_array,\n    _a.keywords.texture_storage_3d,\n];\nTokenTypes.depth_texture_type = [\n    _a.keywords.texture_depth_2d,\n    _a.keywords.texture_depth_2d_array,\n    _a.keywords.texture_depth_cube,\n    _a.keywords.texture_depth_cube_array,\n    _a.keywords.texture_depth_multisampled_2d,\n];\nTokenTypes.any_texture_type = [\n    ..._a.sampled_texture_type,\n    ..._a.multisampled_texture_type,\n    ..._a.storage_texture_type,\n    ..._a.depth_texture_type,\n];\nTokenTypes.texel_format = [\n    _a.keywords.r8unorm,\n    _a.keywords.r8snorm,\n    _a.keywords.r8uint,\n    _a.keywords.r8sint,\n    _a.keywords.r16uint,\n    _a.keywords.r16sint,\n    _a.keywords.r16float,\n    _a.keywords.rg8unorm,\n    _a.keywords.rg8snorm,\n    _a.keywords.rg8uint,\n    _a.keywords.rg8sint,\n    _a.keywords.r32uint,\n    _a.keywords.r32sint,\n    _a.keywords.r32float,\n    _a.keywords.rg16uint,\n    _a.keywords.rg16sint,\n    _a.keywords.rg16float,\n    _a.keywords.rgba8unorm,\n    _a.keywords.rgba8unorm_srgb,\n    _a.keywords.rgba8snorm,\n    _a.keywords.rgba8uint,\n    _a.keywords.rgba8sint,\n    _a.keywords.bgra8unorm,\n    _a.keywords.bgra8unorm_srgb,\n    _a.keywords.rgb10a2unorm,\n    _a.keywords.rg11b10float,\n    _a.keywords.rg32uint,\n    _a.keywords.rg32sint,\n    _a.keywords.rg32float,\n    _a.keywords.rgba16uint,\n    _a.keywords.rgba16sint,\n    _a.keywords.rgba16float,\n    _a.keywords.rgba32uint,\n    _a.keywords.rgba32sint,\n    _a.keywords.rgba32float,\n];\nTokenTypes.const_literal = [\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.decimal_float_literal,\n    _a.tokens.hex_float_literal,\n    _a.keywords.true,\n    _a.keywords.false,\n];\nTokenTypes.literal_or_ident = [\n    _a.tokens.ident,\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.decimal_float_literal,\n    _a.tokens.hex_float_literal,\n];\nTokenTypes.element_count_expression = [\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.ident,\n];\nTokenTypes.template_types = [\n    _a.keywords.vec2,\n    _a.keywords.vec3,\n    _a.keywords.vec4,\n    _a.keywords.mat2x2,\n    _a.keywords.mat2x3,\n    _a.keywords.mat2x4,\n    _a.keywords.mat3x2,\n    _a.keywords.mat3x3,\n    _a.keywords.mat3x4,\n    _a.keywords.mat4x2,\n    _a.keywords.mat4x3,\n    _a.keywords.mat4x4,\n    _a.keywords.atomic,\n    _a.keywords.bitcast,\n    ..._a.any_texture_type,\n];\n// The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\n// The attribute grammar should be ident | block.\nTokenTypes.attribute_name = [_a.tokens.ident, _a.keywords.block];\nTokenTypes.assignment_operators = [\n    _a.tokens.equal,\n    _a.tokens.plus_equal,\n    _a.tokens.minus_equal,\n    _a.tokens.times_equal,\n    _a.tokens.division_equal,\n    _a.tokens.modulo_equal,\n    _a.tokens.and_equal,\n    _a.tokens.or_equal,\n    _a.tokens.xor_equal,\n    _a.tokens.shift_right_equal,\n    _a.tokens.shift_left_equal,\n];\nTokenTypes.increment_operators = [\n    _a.tokens.plus_plus,\n    _a.tokens.minus_minus,\n];\n/// A token parsed by the WgslScanner.\nclass Token {\n    constructor(type, lexeme, line) {\n        this.type = type;\n        this.lexeme = lexeme;\n        this.line = line;\n    }\n    toString() {\n        return this.lexeme;\n    }\n}\n/// Lexical scanner for the WGSL language. This takes an input source text and generates a list\n/// of Token objects, which can then be fed into the WgslParser to generate an AST.\nclass WgslScanner {\n    constructor(source) {\n        this._tokens = [];\n        this._start = 0;\n        this._current = 0;\n        this._line = 1;\n        this._source = source !== null && source !== void 0 ? source : \"\";\n    }\n    /// Scan all tokens from the source.\n    scanTokens() {\n        while (!this._isAtEnd()) {\n            this._start = this._current;\n            if (!this.scanToken())\n                throw `Invalid syntax at line ${this._line}`;\n        }\n        this._tokens.push(new Token(TokenTypes.eof, \"\", this._line));\n        return this._tokens;\n    }\n    /// Scan a single token from the source.\n    scanToken() {\n        // Find the longest consecutive set of characters that match a rule.\n        let lexeme = this._advance();\n        // Skip line-feed, adding to the line counter.\n        if (lexeme == \"\\n\") {\n            this._line++;\n            return true;\n        }\n        // Skip whitespace\n        if (this._isWhitespace(lexeme)) {\n            return true;\n        }\n        if (lexeme == \"/\") {\n            // If it's a // comment, skip everything until the next line-feed.\n            if (this._peekAhead() == \"/\") {\n                while (lexeme != \"\\n\") {\n                    if (this._isAtEnd())\n                        return true;\n                    lexeme = this._advance();\n                }\n                // skip the linefeed\n                this._line++;\n                return true;\n            }\n            else if (this._peekAhead() == \"*\") {\n                // If it's a / * block comment, skip everything until the matching * /,\n                // allowing for nested block comments.\n                this._advance();\n                let commentLevel = 1;\n                while (commentLevel > 0) {\n                    if (this._isAtEnd())\n                        return true;\n                    lexeme = this._advance();\n                    if (lexeme == \"\\n\") {\n                        this._line++;\n                    }\n                    else if (lexeme == \"*\") {\n                        if (this._peekAhead() == \"/\") {\n                            this._advance();\n                            commentLevel--;\n                            if (commentLevel == 0) {\n                                return true;\n                            }\n                        }\n                    }\n                    else if (lexeme == \"/\") {\n                        if (this._peekAhead() == \"*\") {\n                            this._advance();\n                            commentLevel++;\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n        let matchType = TokenTypes.none;\n        for (;;) {\n            let matchedType = this._findType(lexeme);\n            // The exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a\n            // shift_right.\n            // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\n            // and one to close the array).\n            // I don't know of a great way to resolve this, so '>>' is special-cased and if\n            // there was a less_than up to some number of tokens previously, and the token prior to\n            // that is a keyword that requires a '<', then it will be split into two greater_than's;\n            // otherwise it's a shift_right.\n            if (lexeme == \">\" && this._peekAhead() == \">\") {\n                let foundLessThan = false;\n                let ti = this._tokens.length - 1;\n                for (let count = 0; count < 4 && ti >= 0; ++count, --ti) {\n                    if (this._tokens[ti].type === TokenTypes.tokens.less_than) {\n                        if (ti > 0 &&\n                            TokenTypes.template_types.indexOf(this._tokens[ti - 1].type) != -1) {\n                            foundLessThan = true;\n                        }\n                        break;\n                    }\n                }\n                // If there was a less_than in the recent token history, then this is probably a\n                // greater_than.\n                if (foundLessThan) {\n                    this._addToken(matchedType);\n                    return true;\n                }\n            }\n            // The current lexeme may not match any rule, but some token types may be invalid for\n            // part of the string but valid after a few more characters.\n            // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\n            // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\n            // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\n            // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\n            // hex_float_literal. So that means if we hit an non-matching string, we should look\n            // ahead up to two characters to see if the string starts matching a valid rule again.\n            if (matchedType === TokenTypes.none) {\n                let lookAheadLexeme = lexeme;\n                let lookAhead = 0;\n                const maxLookAhead = 2;\n                for (let li = 0; li < maxLookAhead; ++li) {\n                    lookAheadLexeme += this._peekAhead(li);\n                    matchedType = this._findType(lookAheadLexeme);\n                    if (matchedType !== TokenTypes.none) {\n                        lookAhead = li;\n                        break;\n                    }\n                }\n                if (matchedType === TokenTypes.none) {\n                    if (matchType === TokenTypes.none)\n                        return false;\n                    this._current--;\n                    this._addToken(matchType);\n                    return true;\n                }\n                lexeme = lookAheadLexeme;\n                this._current += lookAhead + 1;\n            }\n            matchType = matchedType;\n            if (this._isAtEnd())\n                break;\n            lexeme += this._advance();\n        }\n        // We got to the end of the input stream. Then the token we've ready so far is it.\n        if (matchType === TokenTypes.none)\n            return false;\n        this._addToken(matchType);\n        return true;\n    }\n    _findType(lexeme) {\n        for (const name in TokenTypes.keywords) {\n            const type = TokenTypes.keywords[name];\n            if (this._match(lexeme, type.rule)) {\n                return type;\n            }\n        }\n        for (const name in TokenTypes.tokens) {\n            const type = TokenTypes.tokens[name];\n            if (this._match(lexeme, type.rule)) {\n                return type;\n            }\n        }\n        return TokenTypes.none;\n    }\n    _match(lexeme, rule) {\n        if (typeof rule === \"string\") {\n            if (rule == lexeme) {\n                return true;\n            }\n        }\n        else {\n            // regex\n            const match = rule.exec(lexeme);\n            if (match && match.index == 0 && match[0] == lexeme)\n                return true;\n        }\n        return false;\n    }\n    _isAtEnd() {\n        return this._current >= this._source.length;\n    }\n    _isWhitespace(c) {\n        return c == \" \" || c == \"\\t\" || c == \"\\r\";\n    }\n    _advance(amount = 0) {\n        let c = this._source[this._current];\n        amount = amount || 0;\n        amount++;\n        this._current += amount;\n        return c;\n    }\n    _peekAhead(offset = 0) {\n        offset = offset || 0;\n        if (this._current + offset >= this._source.length)\n            return \"\\0\";\n        return this._source[this._current + offset];\n    }\n    _addToken(type) {\n        const text = this._source.substring(this._start, this._current);\n        this._tokens.push(new Token(type, text, this._line));\n    }\n}\n\n/**\n * @author Brendan Duncan / https://github.com/brendan-duncan\n */\n/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).\nclass WgslParser {\n    constructor() {\n        this._tokens = [];\n        this._current = 0;\n        this._context = new ParseContext();\n    }\n    parse(tokensOrCode) {\n        this._initialize(tokensOrCode);\n        let statements = [];\n        while (!this._isAtEnd()) {\n            const statement = this._global_decl_or_directive();\n            if (!statement)\n                break;\n            statements.push(statement);\n        }\n        return statements;\n    }\n    _initialize(tokensOrCode) {\n        if (tokensOrCode) {\n            if (typeof tokensOrCode == \"string\") {\n                const scanner = new WgslScanner(tokensOrCode);\n                this._tokens = scanner.scanTokens();\n            }\n            else {\n                this._tokens = tokensOrCode;\n            }\n        }\n        else {\n            this._tokens = [];\n        }\n        this._current = 0;\n    }\n    _error(token, message) {\n        console.error(token, message);\n        return {\n            token,\n            message,\n            toString: function () {\n                return `${message}`;\n            },\n        };\n    }\n    _isAtEnd() {\n        return (this._current >= this._tokens.length ||\n            this._peek().type == TokenTypes.eof);\n    }\n    _match(types) {\n        if (types instanceof TokenType) {\n            if (this._check(types)) {\n                this._advance();\n                return true;\n            }\n            return false;\n        }\n        for (let i = 0, l = types.length; i < l; ++i) {\n            const type = types[i];\n            if (this._check(type)) {\n                this._advance();\n                return true;\n            }\n        }\n        return false;\n    }\n    _consume(types, message) {\n        if (this._check(types))\n            return this._advance();\n        throw this._error(this._peek(), message);\n    }\n    _check(types) {\n        if (this._isAtEnd())\n            return false;\n        const tk = this._peek();\n        if (types instanceof Array) {\n            let t = tk.type;\n            let index = types.indexOf(t);\n            return index != -1;\n        }\n        return tk.type == types;\n    }\n    _advance() {\n        if (!this._isAtEnd())\n            this._current++;\n        return this._previous();\n    }\n    _peek() {\n        return this._tokens[this._current];\n    }\n    _previous() {\n        return this._tokens[this._current - 1];\n    }\n    _global_decl_or_directive() {\n        // semicolon\n        // global_variable_decl semicolon\n        // global_constant_decl semicolon\n        // type_alias semicolon\n        // struct_decl\n        // function_decl\n        // enable_directive\n        // Ignore any stand-alone semicolons\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\n            ;\n        if (this._match(TokenTypes.keywords.alias)) {\n            const type = this._type_alias();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return type;\n        }\n        if (this._match(TokenTypes.keywords.enable)) {\n            const enable = this._enable_directive();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return enable;\n        }\n        // The following statements have an optional attribute*\n        const attrs = this._attribute();\n        if (this._check(TokenTypes.keywords.var)) {\n            const _var = this._global_variable_decl();\n            if (_var != null)\n                _var.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _var;\n        }\n        if (this._check(TokenTypes.keywords.let)) {\n            const _let = this._global_let_decl();\n            if (_let != null)\n                _let.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _let;\n        }\n        if (this._check(TokenTypes.keywords.const)) {\n            const _const = this._global_const_decl();\n            if (_const != null)\n                _const.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _const;\n        }\n        if (this._check(TokenTypes.keywords.struct)) {\n            const _struct = this._struct_decl();\n            if (_struct != null)\n                _struct.attributes = attrs;\n            return _struct;\n        }\n        if (this._check(TokenTypes.keywords.fn)) {\n            const _fn = this._function_decl();\n            if (_fn != null)\n                _fn.attributes = attrs;\n            return _fn;\n        }\n        return null;\n    }\n    _function_decl() {\n        // attribute* function_header compound_statement\n        // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\n        if (!this._match(TokenTypes.keywords.fn))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\").toString();\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '(' for function arguments.\");\n        const args = [];\n        if (!this._check(TokenTypes.tokens.paren_right)) {\n            do {\n                if (this._check(TokenTypes.tokens.paren_right))\n                    break;\n                const argAttrs = this._attribute();\n                const name = this._consume(TokenTypes.tokens.ident, \"Expected argument name.\").toString();\n                this._consume(TokenTypes.tokens.colon, \"Expected ':' for argument type.\");\n                const typeAttrs = this._attribute();\n                const type = this._type_decl();\n                if (type != null) {\n                    type.attributes = typeAttrs;\n                    args.push(new Argument(name, type, argAttrs));\n                }\n            } while (this._match(TokenTypes.tokens.comma));\n        }\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' after function arguments.\");\n        let _return = null;\n        if (this._match(TokenTypes.tokens.arrow)) {\n            const attrs = this._attribute();\n            _return = this._type_decl();\n            if (_return != null)\n                _return.attributes = attrs;\n        }\n        const body = this._compound_statement();\n        return new Function(name, args, _return, body);\n    }\n    _compound_statement() {\n        // brace_left statement* brace_right\n        const statements = [];\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for block.\");\n        while (!this._check(TokenTypes.tokens.brace_right)) {\n            const statement = this._statement();\n            if (statement !== null)\n                statements.push(statement);\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for block.\");\n        return statements;\n    }\n    _statement() {\n        // semicolon\n        // return_statement semicolon\n        // if_statement\n        // switch_statement\n        // loop_statement\n        // for_statement\n        // func_call_statement semicolon\n        // variable_statement semicolon\n        // break_statement semicolon\n        // continue_statement semicolon\n        // discard semicolon\n        // assignment_statement semicolon\n        // compound_statement\n        // increment_statement semicolon\n        // decrement_statement semicolon\n        // static_assert_statement semicolon\n        // Ignore any stand-alone semicolons\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\n            ;\n        if (this._check(TokenTypes.keywords.if))\n            return this._if_statement();\n        if (this._check(TokenTypes.keywords.switch))\n            return this._switch_statement();\n        if (this._check(TokenTypes.keywords.loop))\n            return this._loop_statement();\n        if (this._check(TokenTypes.keywords.for))\n            return this._for_statement();\n        if (this._check(TokenTypes.keywords.while))\n            return this._while_statement();\n        if (this._check(TokenTypes.keywords.static_assert))\n            return this._static_assert_statement();\n        if (this._check(TokenTypes.tokens.brace_left))\n            return this._compound_statement();\n        let result = null;\n        if (this._check(TokenTypes.keywords.return))\n            result = this._return_statement();\n        else if (this._check([\n            TokenTypes.keywords.var,\n            TokenTypes.keywords.let,\n            TokenTypes.keywords.const,\n        ]))\n            result = this._variable_statement();\n        else if (this._match(TokenTypes.keywords.discard))\n            result = new Discard();\n        else if (this._match(TokenTypes.keywords.break))\n            result = new Break();\n        else if (this._match(TokenTypes.keywords.continue))\n            result = new Continue();\n        else\n            result =\n                this._increment_decrement_statement() ||\n                    this._func_call_statement() ||\n                    this._assignment_statement();\n        if (result != null)\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';' after statement.\");\n        return result;\n    }\n    _static_assert_statement() {\n        if (!this._match(TokenTypes.keywords.static_assert))\n            return null;\n        let expression = this._optional_paren_expression();\n        return new StaticAssert(expression);\n    }\n    _while_statement() {\n        if (!this._match(TokenTypes.keywords.while))\n            return null;\n        let condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        return new While(condition, block);\n    }\n    _for_statement() {\n        // for paren_left for_header paren_right compound_statement\n        if (!this._match(TokenTypes.keywords.for))\n            return null;\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\n        const init = !this._check(TokenTypes.tokens.semicolon)\n            ? this._for_init()\n            : null;\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n        const condition = !this._check(TokenTypes.tokens.semicolon)\n            ? this._short_circuit_or_expression()\n            : null;\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n        const increment = !this._check(TokenTypes.tokens.paren_right)\n            ? this._for_increment()\n            : null;\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        const body = this._compound_statement();\n        return new For(init, condition, increment, body);\n    }\n    _for_init() {\n        // (variable_statement assignment_statement func_call_statement)?\n        return (this._variable_statement() ||\n            this._func_call_statement() ||\n            this._assignment_statement());\n    }\n    _for_increment() {\n        // (assignment_statement func_call_statement increment_statement)?\n        return (this._func_call_statement() ||\n            this._increment_decrement_statement() ||\n            this._assignment_statement());\n    }\n    _variable_statement() {\n        // variable_decl\n        // variable_decl equal short_circuit_or_expression\n        // let (ident variable_ident_decl) equal short_circuit_or_expression\n        // const (ident variable_ident_decl) equal short_circuit_or_expression\n        if (this._check(TokenTypes.keywords.var)) {\n            const _var = this._variable_decl();\n            if (_var === null)\n                throw this._error(this._peek(), \"Variable declaration expected.\");\n            let value = null;\n            if (this._match(TokenTypes.tokens.equal))\n                value = this._short_circuit_or_expression();\n            return new Var(_var.name, _var.type, _var.storage, _var.access, value);\n        }\n        if (this._match(TokenTypes.keywords.let)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for let.\").toString();\n            let type = null;\n            if (this._match(TokenTypes.tokens.colon)) {\n                const typeAttrs = this._attribute();\n                type = this._type_decl();\n                if (type != null)\n                    type.attributes = typeAttrs;\n            }\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for let.\");\n            const value = this._short_circuit_or_expression();\n            return new Let(name, type, null, null, value);\n        }\n        if (this._match(TokenTypes.keywords.const)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for const.\").toString();\n            let type = null;\n            if (this._match(TokenTypes.tokens.colon)) {\n                const typeAttrs = this._attribute();\n                type = this._type_decl();\n                if (type != null)\n                    type.attributes = typeAttrs;\n            }\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for const.\");\n            const value = this._short_circuit_or_expression();\n            return new Const(name, type, null, null, value);\n        }\n        return null;\n    }\n    _increment_decrement_statement() {\n        const savedPos = this._current;\n        const _var = this._unary_expression();\n        if (_var == null)\n            return null;\n        if (!this._check(TokenTypes.increment_operators)) {\n            this._current = savedPos;\n            return null;\n        }\n        const token = this._consume(TokenTypes.increment_operators, \"Expected increment operator\");\n        return new Increment(token.type === TokenTypes.tokens.plus_plus\n            ? IncrementOperator.increment\n            : IncrementOperator.decrement, _var);\n    }\n    _assignment_statement() {\n        // (unary_expression underscore) equal short_circuit_or_expression\n        let _var = null;\n        if (this._check(TokenTypes.tokens.brace_right))\n            return null;\n        let isUnderscore = this._match(TokenTypes.tokens.underscore);\n        if (!isUnderscore)\n            _var = this._unary_expression();\n        if (!isUnderscore && _var == null)\n            return null;\n        const type = this._consume(TokenTypes.assignment_operators, \"Expected assignment operator.\");\n        const value = this._short_circuit_or_expression();\n        return new Assign(AssignOperator.parse(type.lexeme), _var, value);\n    }\n    _func_call_statement() {\n        // ident argument_expression_list\n        if (!this._check(TokenTypes.tokens.ident))\n            return null;\n        const savedPos = this._current;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\");\n        const args = this._argument_expression_list();\n        if (args === null) {\n            this._current = savedPos;\n            return null;\n        }\n        return new Call(name.lexeme, args);\n    }\n    _loop_statement() {\n        // loop brace_left statement* continuing_statement? brace_right\n        if (!this._match(TokenTypes.keywords.loop))\n            return null;\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for loop.\");\n        // statement*\n        const statements = [];\n        let statement = this._statement();\n        while (statement !== null) {\n            if (statement instanceof (Array)) {\n                for (let s of statement) {\n                    statements.push(s);\n                }\n            }\n            else {\n                statements.push(statement);\n            }\n            statement = this._statement();\n        }\n        // continuing_statement: continuing compound_statement\n        let continuing = null;\n        if (this._match(TokenTypes.keywords.continuing))\n            continuing = this._compound_statement();\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for loop.\");\n        return new Loop(statements, continuing);\n    }\n    _switch_statement() {\n        // switch optional_paren_expression brace_left switch_body+ brace_right\n        if (!this._match(TokenTypes.keywords.switch))\n            return null;\n        const condition = this._optional_paren_expression();\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for switch.\");\n        const body = this._switch_body();\n        if (body == null || body.length == 0)\n            throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for switch.\");\n        return new Switch(condition, body);\n    }\n    _switch_body() {\n        // case case_selectors colon brace_left case_body? brace_right\n        // default colon brace_left case_body? brace_right\n        const cases = [];\n        if (this._match(TokenTypes.keywords.case)) {\n            const selector = this._case_selectors();\n            this._consume(TokenTypes.tokens.colon, \"Exected ':' for switch case.\");\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch case.\");\n            const body = this._case_body();\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch case.\");\n            cases.push(new Case(selector, body));\n        }\n        if (this._match(TokenTypes.keywords.default)) {\n            this._consume(TokenTypes.tokens.colon, \"Exected ':' for switch default.\");\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch default.\");\n            const body = this._case_body();\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch default.\");\n            cases.push(new Default(body));\n        }\n        if (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {\n            const _cases = this._switch_body();\n            cases.push(_cases[0]);\n        }\n        return cases;\n    }\n    _case_selectors() {\n        // const_literal (comma const_literal)* comma?\n        const selectors = [\n            this._consume(TokenTypes.const_literal, \"Expected constant literal\").toString(),\n        ];\n        while (this._match(TokenTypes.tokens.comma)) {\n            selectors.push(this._consume(TokenTypes.const_literal, \"Expected constant literal\").toString());\n        }\n        return selectors;\n    }\n    _case_body() {\n        // statement case_body?\n        // fallthrough semicolon\n        if (this._match(TokenTypes.keywords.fallthrough)) {\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return [];\n        }\n        let statement = this._statement();\n        if (statement == null)\n            return [];\n        if (!(statement instanceof Array)) {\n            statement = [statement];\n        }\n        const nextStatement = this._case_body();\n        if (nextStatement.length == 0)\n            return statement;\n        return [...statement, nextStatement[0]];\n    }\n    _if_statement() {\n        // if optional_paren_expression compound_statement elseif_statement? else_statement?\n        if (!this._match(TokenTypes.keywords.if))\n            return null;\n        const condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        let elseif = null;\n        if (this._match(TokenTypes.keywords.elseif))\n            elseif = this._elseif_statement();\n        let _else = null;\n        if (this._match(TokenTypes.keywords.else))\n            _else = this._compound_statement();\n        return new If(condition, block, elseif, _else);\n    }\n    _elseif_statement() {\n        // else_if optional_paren_expression compound_statement elseif_statement?\n        const elseif = [];\n        const condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        elseif.push(new ElseIf(condition, block));\n        if (this._match(TokenTypes.keywords.elseif))\n            elseif.push(this._elseif_statement()[0]);\n        return elseif;\n    }\n    _return_statement() {\n        // return short_circuit_or_expression?\n        if (!this._match(TokenTypes.keywords.return))\n            return null;\n        const value = this._short_circuit_or_expression();\n        return new Return(value);\n    }\n    _short_circuit_or_expression() {\n        // short_circuit_and_expression\n        // short_circuit_or_expression or_or short_circuit_and_expression\n        let expr = this._short_circuit_and_expr();\n        while (this._match(TokenTypes.tokens.or_or)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._short_circuit_and_expr());\n        }\n        return expr;\n    }\n    _short_circuit_and_expr() {\n        // inclusive_or_expression\n        // short_circuit_and_expression and_and inclusive_or_expression\n        let expr = this._inclusive_or_expression();\n        while (this._match(TokenTypes.tokens.and_and)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._inclusive_or_expression());\n        }\n        return expr;\n    }\n    _inclusive_or_expression() {\n        // exclusive_or_expression\n        // inclusive_or_expression or exclusive_or_expression\n        let expr = this._exclusive_or_expression();\n        while (this._match(TokenTypes.tokens.or)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._exclusive_or_expression());\n        }\n        return expr;\n    }\n    _exclusive_or_expression() {\n        // and_expression\n        // exclusive_or_expression xor and_expression\n        let expr = this._and_expression();\n        while (this._match(TokenTypes.tokens.xor)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._and_expression());\n        }\n        return expr;\n    }\n    _and_expression() {\n        // equality_expression\n        // and_expression and equality_expression\n        let expr = this._equality_expression();\n        while (this._match(TokenTypes.tokens.and)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._equality_expression());\n        }\n        return expr;\n    }\n    _equality_expression() {\n        // relational_expression\n        // relational_expression equal_equal relational_expression\n        // relational_expression not_equal relational_expression\n        const expr = this._relational_expression();\n        if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {\n            return new BinaryOperator(this._previous().toString(), expr, this._relational_expression());\n        }\n        return expr;\n    }\n    _relational_expression() {\n        // shift_expression\n        // relational_expression less_than shift_expression\n        // relational_expression greater_than shift_expression\n        // relational_expression less_than_equal shift_expression\n        // relational_expression greater_than_equal shift_expression\n        let expr = this._shift_expression();\n        while (this._match([\n            TokenTypes.tokens.less_than,\n            TokenTypes.tokens.greater_than,\n            TokenTypes.tokens.less_than_equal,\n            TokenTypes.tokens.greater_than_equal,\n        ])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._shift_expression());\n        }\n        return expr;\n    }\n    _shift_expression() {\n        // additive_expression\n        // shift_expression shift_left additive_expression\n        // shift_expression shift_right additive_expression\n        let expr = this._additive_expression();\n        while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._additive_expression());\n        }\n        return expr;\n    }\n    _additive_expression() {\n        // multiplicative_expression\n        // additive_expression plus multiplicative_expression\n        // additive_expression minus multiplicative_expression\n        let expr = this._multiplicative_expression();\n        while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._multiplicative_expression());\n        }\n        return expr;\n    }\n    _multiplicative_expression() {\n        // unary_expression\n        // multiplicative_expression star unary_expression\n        // multiplicative_expression forward_slash unary_expression\n        // multiplicative_expression modulo unary_expression\n        let expr = this._unary_expression();\n        while (this._match([\n            TokenTypes.tokens.star,\n            TokenTypes.tokens.forward_slash,\n            TokenTypes.tokens.modulo,\n        ])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._unary_expression());\n        }\n        return expr;\n    }\n    _unary_expression() {\n        // singular_expression\n        // minus unary_expression\n        // bang unary_expression\n        // tilde unary_expression\n        // star unary_expression\n        // and unary_expression\n        if (this._match([\n            TokenTypes.tokens.minus,\n            TokenTypes.tokens.bang,\n            TokenTypes.tokens.tilde,\n            TokenTypes.tokens.star,\n            TokenTypes.tokens.and,\n        ])) {\n            return new UnaryOperator(this._previous().toString(), this._unary_expression());\n        }\n        return this._singular_expression();\n    }\n    _singular_expression() {\n        // primary_expression postfix_expression ?\n        const expr = this._primary_expression();\n        const p = this._postfix_expression();\n        if (p)\n            expr.postfix = p;\n        return expr;\n    }\n    _postfix_expression() {\n        // bracket_left short_circuit_or_expression bracket_right postfix_expression?\n        if (this._match(TokenTypes.tokens.bracket_left)) {\n            const expr = this._short_circuit_or_expression();\n            this._consume(TokenTypes.tokens.bracket_right, \"Expected ']'.\");\n            const p = this._postfix_expression();\n            if (p)\n                expr.postfix = p;\n            return expr;\n        }\n        // period ident postfix_expression?\n        if (this._match(TokenTypes.tokens.period)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected member name.\");\n            const p = this._postfix_expression();\n            const expr = new StringExpr(name.lexeme);\n            if (p)\n                expr.postfix = p;\n            return expr;\n        }\n        return null;\n    }\n    _getStruct(name) {\n        if (this._context.aliases.has(name)) {\n            const alias = this._context.aliases.get(name).type;\n            return alias;\n        }\n        if (this._context.structs.has(name)) {\n            const struct = this._context.structs.get(name);\n            return struct;\n        }\n        return null;\n    }\n    _primary_expression() {\n        // ident argument_expression_list?\n        if (this._match(TokenTypes.tokens.ident)) {\n            const name = this._previous().toString();\n            if (this._check(TokenTypes.tokens.paren_left)) {\n                const args = this._argument_expression_list();\n                const struct = this._getStruct(name);\n                if (struct != null) {\n                    return new CreateExpr(struct, args);\n                }\n                return new CallExpr(name, args);\n            }\n            if (this._context.constants.has(name)) {\n                const c = this._context.constants.get(name);\n                return new ConstExpr(name, c.value);\n            }\n            return new VariableExpr(name);\n        }\n        // const_literal\n        if (this._match(TokenTypes.const_literal)) {\n            return new LiteralExpr(parseFloat(this._previous().toString()));\n        }\n        // paren_expression\n        if (this._check(TokenTypes.tokens.paren_left)) {\n            return this._paren_expression();\n        }\n        // bitcast less_than type_decl greater_than paren_expression\n        if (this._match(TokenTypes.keywords.bitcast)) {\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<'.\");\n            const type = this._type_decl();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\n            const value = this._paren_expression();\n            return new BitcastExpr(type, value);\n        }\n        // type_decl argument_expression_list\n        const type = this._type_decl();\n        const args = this._argument_expression_list();\n        return new TypecastExpr(type, args);\n    }\n    _argument_expression_list() {\n        // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\n        if (!this._match(TokenTypes.tokens.paren_left))\n            return null;\n        const args = [];\n        do {\n            if (this._check(TokenTypes.tokens.paren_right))\n                break;\n            const arg = this._short_circuit_or_expression();\n            args.push(arg);\n        } while (this._match(TokenTypes.tokens.comma));\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' for agument list\");\n        return args;\n    }\n    _optional_paren_expression() {\n        // [paren_left] short_circuit_or_expression [paren_right]\n        this._match(TokenTypes.tokens.paren_left);\n        const expr = this._short_circuit_or_expression();\n        this._match(TokenTypes.tokens.paren_right);\n        return new GroupingExpr([expr]);\n    }\n    _paren_expression() {\n        // paren_left short_circuit_or_expression paren_right\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        const expr = this._short_circuit_or_expression();\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        return new GroupingExpr([expr]);\n    }\n    _struct_decl() {\n        // attribute* struct ident struct_body_decl\n        if (!this._match(TokenTypes.keywords.struct))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected name for struct.\").toString();\n        // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for struct body.\");\n        const members = [];\n        while (!this._check(TokenTypes.tokens.brace_right)) {\n            // struct_member: attribute* variable_ident_decl\n            const memberAttrs = this._attribute();\n            const memberName = this._consume(TokenTypes.tokens.ident, \"Expected variable name.\").toString();\n            this._consume(TokenTypes.tokens.colon, \"Expected ':' for struct member type.\");\n            const typeAttrs = this._attribute();\n            const memberType = this._type_decl();\n            if (memberType != null)\n                memberType.attributes = typeAttrs;\n            if (!this._check(TokenTypes.tokens.brace_right))\n                this._consume(TokenTypes.tokens.comma, \"Expected ',' for struct member.\");\n            else\n                this._match(TokenTypes.tokens.comma); // trailing comma optional.\n            members.push(new Member(memberName, memberType, memberAttrs));\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' after struct body.\");\n        const structNode = new Struct(name, members);\n        this._context.structs.set(name, structNode);\n        return structNode;\n    }\n    _global_variable_decl() {\n        // attribute* variable_decl (equal const_expression)?\n        const _var = this._variable_decl();\n        if (_var && this._match(TokenTypes.tokens.equal))\n            _var.value = this._const_expression();\n        return _var;\n    }\n    _global_const_decl() {\n        // attribute* const (ident variable_ident_decl) global_const_initializer?\n        if (!this._match(TokenTypes.keywords.const))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        let value = null;\n        if (this._match(TokenTypes.tokens.equal)) {\n            let valueExpr = this._short_circuit_or_expression();\n            if (valueExpr instanceof CreateExpr) {\n                value = valueExpr;\n            }\n            else if (valueExpr instanceof ConstExpr &&\n                valueExpr.initializer instanceof CreateExpr) {\n                value = valueExpr.initializer;\n            }\n            else {\n                let constValue = valueExpr.evaluate(this._context);\n                value = new LiteralExpr(constValue);\n            }\n        }\n        const c = new Const(name.toString(), type, \"\", \"\", value);\n        this._context.constants.set(c.name, c);\n        return c;\n    }\n    _global_let_decl() {\n        // attribute* let (ident variable_ident_decl) global_const_initializer?\n        if (!this._match(TokenTypes.keywords.let))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        let value = null;\n        if (this._match(TokenTypes.tokens.equal)) {\n            value = this._const_expression();\n        }\n        return new Let(name.toString(), type, \"\", \"\", value);\n    }\n    _const_expression() {\n        // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\n        // const_literal\n        if (this._match(TokenTypes.const_literal))\n            return new StringExpr(this._previous().toString());\n        const type = this._type_decl();\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        let args = [];\n        while (!this._check(TokenTypes.tokens.paren_right)) {\n            args.push(this._const_expression());\n            if (!this._check(TokenTypes.tokens.comma))\n                break;\n            this._advance();\n        }\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        return new CreateExpr(type, args);\n    }\n    _variable_decl() {\n        // var variable_qualifier? (ident variable_ident_decl)\n        if (!this._match(TokenTypes.keywords.var))\n            return null;\n        // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\n        let storage = \"\";\n        let access = \"\";\n        if (this._match(TokenTypes.tokens.less_than)) {\n            storage = this._consume(TokenTypes.storage_class, \"Expected storage_class.\").toString();\n            if (this._match(TokenTypes.tokens.comma))\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode.\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\n        }\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        return new Var(name.toString(), type, storage, access, null);\n    }\n    _enable_directive() {\n        // enable ident semicolon\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n        return new Enable(name.toString());\n    }\n    _type_alias() {\n        // type ident equal type_decl\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n        this._consume(TokenTypes.tokens.equal, \"Expected '=' for type alias.\");\n        let aliasType = this._type_decl();\n        if (aliasType === null) {\n            throw this._error(this._peek(), \"Expected Type for Alias.\");\n        }\n        if (this._context.aliases.has(aliasType.name)) {\n            aliasType = this._context.aliases.get(aliasType.name).type;\n        }\n        const aliasNode = new Alias(name.toString(), aliasType);\n        this._context.aliases.set(aliasNode.name, aliasNode);\n        return aliasNode;\n    }\n    _type_decl() {\n        // ident\n        // bool\n        // float32\n        // int32\n        // uint32\n        // vec2 less_than type_decl greater_than\n        // vec3 less_than type_decl greater_than\n        // vec4 less_than type_decl greater_than\n        // mat2x2 less_than type_decl greater_than\n        // mat2x3 less_than type_decl greater_than\n        // mat2x4 less_than type_decl greater_than\n        // mat3x2 less_than type_decl greater_than\n        // mat3x3 less_than type_decl greater_than\n        // mat3x4 less_than type_decl greater_than\n        // mat4x2 less_than type_decl greater_than\n        // mat4x3 less_than type_decl greater_than\n        // mat4x4 less_than type_decl greater_than\n        // atomic less_than type_decl greater_than\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\n        // array_type_decl\n        // texture_sampler_types\n        if (this._check([\n            TokenTypes.tokens.ident,\n            ...TokenTypes.texel_format,\n            TokenTypes.keywords.bool,\n            TokenTypes.keywords.f32,\n            TokenTypes.keywords.i32,\n            TokenTypes.keywords.u32,\n        ])) {\n            const type = this._advance();\n            return new Type(type.toString());\n        }\n        if (this._check(TokenTypes.template_types)) {\n            let type = this._advance().toString();\n            let format = null;\n            let access = null;\n            if (this._match(TokenTypes.tokens.less_than)) {\n                format = this._type_decl();\n                access = null;\n                if (this._match(TokenTypes.tokens.comma))\n                    access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for type.\");\n            }\n            return new TemplateType(type, format, access);\n        }\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\n        if (this._match(TokenTypes.keywords.ptr)) {\n            let pointer = this._previous().toString();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for pointer.\");\n            const storage = this._consume(TokenTypes.storage_class, \"Expected storage_class for pointer\");\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' for pointer.\");\n            const decl = this._type_decl();\n            let access = null;\n            if (this._match(TokenTypes.tokens.comma))\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for pointer.\");\n            return new PointerType(pointer, storage.toString(), decl, access);\n        }\n        // texture_sampler_types\n        let type = this._texture_sampler_types();\n        if (type)\n            return type;\n        // The following type_decl's have an optional attribyte_list*\n        const attrs = this._attribute();\n        // attribute* array\n        // attribute* array less_than type_decl (comma element_count_expression)? greater_than\n        if (this._match(TokenTypes.keywords.array)) {\n            let format = null;\n            let countInt = -1;\n            const array = this._previous();\n            if (this._match(TokenTypes.tokens.less_than)) {\n                format = this._type_decl();\n                if (this._context.aliases.has(format.name)) {\n                    format = this._context.aliases.get(format.name).type;\n                }\n                let count = \"\";\n                if (this._match(TokenTypes.tokens.comma)) {\n                    let c = this._shift_expression();\n                    count = c.evaluate(this._context).toString();\n                }\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for array.\");\n                countInt = count ? parseInt(count) : 0;\n            }\n            return new ArrayType(array.toString(), attrs, format, countInt);\n        }\n        return null;\n    }\n    _texture_sampler_types() {\n        // sampler_type\n        if (this._match(TokenTypes.sampler_type))\n            return new SamplerType(this._previous().toString(), null, null);\n        // depth_texture_type\n        if (this._match(TokenTypes.depth_texture_type))\n            return new SamplerType(this._previous().toString(), null, null);\n        // sampled_texture_type less_than type_decl greater_than\n        // multisampled_texture_type less_than type_decl greater_than\n        if (this._match(TokenTypes.sampled_texture_type) ||\n            this._match(TokenTypes.multisampled_texture_type)) {\n            const sampler = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\n            const format = this._type_decl();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\n            return new SamplerType(sampler.toString(), format, null);\n        }\n        // storage_texture_type less_than texel_format comma access_mode greater_than\n        if (this._match(TokenTypes.storage_texture_type)) {\n            const sampler = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\n            const format = this._consume(TokenTypes.texel_format, \"Invalid texel format.\").toString();\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' after texel format.\");\n            const access = this._consume(TokenTypes.access_mode, \"Expected access mode for storage texture type.\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\n            return new SamplerType(sampler.toString(), format, access);\n        }\n        return null;\n    }\n    _attribute() {\n        // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\n        // attr ident\n        let attributes = [];\n        while (this._match(TokenTypes.tokens.attr)) {\n            const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\n            const attr = new Attribute(name.toString(), null);\n            if (this._match(TokenTypes.tokens.paren_left)) {\n                // literal_or_ident\n                attr.value = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                if (this._check(TokenTypes.tokens.comma)) {\n                    this._advance();\n                    do {\n                        const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                        if (!(attr.value instanceof Array)) {\n                            attr.value = [attr.value];\n                        }\n                        attr.value.push(v);\n                    } while (this._match(TokenTypes.tokens.comma));\n                }\n                this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n            }\n            attributes.push(attr);\n        }\n        // Deprecated:\n        // attr_left (attribute comma)* attribute attr_right\n        while (this._match(TokenTypes.tokens.attr_left)) {\n            if (!this._check(TokenTypes.tokens.attr_right)) {\n                do {\n                    const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\n                    const attr = new Attribute(name.toString(), null);\n                    if (this._match(TokenTypes.tokens.paren_left)) {\n                        // literal_or_ident\n                        attr.value = [\n                            this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString(),\n                        ];\n                        if (this._check(TokenTypes.tokens.comma)) {\n                            this._advance();\n                            do {\n                                const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                                attr.value.push(v);\n                            } while (this._match(TokenTypes.tokens.comma));\n                        }\n                        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n                    }\n                    attributes.push(attr);\n                } while (this._match(TokenTypes.tokens.comma));\n            }\n            // Consume ]]\n            this._consume(TokenTypes.tokens.attr_right, \"Expected ']]' after attribute declarations\");\n        }\n        if (attributes.length == 0)\n            return null;\n        return attributes;\n    }\n}\n\n/**\n * @author Brendan Duncan / https://github.com/brendan-duncan\n */\nclass VariableInfo {\n    constructor(node, group, binding) {\n        this.group = group;\n        this.binding = binding;\n        this.node = node;\n    }\n    get name() {\n        return this.node.name;\n    }\n    get type() {\n        return this.node.type;\n    }\n    get attributes() {\n        return this.node.attributes;\n    }\n}\nclass FunctionInfo {\n    constructor(node) {\n        this.inputs = [];\n        this.node = node;\n    }\n    get name() {\n        return this.node.name;\n    }\n    get returnType() {\n        return this.node.returnType;\n    }\n    get args() {\n        return this.node.args;\n    }\n    get attributes() {\n        return this.node.attributes;\n    }\n}\nclass InputInfo {\n    constructor(name, type, input, locationType, location) {\n        this.name = name;\n        this.type = type;\n        this.input = input;\n        this.locationType = locationType;\n        this.location = location;\n        this.interpolation = this.interpolation;\n    }\n}\nclass MemberInfo {\n}\nclass StructInfo {\n}\nclass TypeInfo {\n    constructor(align, size) {\n        this.align = align;\n        this.size = size;\n    }\n}\nclass BufferInfo extends TypeInfo {\n    constructor(name, type) {\n        super(0, 0);\n        this.name = name;\n        this.type = type;\n    }\n}\nclass BindGropEntry {\n    constructor(type, resource) {\n        this.type = type;\n        this.resource = resource;\n    }\n}\nclass EntryFunctions {\n    constructor() {\n        this.vertex = [];\n        this.fragment = [];\n        this.compute = [];\n    }\n}\nclass WgslReflect {\n    constructor(code) {\n        /// All top-level structs in the shader.\n        this.structs = [];\n        /// All top-level uniform vars in the shader.\n        this.uniforms = [];\n        /// All top-level storage vars in the shader.\n        this.storage = [];\n        /// All top-level texture vars in the shader;\n        this.textures = [];\n        // All top-level sampler vars in the shader.\n        this.samplers = [];\n        /// All top-level functions in the shader.\n        this.functions = [];\n        /// All top-level type aliases in the shader.\n        this.aliases = [];\n        if (code)\n            this.initialize(code);\n    }\n    initialize(code) {\n        const parser = new WgslParser();\n        this.ast = parser.parse(code);\n        this.entry = new EntryFunctions();\n        for (const node of this.ast) {\n            if (node.astNodeType == \"struct\")\n                this.structs.push(node);\n            if (node.astNodeType == \"alias\")\n                this.aliases.push(node);\n            if (this.isUniformVar(node)) {\n                const v = node;\n                const g = this.getAttributeNum(node, \"group\", 0);\n                const b = this.getAttributeNum(node, \"binding\", 0);\n                this.uniforms.push(new VariableInfo(v, g, b));\n            }\n            if (this.isStorageVar(node)) {\n                const v = node;\n                const g = this.getAttributeNum(node, \"group\", 0);\n                const b = this.getAttributeNum(node, \"binding\", 0);\n                this.storage.push(new VariableInfo(v, g, b));\n            }\n            if (this.isTextureVar(node)) {\n                const v = node;\n                const g = this.getAttributeNum(node, \"group\", 0);\n                const b = this.getAttributeNum(node, \"binding\", 0);\n                this.textures.push(new VariableInfo(v, g, b));\n            }\n            if (this.isSamplerVar(node)) {\n                const v = node;\n                const g = this.getAttributeNum(node, \"group\", 0);\n                const b = this.getAttributeNum(node, \"binding\", 0);\n                this.samplers.push(new VariableInfo(v, g, b));\n            }\n            if (node instanceof Function) {\n                const fn = new FunctionInfo(node);\n                fn.inputs = this._getInputs(node.args);\n                this.functions.push(fn);\n                const vertexStage = this.getAttribute(node, \"vertex\");\n                const fragmentStage = this.getAttribute(node, \"fragment\");\n                const computeStage = this.getAttribute(node, \"compute\");\n                const stage = vertexStage || fragmentStage || computeStage;\n                if (stage) {\n                    this.entry[stage.name].push(fn);\n                }\n            }\n        }\n    }\n    isTextureVar(node) {\n        return (node instanceof Var &&\n            node.type !== null &&\n            WgslReflect.textureTypes.indexOf(node.type.name) != -1);\n    }\n    isSamplerVar(node) {\n        return (node instanceof Var &&\n            node.type !== null &&\n            WgslReflect.samplerTypes.indexOf(node.type.name) != -1);\n    }\n    isUniformVar(node) {\n        return node instanceof Var && node.storage == \"uniform\";\n    }\n    isStorageVar(node) {\n        return node instanceof Var && node.storage == \"storage\";\n    }\n    getAttributeNum(node, name, defaultValue) {\n        const a = this.getAttribute(node, name);\n        if (a == null) {\n            return defaultValue;\n        }\n        let v = a !== null && a.value !== null ? a.value : defaultValue;\n        if (v instanceof Array) {\n            v = v[0];\n        }\n        if (typeof v === \"number\") {\n            return v;\n        }\n        if (typeof v === \"string\") {\n            return parseInt(v);\n        }\n        return defaultValue;\n    }\n    getAttribute(node, name) {\n        const obj = node;\n        if (!obj || !obj[\"attributes\"])\n            return null;\n        const attrs = obj[\"attributes\"];\n        for (let a of attrs) {\n            if (a.name == name)\n                return a;\n        }\n        return null;\n    }\n    _getInputs(args, inputs = undefined) {\n        if (inputs === undefined)\n            inputs = [];\n        for (const arg of args) {\n            const input = this._getInputInfo(arg);\n            if (input !== null)\n                inputs.push(input);\n            const struct = this.getStruct(arg.type);\n            if (struct)\n                this._getInputs(struct.members, inputs);\n        }\n        return inputs;\n    }\n    _getInputInfo(node) {\n        const location = this.getAttribute(node, \"location\") || this.getAttribute(node, \"builtin\");\n        if (location !== null) {\n            const interpolation = this.getAttribute(node, \"interpolation\");\n            const info = new InputInfo(node.name, node.type, node, location.name, this._parseInt(location.value));\n            if (interpolation !== null) {\n                info.interpolation = this._parseString(interpolation.value);\n            }\n            return info;\n        }\n        return null;\n    }\n    _parseString(s) {\n        if (s instanceof Array) {\n            s = s[0];\n        }\n        return s;\n    }\n    _parseInt(s) {\n        if (s instanceof Array) {\n            s = s[0];\n        }\n        const n = parseInt(s);\n        return isNaN(n) ? s : n;\n    }\n    getStruct(name) {\n        if (name === null)\n            return null;\n        if (name instanceof Struct)\n            return name;\n        name = this.getAlias(name) || name;\n        if (name instanceof Type) {\n            name = name.name;\n        }\n        for (const u of this.structs) {\n            if (u.name == name)\n                return u;\n        }\n        return null;\n    }\n    getAlias(type) {\n        if (type === null)\n            return null;\n        if (type instanceof Node) {\n            if (!(type instanceof Type)) {\n                return null;\n            }\n            type = type.name;\n        }\n        for (const u of this.aliases) {\n            if (u.name == type)\n                return this.getAlias(u.type) || u.type;\n        }\n        return null;\n    }\n    getBindGroups() {\n        const groups = [];\n        function _makeRoom(group, binding) {\n            if (group >= groups.length)\n                groups.length = group + 1;\n            if (groups[group] === undefined)\n                groups[group] = [];\n            if (binding >= groups[group].length)\n                groups[group].length = binding + 1;\n        }\n        for (const u of this.uniforms) {\n            _makeRoom(u.group, u.binding);\n            const group = groups[u.group];\n            group[u.binding] = new BindGropEntry(\"buffer\", this.getUniformBufferInfo(u));\n        }\n        for (const u of this.storage) {\n            _makeRoom(u.group, u.binding);\n            const group = groups[u.group];\n            group[u.binding] = new BindGropEntry(\"storage\", this.getStorageBufferInfo(u));\n        }\n        for (const t of this.textures) {\n            _makeRoom(t.group, t.binding);\n            const group = groups[t.group];\n            group[t.binding] = new BindGropEntry(\"texture\", t);\n        }\n        for (const t of this.samplers) {\n            _makeRoom(t.group, t.binding);\n            const group = groups[t.group];\n            group[t.binding] = new BindGropEntry(\"sampler\", t);\n        }\n        return groups;\n    }\n    getStorageBufferInfo(node) {\n        if (node instanceof VariableInfo) {\n            node = node.node;\n        }\n        if (!this.isStorageVar(node))\n            return null;\n        const group = this.getAttributeNum(node, \"group\", 0);\n        const binding = this.getAttributeNum(node, \"binding\", 0);\n        const info = this._getUniformInfo(node);\n        info.group = group;\n        info.binding = binding;\n        return info;\n    }\n    /// Returns information about a struct type, null if the type is not a struct.\n    getStructInfo(node) {\n        var _a, _b, _c, _d, _e;\n        if (node === null)\n            return null;\n        const struct = node instanceof Struct ? node : this.getStruct(node.type);\n        if (!struct)\n            return null;\n        let offset = 0;\n        let lastSize = 0;\n        let lastOffset = 0;\n        let structAlign = 0;\n        let buffer = new BufferInfo(node.name, node instanceof Var ? node.type : null);\n        buffer.members = [];\n        for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\n            const member = struct.members[mi];\n            const name = member.name;\n            const info = this.getTypeInfo(member);\n            if (!info)\n                continue;\n            const type = this.getAlias(member.type) || member.type;\n            const align = info.align;\n            const size = info.size;\n            offset = this._roundUp(align, offset + lastSize);\n            lastSize = size;\n            lastOffset = offset;\n            structAlign = Math.max(structAlign, align);\n            const isArray = member.type.astNodeType === \"array\";\n            const s = this.getStruct(type) ||\n                (isArray ? this.getStruct((_a = type[\"format\"]) === null || _a === void 0 ? void 0 : _a.name) : null);\n            const isStruct = !!s;\n            const si = isStruct ? this.getStructInfo(s) : undefined;\n            const arrayStride = ((_b = si === null || si === void 0 ? void 0 : si.size) !== null && _b !== void 0 ? _b : isArray)\n                ? (_c = this.getTypeInfo(type[\"format\"])) === null || _c === void 0 ? void 0 : _c.size\n                : (_d = this.getTypeInfo(member.type)) === null || _d === void 0 ? void 0 : _d.size;\n            const arrayCount = (_e = member.type[\"count\"]) !== null && _e !== void 0 ? _e : 0;\n            const members = isStruct ? si === null || si === void 0 ? void 0 : si.members : undefined;\n            const u = new MemberInfo();\n            u.node = member;\n            u.name = name;\n            u.offset = offset;\n            u.size = size;\n            u.type = type;\n            u.isArray = isArray;\n            u.arrayCount = arrayCount;\n            u.arrayStride = arrayStride;\n            u.isStruct = isStruct;\n            u.members = members;\n            buffer.members.push(u);\n        }\n        buffer.size = this._roundUp(structAlign, lastOffset + lastSize);\n        buffer.align = structAlign;\n        buffer.isArray = false;\n        buffer.isStruct = true;\n        buffer.arrayCount = 0;\n        return buffer;\n    }\n    _getUniformInfo(node) {\n        var _a, _b, _c, _d, _e;\n        const structInfo = this.getStructInfo(node);\n        if (structInfo !== null)\n            return structInfo;\n        var n = node;\n        const typeInfo = this.getTypeInfo(n.type);\n        if (typeInfo === null)\n            return null;\n        const type = this.getAlias(n.type) || n.type;\n        const info = new BufferInfo(node.name, type);\n        info.align = typeInfo.align;\n        info.size = typeInfo.size;\n        let s = this.getStruct((_a = type[\"format\"]) === null || _a === void 0 ? void 0 : _a.name);\n        let si = s ? this.getStructInfo(s) : undefined;\n        info.isArray = type.astNodeType === \"array\";\n        info.isStruct = !!s;\n        info.members = info.isStruct ? si === null || si === void 0 ? void 0 : si.members : undefined;\n        info.name = n.name;\n        info.type = type;\n        info.arrayStride =\n            ((_b = si === null || si === void 0 ? void 0 : si.size) !== null && _b !== void 0 ? _b : info.isArray)\n                ? (_c = this.getTypeInfo(type[\"format\"])) === null || _c === void 0 ? void 0 : _c.size\n                : (_d = this.getTypeInfo(type)) === null || _d === void 0 ? void 0 : _d.size;\n        info.arrayCount = parseInt((_e = type[\"count\"]) !== null && _e !== void 0 ? _e : 0);\n        return info;\n    }\n    getUniformBufferInfo(uniform) {\n        if (!this.isUniformVar(uniform.node))\n            return null;\n        const info = this._getUniformInfo(uniform.node);\n        info.group = uniform.group;\n        info.binding = uniform.binding;\n        return info;\n    }\n    getTypeInfo(type) {\n        var _a;\n        if (type === null || type === undefined)\n            return null;\n        const explicitSize = this.getAttributeNum(type, \"size\", 0);\n        const explicitAlign = this.getAttributeNum(type, \"align\", 0);\n        if (type instanceof Member)\n            type = type.type;\n        if (type instanceof Type) {\n            const alias = this.getAlias(type.name);\n            if (alias !== null) {\n                type = alias;\n            }\n            const struct = this.getStruct(type.name);\n            if (struct !== null)\n                type = struct;\n        }\n        {\n            const info = WgslReflect.typeInfo[type.name];\n            if (info !== undefined) {\n                const divisor = type[\"format\"] === \"f16\" ? 2 : 1;\n                return new TypeInfo(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\n            }\n        }\n        {\n            const info = WgslReflect.typeInfo[type.name.substring(0, type.name.length - 1)];\n            if (info) {\n                const divisor = type.name[type.name.length - 1] === \"h\" ? 2 : 1;\n                return new TypeInfo(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\n            }\n        }\n        if (type.name == \"array\") {\n            let align = 8;\n            let size = 8;\n            // Type                 AlignOf(T)          Sizeof(T)\n            // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\n            // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\n            //\n            // @stride(Q)\n            // array<E, N>          AlignOf(E)          N * Q\n            //\n            // @stride(Q)\n            // array<E>             AlignOf(E)          Nruntime * Q\n            //const E = type.format.name;\n            const E = this.getTypeInfo(type[\"format\"]);\n            if (E !== null) {\n                size = E.size;\n                align = E.align;\n            }\n            const N = parseInt((_a = type[\"count\"]) !== null && _a !== void 0 ? _a : 1);\n            const stride = this.getAttributeNum(type, \"stride\", this._roundUp(align, size));\n            size = N * stride;\n            if (explicitSize)\n                size = explicitSize;\n            return new TypeInfo(Math.max(explicitAlign, align), Math.max(explicitSize, size));\n        }\n        if (type instanceof Struct) {\n            let align = 0;\n            let size = 0;\n            // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\n            //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\n            //                          Where L is the last member of the structure\n            let offset = 0;\n            let lastSize = 0;\n            let lastOffset = 0;\n            for (const m of type.members) {\n                const mi = this.getTypeInfo(m);\n                align = Math.max(mi.align, align);\n                offset = this._roundUp(mi.align, offset + lastSize);\n                lastSize = mi.size;\n                lastOffset = offset;\n            }\n            size = this._roundUp(align, lastOffset + lastSize);\n            return new TypeInfo(Math.max(explicitAlign, align), Math.max(explicitSize, size));\n        }\n        return null;\n    }\n    _roundUp(k, n) {\n        return Math.ceil(n / k) * k;\n    }\n}\n// Type                 AlignOf(T)          Sizeof(T)\n// i32, u32, or f32     4                   4\n// atomic<T>            4                   4\n// vec2<T>              8                   8\n// vec3<T>              16                  12\n// vec4<T>              16                  16\n// mat2x2<f32>          8                   16\n// mat3x2<f32>          8                   24\n// mat4x2<f32>          8                   32\n// mat2x3<f32>          16                  32\n// mat3x3<f32>          16                  48\n// mat4x3<f32>          16                  64\n// mat2x4<f32>          16                  32\n// mat3x4<f32>          16                  48\n// mat4x4<f32>          16                  64\nWgslReflect.typeInfo = {\n    f16: { align: 2, size: 2 },\n    i32: { align: 4, size: 4 },\n    u32: { align: 4, size: 4 },\n    f32: { align: 4, size: 4 },\n    atomic: { align: 4, size: 4 },\n    vec2: { align: 8, size: 8 },\n    vec3: { align: 16, size: 12 },\n    vec4: { align: 16, size: 16 },\n    mat2x2: { align: 8, size: 16 },\n    mat3x2: { align: 8, size: 24 },\n    mat4x2: { align: 8, size: 32 },\n    mat2x3: { align: 16, size: 32 },\n    mat3x3: { align: 16, size: 48 },\n    mat4x3: { align: 16, size: 64 },\n    mat2x4: { align: 16, size: 32 },\n    mat3x4: { align: 16, size: 48 },\n    mat4x4: { align: 16, size: 64 },\n};\nWgslReflect.textureTypes = TokenTypes.any_texture_type.map((t) => {\n    return t.name;\n});\nWgslReflect.samplerTypes = TokenTypes.sampler_type.map((t) => {\n    return t.name;\n});\n\nexport { Alias, Argument, ArrayType, Assign, AssignOperator, Attribute, BinaryOperator, BindGropEntry, BitcastExpr, Break, BufferInfo, Call, CallExpr, Case, Const, ConstExpr, Continue, CreateExpr, Default, Discard, ElseIf, Enable, EntryFunctions, Expression, For, Function, FunctionInfo, GroupingExpr, If, Increment, IncrementOperator, InputInfo, Let, LiteralExpr, Loop, Member, MemberInfo, Node, Operator, ParseContext, PointerType, Return, SamplerType, Statement, StaticAssert, StringExpr, Struct, StructInfo, Switch, SwitchCase, TemplateType, Token, TokenClass, TokenType, TokenTypes, Type, TypeInfo, TypecastExpr, UnaryOperator, Var, VariableExpr, VariableInfo, WgslParser, WgslReflect, WgslScanner, While };\n","import { WgslReflect, Member } from './3rdParty/wgsl_reflect/wgsl_reflect.module';\n\nexport interface StructDefinition {\n    fields: FieldDefinitions;\n    size: number;\n}\n\nexport interface StorageDefinition extends StructDefinition {\n    binding: number;\n    group: number;\n}\n\nexport type IntrinsicDefinition = {\n    offset: number;\n    size: number;\n    type: string;\n    numElements?: number;\n};\n\nexport type FieldDefinition = IntrinsicDefinition | StructDefinition | IntrinsicDefinition[] | StructDefinition[];\n\nexport type FieldDefinitions = {\n    [x: string]: FieldDefinition;\n};\n\nexport type StructDefinitions = {\n    [x: string]: StructDefinition;\n}\n\nexport type StorageDefinitions = {\n    [x: string]: StorageDefinition;\n}\n\ntype ShaderDataDefinitions = {\n    uniforms: StorageDefinitions,\n    storages: StorageDefinitions,\n    structs: StructDefinitions,\n};\n\n/**\n * Given a WGSL shader, returns data definitions for structures,\n * uniforms, and storage buffers\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct MyStruct {\n *    color: vec4f,\n *    brightness: f32,\n *    kernel: array<f32, 9>,\n * };\n * @group(0) @binding(0) var<uniform> myUniforms: MyUniforms;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const myUniformValues = makeStructuredView(defs.uniforms.myUniforms);\n *\n * myUniformValues.set({\n *   color: [1, 0, 1, 1],\n *   brightness: 0.8,\n *   kernel: [\n *      1, 0, -1,\n *      2, 0, -2,\n *      1, 0, -1,\n *   ],\n * });\n * device.queue.writeBuffer(uniformBuffer, 0, myUniformValues.arrayBuffer);\n * ```\n *\n * @param code WGSL shader. Note: it is not required for this to be a complete shader\n * @returns definitions of the structures by name. Useful for passing to {@link makeStructuredView}\n */\nexport function makeShaderDataDefinitions(code: string): ShaderDataDefinitions {\n    const reflect = new WgslReflect(code);\n\n    const structs = Object.fromEntries(reflect.structs.map(struct => {\n        const info = reflect.getStructInfo(struct);\n        return [struct.name, addMembers(reflect, info.members, info.size)];\n    }));\n\n    const uniforms = Object.fromEntries(reflect.uniforms.map(uniform => {\n        const info = reflect.getUniformBufferInfo(uniform);\n        const member = addMember(reflect, info, 0)[1] as StorageDefinition;\n        member.binding = info.binding;\n        member.group = info.group;\n        return [uniform.name, member];\n    }));\n\n    const storages = Object.fromEntries(reflect.storage.map(uniform => {\n        const info = reflect.getStorageBufferInfo(uniform);\n        const member = addMember(reflect, info, 0)[1] as StorageDefinition;\n        member.binding = info.binding;\n        member.group = info.group;\n        return [uniform.name, member];\n    }));\n\n    return {\n        structs,\n        storages,\n        uniforms,\n    };\n}\n\nfunction addMember(reflect: WgslReflect, m: Member, offset: number): [string, StructDefinition | IntrinsicDefinition | IntrinsicDefinition[] | StructDefinition[]] {\n    if (m.isArray) {\n        if (m.isStruct) {\n            return [\n                m.name,\n                new Array(m.arrayCount).fill(0).map((_, ndx) => {\n                    return addMembers(reflect, m.members!, m.size / m.arrayCount, offset + (m.offset || 0) + m.size / m.arrayCount * ndx);\n                }),\n            ];\n        } else {\n            return [\n                m.name,\n                {\n                    offset: offset + (m.offset || 0),\n                    size: m.size,\n                    type: m.type.format!.format\n                        ? `${m.type.format!.name!}<${m.type.format!.format!.name}>`\n                        : m.type.format!.name!,\n                    numElements: m.arrayCount,\n                },\n            ];\n        }\n    } else if (m.isStruct) {\n        return [\n            m.name,\n            addMembers(reflect, m.members!, m.size, offset + (m.offset || 0)),\n        ];\n    } else {\n        return [\n            m.name,\n            {\n                offset: offset + (m.offset || 0),\n                size: m.size,\n                type: m.type?.format\n                    ? `${m.type.name}<${m.type.format.name}>`\n                    : m.type?.name || m.name,\n            },\n        ];\n    }\n}\n\nfunction addMembers(reflect: WgslReflect, members: Member[], size: number, offset = 0): StructDefinition {\n    const fields: FieldDefinitions = Object.fromEntries(members.map(m => {\n        return addMember(reflect, m, offset);\n    }));\n\n    return {\n        fields,\n        size,\n    };\n}\n","import {\n  isTypedArray,\n} from './typed-arrays.js';\n\nfunction getViewDimensionForTexture(texture: GPUTexture): GPUTextureViewDimension {\n   switch (texture.dimension) {\n      case '1d':\n         return '1d';\n      case '3d':\n         return '3d';\n      default: // to shut up TS\n      case '2d':\n         return texture.depthOrArrayLayers > 1 ? '2d-array' : '2d';\n   }\n}\n\nfunction normalizeGPUExtent3Dict(size: GPUExtent3DDict) {\n  return [size.width, size.height || 1, size.depthOrArrayLayers || 1];\n}\n\n/**\n * Converts a `GPUExtent3D` into an array of numbers\n *\n * `GPUExtent3D` has two forms `[width, height?, depth?]` or\n * `{width: number, height?: number, depthOrArrayLayers?: number}`\n *\n * You pass one of those in here and it returns an array of 3 numbers\n * so that your code doesn't have to deal with multiple forms.\n *\n * @param size\n * @returns an array of 3 numbers, [width, height, depthOrArrayLayers]\n */\nexport function normalizeGPUExtent3D(size: GPUExtent3D): number[] {\n  return (Array.isArray(size) || isTypedArray(size))\n    ? [...(size as Iterable<number>), 1, 1].slice(0, 3)\n    : normalizeGPUExtent3Dict(size as GPUExtent3DDict);\n}\n\n/**\n * Given a GPUExtent3D returns the number of mip levels needed\n *\n * @param size\n * @returns number of mip levels needed for the given size\n */\nexport function numMipLevels(size: GPUExtent3D) {\n   const sizes = normalizeGPUExtent3D(size);\n   const maxSize = Math.max(...sizes);\n   return 1 + Math.log2(maxSize) | 0;\n}\n\n// Use a WeakMap so the device can be destroyed and/or lost\nconst byDevice = new WeakMap();\n\n/**\n * Generates mip levels from level 0 to the last mip for an existing texture\n *\n * The texture must have been created with TEXTURE_BINDING and\n * RENDER_ATTACHMENT and been created with mip levels\n *\n * @param device\n * @param texture\n */\nexport function generateMipmap(device: GPUDevice, texture: GPUTexture) {\n  let perDeviceInfo = byDevice.get(device);\n  if (!perDeviceInfo) {\n    perDeviceInfo = {\n      pipelineByFormatAndView: {},\n      moduleByView: {},\n    };\n    byDevice.set(device, perDeviceInfo);\n  }\n  let {\n    sampler,\n  } = perDeviceInfo;\n  const {\n    pipelineByFormatAndView,\n    moduleByView,\n  } = perDeviceInfo;\n  const view = getViewDimensionForTexture(texture);\n  let module = moduleByView[view];\n  if (!module) {\n    const type = view === '2d'\n      ? 'texture_2d<f32>'\n      : 'texture_2d_array<f32>';\n    const extraSampleParamsWGSL = view === '2d'\n      ? ''\n      : ', 0u';\n    module = device.createShaderModule({\n      label: `mip level generation for ${view}`,\n      code: `\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${type};\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          return textureSample(ourTexture, ourSampler, fsInput.texcoord${extraSampleParamsWGSL});\n        }\n      `,\n    });\n    moduleByView[view] = module;\n  }\n\n  if (!sampler) {\n    sampler = device.createSampler({\n      minFilter: 'linear',\n    });\n    perDeviceInfo.sampler = sampler;\n  }\n\n  const id = `${texture.format}.${view}`;\n\n  if (!pipelineByFormatAndView[id]) {\n    pipelineByFormatAndView[id] = device.createRenderPipeline({\n      label: `mip level generator pipeline for ${view}`,\n      layout: 'auto',\n      vertex: {\n        module,\n        entryPoint: 'vs',\n      },\n      fragment: {\n        module,\n        entryPoint: 'fs',\n        targets: [{ format: texture.format }],\n      },\n    });\n  }\n  const pipeline = pipelineByFormatAndView[id];\n\n  const encoder = device.createCommandEncoder({\n    label: 'mip gen encoder',\n  });\n\n  const dimension = getViewDimensionForTexture(texture);\n  for (let baseMipLevel = 1; baseMipLevel < texture.mipLevelCount; ++baseMipLevel) {\n    for (let baseArrayLayer = 0; baseArrayLayer < texture.depthOrArrayLayers; ++baseArrayLayer) {\n      const bindGroup = device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          { binding: 0, resource: sampler },\n          {\n            binding: 1,\n            resource: texture.createView({\n              dimension,\n              baseMipLevel: baseMipLevel - 1,\n              mipLevelCount: 1,\n              baseArrayLayer,\n              arrayLayerCount: 1,\n            }),\n          },\n        ],\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        label: 'mip gen renderPass',\n        colorAttachments: [\n          {\n            view: texture.createView({\n               dimension,\n               baseMipLevel,\n               mipLevelCount: 1,\n               baseArrayLayer,\n               arrayLayerCount: 1,\n            }),\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const pass = encoder.beginRenderPass(renderPassDescriptor);\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.draw(3);\n      pass.end();\n    }\n  }\n\n  const commandBuffer = encoder.finish();\n  device.queue.submit([commandBuffer]);\n}","import {\n  TypedArray,\n  TypedArrayConstructor,\n  isTypedArray,\n} from './typed-arrays.js';\n\nconst kTypedArrayToAttribFormat = new Map<TypedArrayConstructor, {formats: [string, string], defaultForType: number}>([\n  [ Int8Array,    { formats: ['sint8',   'snorm8' ], defaultForType: 1 } ],\n  [ Uint8Array,   { formats: ['uint8',   'unorm8' ], defaultForType: 1 } ],\n  [ Int16Array,   { formats: ['sint16',  'snorm16'], defaultForType: 1 } ],\n  [ Uint16Array,  { formats: ['uint16',  'unorm16'], defaultForType: 1 } ],\n  [ Int32Array,   { formats: ['sint32',  'snorm32'], defaultForType: 0 } ],\n  [ Uint32Array,  { formats: ['uint32',  'unorm32'], defaultForType: 0 } ],\n  [ Float32Array, { formats: ['float32', 'float32'], defaultForType: 0 } ],\n  // TODO: Add Float16Array\n]);\n\nconst kVertexFormatPrefixToType = new Map<string, TypedArrayConstructor>(\n  [...kTypedArrayToAttribFormat.entries()].map(([Type, {formats: [s1, s2]}]) => [[s1, Type], [s2, Type]] as [[string, TypedArrayConstructor], [string, TypedArrayConstructor]]).flat()\n);\n\n/**\n * See {@link Arrays} for details\n */\nexport type FullArraySpec = {\n  data: number | number[] | TypedArray,\n  type?: TypedArrayConstructor,\n  numComponents?: number,\n  shaderLocation?: number,\n  normalize?: boolean,\n};\n\nexport type ArrayUnion = number | number[] | TypedArray | FullArraySpec;\n\n/**\n * Named Arrays\n *\n * A set of named arrays are passed to various functions like\n * {@link createBufferLayoutsFromArrays} and {@link createBuffersAndAttributesFromArrays}\n *\n * Each array can be 1 of 4 things. A native JavaScript array, a TypedArray, a number, a {@link FullArraySpec}\n *\n * If it's a native array then, if the name of the array is `indices` the data will be converted\n * to a `Uint32Array`, otherwise a `Float32Array.  Use a TypedArray or a FullArraySpec to choose a different type.\n * The FullArraySpec type is only used if it's not already a TypedArray\n *\n * If it's a native array or a TypedArray or if `numComponents` in a {@link FullArraySpec} is not\n * specified it will be guess. If the name contains 'coord', 'texture' or 'uv' then numComponents will be 2.\n * If the name contains 'color' or 'colour' then numComponents will be 4. Otherwise it's 3.\n *\n * For attribute formats, guesses are made based on type at number of components. The guess is\n * based on this table where (d) is the default for that type if `normalize` is not specified\n *\n * | Type          |     ..      | normalize   |\n * | ------------  | ----------- | ----------- |\n * | Int8Array     | sint8       | snorm8 (d)  |\n * | Uint8Array    | uint8       | unorm8 (d)  |\n * | Int16Array    | sint16      | snorm16 (d) |\n * | Uint16Array   | uint16      | unorm16 (d) |\n * | Int32Array    | sint32 (d)  | snorm32     |\n * | Uint32Array   | uint32 (d)  | unorm32     |\n * | Float32Array  | float32 (d) | float32     |\n *\n */\nexport type Arrays = { [key: string]: ArrayUnion };\nexport type ArraysOptions = {\n  interleave?: boolean,\n  stepMode?: GPUVertexStepMode,\n  usage?: GPUBufferUsageFlags,\n  shaderLocation?: number,\n};\n\n/**\n * Returned by {@link createBuffersAndAttributesFromArrays}\n */\nexport type BuffersAndAttributes = {\n  numElements: number,\n  bufferLayouts: GPUVertexBufferLayout[],\n  buffers: GPUBuffer[],\n  indexBuffer?: GPUBuffer,\n  indexFormat?: GPUIndexFormat,\n};\n\nfunction isIndices(name: string) {\n  return name === \"indices\";\n}\n\nfunction makeTypedArrayFromArrayUnion(array: ArrayUnion, name: string): TypedArray {\n  if (isTypedArray(array)) {\n    return array as TypedArray;\n  }\n\n  let asFullSpec = array as FullArraySpec;\n  if (isTypedArray(asFullSpec.data)) {\n    return asFullSpec.data as TypedArray;\n  }\n\n  if (Array.isArray(array) || typeof array === 'number') {\n    asFullSpec = {\n      data: array,\n    };\n  }\n\n  let Type = asFullSpec.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint32Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(asFullSpec.data as any); // ugh!\n}\n\nfunction getArray(array: ArrayUnion): number[] | TypedArray {\n  const arr = (array as TypedArray).length ? array : (array as FullArraySpec).data;\n  return arr as TypedArray;\n}\n\nconst kNameToNumComponents = [\n  { re: /coord|texture|uv/i, numComponents: 2 },\n  { re: /color|colour/i, numComponents: 4 },\n];\n\nfunction guessNumComponentsFromNameImpl(name: string) {\n  for (const {re, numComponents} of kNameToNumComponents) {\n    if (re.test(name)) {\n      return numComponents;\n    }\n  }\n  return 3;\n}\n\nfunction guessNumComponentsFromName(name: string, length: number) {\n  const numComponents = guessNumComponentsFromNameImpl(name);\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n  return numComponents;\n}\n\nfunction getNumComponents(array: ArrayUnion , arrayName: string) {\n  return (array as FullArraySpec).numComponents || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nconst kVertexFormatRE = /(\\w+)(?:x(\\d))$/;\nfunction numComponentsAndTypeFromVertexFormat(format: GPUVertexFormat) {\n  const m = kVertexFormatRE.exec(format);\n  const [prefix, numComponents] = m ? [m[1], parseInt(m[2])] : [format, 1];\n  return {\n    Type: kVertexFormatPrefixToType.get(prefix),\n    numComponents,\n  };\n}\n\nfunction createTypedArrayOfSameType(typedArray: TypedArray, arrayBuffer: ArrayBuffer) {\n  const Ctor = Object.getPrototypeOf(typedArray).constructor;\n  return new Ctor(arrayBuffer);\n}\n\ntype TypedArrayWithOffsetAndStride = {\n  data: TypedArray,\n  offset: number, /** In elements not bytes */\n  stride: number, /** In elements not bytes */\n};\n\n/**\n * Given a set of named arrays, generates an array `GPUBufferLayout`s\n *\n * Examples:\n *\n * ```js\n *   const arrays = {\n *     position: [1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1],\n *     normal: [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1],\n *     texcoord: [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],\n *   };\n *\n *   const { bufferLayouts, typedArrays } = createBufferLayoutsFromArrays(arrays);\n * ```\n *\n * results in `bufferLayouts` being\n *\n * ```js\n * [\n *   {\n *     stepMode: 'vertex',\n *     arrayStride: 32,\n *     attributes: [\n *       { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *       { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *       { shaderLocation: 2, offset: 24, format: 'float32x2' },\n *     ],\n *   },\n * ]\n * ```\n *\n * and `typedArrays` being\n *\n * ```\n * [\n *   someFloat32Array0,\n *   someFloat32Array1,\n *   someFloat32Array2,\n * ]\n * ```\n *\n * See {@link Arrays} for details on the various types of arrays.\n *\n * Note: If typed arrays are passed in the same typed arrays will come out (copies will not be made)\n */\nexport function createBufferLayoutsFromArrays(arrays: Arrays, options: ArraysOptions = {}) {\n  const interleave = options.interleave === undefined ? true : options.interleave;\n  const stepMode = options.stepMode || 'vertex';\n  const shaderLocations: number[] = options.shaderLocation\n     ? (Array.isArray(options.shaderLocation) ? options.shaderLocation : [options.shaderLocation])\n     : [0];\n  let currentOffset = 0;\n  const bufferLayouts: GPUVertexBufferLayout[] = [];\n  const attributes: GPUVertexAttribute[] = [];\n  const typedArrays: TypedArrayWithOffsetAndStride[] = [];\n  Object.keys(arrays)\n    .filter(arrayName => !isIndices(arrayName))\n    .forEach(arrayName => {\n      const array = arrays[arrayName];\n      const data = makeTypedArrayFromArrayUnion(array, arrayName);\n      const totalNumComponents = getNumComponents(array, arrayName);\n      // if totalNumComponents > 4 then we clearly need to split this into multiple\n      // attributes\n      // (a) <= 4 doesn't mean don't split and\n      // (b) how to split? We could divide by 4 and if it's not even then divide by 3\n      //     as a guess?\n      //     5 is error? or 1x4 + 1x1?\n      //     6 is 2x3\n      //     7 is error? or 1x4 + 1x3?\n      //     8 is 2x4\n      //     9 is 3x3\n      //    10 is error? or 2x4 + 1x2?\n      //    11 is error? or 2x4 + 1x3?\n      //    12 is 3x4 or 4x3?\n      //    13 is error? or 3x4 + 1x1 or 4x3 + 1x1?\n      //    14 is error? or 3x4 + 1x2 or 4x3 + 1x2?\n      //    15 is error? or 3x4 + 1x3 or 4x3 + 1x3?\n      //    16 is 4x4\n      const by4 = totalNumComponents / 4;\n      const by3 = totalNumComponents / 3;\n      const step = by4 % 1 === 0 ? 4 : (by3 % 1 === 0 ? 3 : 4);\n      for (let component = 0; component < totalNumComponents; component += step) {\n        const numComponents = Math.min(step, totalNumComponents - component);\n        const offset = currentOffset;\n        currentOffset += numComponents * data.BYTES_PER_ELEMENT;\n        const { defaultForType, formats } = kTypedArrayToAttribFormat.get(Object.getPrototypeOf(data).constructor)!;\n        const normalize = (array as FullArraySpec).normalize;\n        const formatNdx = typeof normalize === 'undefined' ? defaultForType : (normalize ? 1 : 0);\n        const format = `${formats[formatNdx]}${numComponents > 1 ? `x${numComponents}` : ''}` as GPUVertexFormat;\n\n        // TODO: cleanup with generator?\n        const shaderLocation = shaderLocations.shift()!;\n        if (shaderLocations.length === 0) {\n          shaderLocations.push(shaderLocation + 1);\n        }\n        attributes.push({\n          offset,\n          format,\n          shaderLocation,\n        });\n        typedArrays.push({\n          data,\n          offset: component,\n          stride: totalNumComponents,\n        });\n      }\n      if (!interleave) {\n        bufferLayouts.push({\n          stepMode,\n          arrayStride: currentOffset,\n          attributes: attributes.slice(),\n        });\n        currentOffset = 0;\n        attributes.length = 0;\n      }\n    });\n  if (attributes.length) {\n    bufferLayouts.push({\n      stepMode,\n      arrayStride: currentOffset,\n      attributes: attributes,\n    });\n  }\n  return {\n    bufferLayouts,\n    typedArrays,\n  };\n}\n\nfunction getTypedArrayWithOffsetAndStride(ta: TypedArray | TypedArrayWithOffsetAndStride, numComponents: number) {\n  return (isTypedArray(ta)\n    ? { data: ta, offset: 0, stride: numComponents }\n    : ta) as TypedArrayWithOffsetAndStride;\n}\n\n/**\n * Given an array of `GPUVertexAttribute`s and a corresponding array\n * of TypedArrays, interleaves the contents of the typed arrays\n * into the given ArrayBuffer\n *\n * example:\n *\n * ```js\n * const attributes: GPUVertexAttribute[] = [\n *   { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *   { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *   { shaderLocation: 2, offset: 24, format: 'float32x2' },\n * ];\n * const typedArrays = [\n *   new Float32Array([1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1]),\n *   new Float32Array([1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1]),\n *   new Float32Array([1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1]),\n * ];\n * const arrayStride = (3 + 3 + 2) * 4;  // pos + nrm + uv\n * const arrayBuffer = new ArrayBuffer(arrayStride * 24)\n * interleaveVertexData(attributes, typedArrays, arrayStride, arrayBuffer)\n * ```\n *\n * results in the contents of `arrayBuffer` to be the 3 TypedArrays interleaved\n *\n * See {@link Arrays} for details on the various types of arrays.\n *\n * Note: You can generate `attributes` and `typedArrays` above by calling\n * {@link createBufferLayoutsFromArrays}\n */\nexport function interleaveVertexData(\n    attributes: GPUVertexAttribute[],\n    typedArrays: (TypedArray | TypedArrayWithOffsetAndStride)[],\n    arrayStride: number,\n    arrayBuffer: ArrayBuffer,\n) {\n  const views = new Map<TypedArrayConstructor, TypedArray>();\n  const getView = (typedArray: TypedArray) => {\n    const Ctor = Object.getPrototypeOf(typedArray).constructor;\n    const view = views.get(Ctor);\n    if (view) {\n      return view;\n    }\n    const newView = new Ctor(arrayBuffer);\n    views.set(Ctor, newView);\n    return newView;\n  };\n\n  attributes.forEach((attribute, ndx) => {\n    const { offset, format } = attribute;\n    const { numComponents } = numComponentsAndTypeFromVertexFormat(format);\n    const {\n      data,\n      offset: srcOffset,\n      stride,\n    } = getTypedArrayWithOffsetAndStride(typedArrays[ndx], numComponents);\n\n    const view = getView(data);\n    for (let i = 0; i < data.length; i += stride) {\n      const ndx = i / stride;\n      const dstOffset = (offset + ndx * arrayStride) / view.BYTES_PER_ELEMENT;\n      const srcOff = i + srcOffset;\n      const s = data.subarray(srcOff, srcOff + numComponents);\n      view.set(s, dstOffset);\n    }\n  });\n}\n\n/**\n * Given arrays, create buffers, fills the buffers with data if provided, optionally\n * interleaves the data (the default).\n *\n * Example:\n *\n * ```js\n *  const {\n *    buffers,\n *    bufferLayouts,\n *    indexBuffer,\n *    indexFormat,\n *    numElements,\n *  } = createBuffersAndAttributesFromArrays(device, {\n *    position: [1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1],\n *    normal: [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1],\n *    texcoord: [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],\n *    indices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23],\n *  });\n * ```\n *\n * Where `bufferLayouts` will be\n *\n * ```js\n * [\n *   {\n *     stepMode: 'vertex',\n *     arrayStride: 32,\n *     attributes: [\n *       { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *       { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *       { shaderLocation: 2, offset: 24, format: 'float32x2' },\n *     ],\n *   },\n * ]\n * ```\n *\n * * `buffers` will have one `GPUBuffer` of usage `GPUBufferUsage.VERTEX`\n * * `indexBuffer` will be `GPUBuffer` of usage `GPUBufferUsage.INDEX`\n * * `indexFormat` will be `uint32` (use a full spec or a typedarray of `Uint16Array` if you want 16bit indices)\n * * `numElements` will be 36 (this is either the number entries in the array named `indices` or if no\n *    indices are provided then it's the length of the first array divided by numComponents. See {@link Arrays})\n *\n * See {@link Arrays} for details on the various types of arrays.\n * Also see the cube and instancing examples.\n */\nexport function createBuffersAndAttributesFromArrays(device: GPUDevice, arrays: Arrays, options: ArraysOptions = {}) {\n  const usage = (options.usage || 0);\n\n  const {\n    bufferLayouts,\n    typedArrays,\n  } = createBufferLayoutsFromArrays(arrays, options);\n\n  const buffers = [];\n  let numElements = -1;\n  let bufferNdx = 0;\n  for (const {attributes, arrayStride} of bufferLayouts) {\n    const attribs = attributes as GPUVertexAttribute[];\n    const attrib0 = attribs[0];\n    const {numComponents} = numComponentsAndTypeFromVertexFormat(attrib0.format);\n\n    const {\n      data: data0,\n      stride,\n     } = getTypedArrayWithOffsetAndStride(typedArrays[bufferNdx], numComponents);\n\n    if (numElements < 0) {\n      numElements = data0.length / stride;\n    }\n\n    const size = arrayStride * numElements;\n    const buffer = device.createBuffer({\n      usage: usage | GPUBufferUsage.VERTEX,\n      size,\n      mappedAtCreation: true,\n    });\n\n    const arrayBuffer = buffer.getMappedRange();\n    if (attribs.length === 1 && arrayStride === data0.BYTES_PER_ELEMENT * numComponents) {\n      const view = createTypedArrayOfSameType(data0, arrayBuffer);\n      view.set(data0);\n    } else {\n      interleaveVertexData(attribs, typedArrays.slice(bufferNdx), arrayStride, arrayBuffer);\n    }\n    buffer.unmap();\n    buffers.push(buffer);\n    bufferNdx += attribs.length;\n  }\n\n  const buffersAndAttributes: BuffersAndAttributes = {\n    numElements,\n    bufferLayouts,\n    buffers,\n  };\n\n  const indicesEntry = Object.entries(arrays).find(([arrayName]) => isIndices(arrayName));\n  if (indicesEntry) {\n    const indices = makeTypedArrayFromArrayUnion(indicesEntry[1], 'indices');\n    const indexBuffer = device.createBuffer({\n      size: indices.byteLength,\n      usage: GPUBufferUsage.INDEX | usage,\n      mappedAtCreation: true,\n    });\n    const dst = createTypedArrayOfSameType(indices, indexBuffer.getMappedRange());\n    dst.set(indices);\n    indexBuffer.unmap();\n\n    buffersAndAttributes.indexBuffer = indexBuffer;\n    buffersAndAttributes.indexFormat = indices instanceof Uint16Array ? 'uint16' : 'uint32';\n    buffersAndAttributes.numElements = indices.length;\n  }\n\n  return buffersAndAttributes;\n}\n","import {\n  TypedArray,\n  TypedArrayConstructor,\n  isTypedArray,\n} from './typed-arrays.js';\nimport {\n  generateMipmap,\n  numMipLevels,\n} from './generate-mipmap.js';\n\nexport type CopyTextureOptions = {\n  flipY?: boolean,\n  premultipliedAlpha?: boolean,\n  colorSpace?: PredefinedColorSpace;\n  dimension?: GPUTextureViewDimension;\n  baseArrayLayer?: number;\n};\n\nexport type TextureData = {\n  data: TypedArray | number[],\n};\nexport type TextureCreationData = TextureData & {\n  width?: number,\n  height?: number,\n};\n\nexport type TextureRawDataSource = TextureCreationData | TypedArray | number[];\nexport type TextureSource = GPUImageCopyExternalImage['source'] | TextureRawDataSource;\n\nfunction isTextureData(source: TextureSource) {\n  const src = source as TextureData;\n  return isTypedArray(src.data) || Array.isArray(src.data);\n}\n\nfunction isTextureRawDataSource(source: TextureSource) {\n  return isTypedArray(source) || Array.isArray(source) || isTextureData(source);\n}\n\nfunction toTypedArray(v: TypedArray | number[], format: GPUTextureFormat): TypedArray {\n  if (isTypedArray(v)) {\n    return v as TypedArray;\n  }\n  const { Type } = getTextureFormatInfo(format);\n  return new Type(v);\n}\n\nfunction guessDimensions(width: number | undefined, height: number | undefined, numElements: number, dimension: GPUTextureViewDimension = '2d'): number[] {\n  if (numElements % 1 !== 0) {\n    throw new Error(\"can't guess dimensions\");\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (dimension === 'cube' ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width!;\n    if (height % 1) {\n      throw new Error(\"can't guess dimensions\");\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw new Error(\"can't guess dimensions\");\n    }\n  }\n  const depth = numElements / width! / height;\n  if (depth % 1) {\n    throw new Error(\"can't guess dimensions\");\n  }\n  return [width!, height, depth];\n}\n\nfunction textureViewDimensionToDimension(viewDimension: GPUTextureViewDimension | undefined) {\n  switch (viewDimension) {\n    case '1d': return '1d';\n    case '3d': return '3d';\n    default: return '2d';\n  }\n}\n\nconst kFormatToTypedArray: {[key: string]: TypedArrayConstructor} = {\n  '8snorm': Int8Array,\n  '8unorm': Uint8Array,\n  '8sint': Int8Array,\n  '8uint': Uint8Array,\n  '16snorm': Int16Array,\n  '16unorm': Uint16Array,\n  '16sint': Int16Array,\n  '16uint': Uint16Array,\n  '32snorm': Int32Array,\n  '32unorm': Uint32Array,\n  '32sint': Int32Array,\n  '32uint': Uint32Array,\n  '16float': Uint16Array,  // TODO: change to Float16Array\n  '32float': Float32Array,\n};\n\nconst kTextureFormatRE = /([a-z]+)(\\d+)([a-z]+)/;\n\nfunction getTextureFormatInfo(format: GPUTextureFormat) {\n  // this is a hack! It will only work for common formats\n  const [, channels, bits, typeName] = kTextureFormatRE.exec(format)!;\n  // TODO: if the regex fails, use table for other formats?\n  const numChannels = channels.length;\n  const bytesPerChannel = parseInt(bits) / 8;\n  const bytesPerElement = numChannels * bytesPerChannel;\n  const Type = kFormatToTypedArray[`${bits}${typeName}`];\n\n  return {\n    channels,\n    numChannels,\n    bytesPerChannel,\n    bytesPerElement,\n    Type,\n  };\n}\n\n\n/**\n * Gets the size of a mipLevel. Returns an array of 3 numbers [width, height, depthOrArrayLayers]\n */\nexport function getSizeForMipFromTexture(texture: GPUTexture, mipLevel: number) {\n  return [\n    texture.width,\n    texture.height,\n    texture.depthOrArrayLayers,\n  ].map(v => Math.max(1, Math.floor(v / 2 ** mipLevel)));\n}\n\n/**\n * Uploads Data to a texture\n */\nfunction uploadDataToTexture(\n  device: GPUDevice,\n  texture: GPUTexture,\n  source: TextureRawDataSource,\n  options: { origin?: GPUOrigin3D },\n) {\n  const data = toTypedArray((source as TextureData).data || source, texture.format);\n  const mipLevel = 0;\n  const size = getSizeForMipFromTexture(texture, mipLevel);\n  const { bytesPerElement } = getTextureFormatInfo(texture.format);\n  const origin = options.origin || [0, 0, 0];\n  device.queue.writeTexture(\n    { texture, origin },\n    data,\n    { bytesPerRow: bytesPerElement * size[0], rowsPerImage: size[1] },\n    size,\n  );\n}\n/**\n * Copies a an array of \"sources\" (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * to a texture and then optionally generates mip levels\n */\nexport function copySourcesToTexture(\n    device: GPUDevice,\n    texture: GPUTexture,\n    sources: TextureSource[],\n    options: CopyTextureOptions = {},\n) {\n  sources.forEach((source, layer) => {\n    const origin = [0, 0, layer + (options.baseArrayLayer || 0)];\n    if (isTextureRawDataSource(source)) {\n      uploadDataToTexture(device, texture, source as TextureRawDataSource, { origin });\n    } else {\n      const s = source as GPUImageCopyExternalImage['source'];\n      const {flipY, premultipliedAlpha, colorSpace} = options;\n      device.queue.copyExternalImageToTexture(\n        { source: s, flipY, },\n        { texture, premultipliedAlpha, colorSpace, origin },\n        getSizeFromSource(s, options),\n      );\n    }\n  });\n\n  if (texture.mipLevelCount > 1) {\n    generateMipmap(device, texture);\n  }\n}\n\n\n/**\n * Copies a \"source\" (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * to a texture and then optionally generates mip levels\n */\nexport function copySourceToTexture(\n    device: GPUDevice,\n    texture: GPUTexture,\n    source: TextureSource,\n    options: CopyTextureOptions = {}) {\n  copySourcesToTexture(device, texture, [source], options);\n}\n\n/**\n * @property mips if true and mipLevelCount is not set then wll automatically generate\n *    the correct number of mip levels.\n * @property format Defaults to \"rgba8unorm\"\n * @property mipLeveLCount Defaults to 1 or the number of mips needed for a full mipmap if `mips` is true\n */\nexport type CreateTextureOptions = CopyTextureOptions & {\n  mips?: boolean,\n  usage?: GPUTextureUsageFlags,\n  format?: GPUTextureFormat,\n  mipLevelCount?: number,\n};\n\n/**\n * Gets the size from a source. This is to smooth out the fact that different\n * sources have a different way to get their size.\n */\nexport function getSizeFromSource(source: TextureSource, options: CreateTextureOptions) {\n  if (source instanceof HTMLVideoElement) {\n    return [source.videoWidth, source.videoHeight, 1];\n  } else {\n    const maybeHasWidthAndHeight = source as { width: number, height: number };\n    const { width, height } = maybeHasWidthAndHeight;\n    if (width > 0 && height > 0 && !isTextureRawDataSource(source)) {\n      // this should cover Canvas, Image, ImageData, ImageBitmap, TextureCreationData\n      return [width, height, 1];\n    }\n    const format = options.format || 'rgba8unorm';\n    const { bytesPerElement, bytesPerChannel } = getTextureFormatInfo(format);\n    const data = isTypedArray(source) || Array.isArray(source)\n       ? source\n       : (source as TextureData).data;\n    const numBytes = isTypedArray(data)\n        ? (data as TypedArray).byteLength\n        : ((data as number[]).length * bytesPerChannel);\n    const numElements = numBytes / bytesPerElement;\n    return guessDimensions(width, height, numElements);\n  }\n}\n\n/**\n * Create a texture from an array of sources (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * and optionally create mip levels. If you set `mips: true` and don't set a mipLevelCount\n * then it will automatically make the correct number of mip levels.\n *\n * Example:\n *\n * ```js\n * const texture = createTextureFromSource(\n *     device,\n *     [\n *        someCanvasOrVideoOrImageImageBitmap0,\n *        someCanvasOrVideoOrImageImageBitmap1,\n *     ],\n *     {\n *       usage: GPUTextureUsage.TEXTURE_BINDING |\n *              GPUTextureUsage.RENDER_ATTACHMENT |\n *              GPUTextureUsage.COPY_DST,\n *       mips: true,\n *     }\n * );\n * ```\n */\nexport function createTextureFromSources(\n    device: GPUDevice,\n    sources: TextureSource[],\n    options: CreateTextureOptions = {}) {\n  // NOTE: We assume all the sizes are the same. If they are not you'll get\n  // an error.\n  const size = getSizeFromSource(sources[0], options);\n  size[2] = size[2] > 1 ? size[2] : sources.length;\n\n  const texture = device.createTexture({\n    dimension: textureViewDimensionToDimension(options.dimension),\n    format: options.format || 'rgba8unorm',\n    mipLevelCount: options.mipLevelCount\n        ? options.mipLevelCount\n        : options.mips ? numMipLevels(size) : 1,\n    size,\n    usage: (options.usage ?? 0) |\n           GPUTextureUsage.TEXTURE_BINDING |\n           GPUTextureUsage.COPY_DST |\n           GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  copySourcesToTexture(device, texture, sources, options);\n\n  return texture;\n}\n\n/**\n * Create a texture from a source (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * and optionally create mip levels. If you set `mips: true` and don't set a mipLevelCount\n * then it will automatically make the correct number of mip levels.\n *\n * Example:\n *\n * ```js\n * const texture = createTextureFromSource(\n *     device,\n *     someCanvasOrVideoOrImageImageBitmap,\n *     {\n *       usage: GPUTextureUsage.TEXTURE_BINDING |\n *              GPUTextureUsage.RENDER_ATTACHMENT |\n *              GPUTextureUsage.COPY_DST,\n *       mips: true,\n *     }\n * );\n * ```\n */\nexport function createTextureFromSource(\n    device: GPUDevice,\n    source: TextureSource,\n    options: CreateTextureOptions = {}) {\n  return createTextureFromSources(device, [source], options);\n}\n\nexport type CreateTextureFromBitmapOptions = CreateTextureOptions & ImageBitmapOptions;\n\n/**\n * Load an ImageBitmap\n * @param url\n * @param options\n * @returns the loaded ImageBitmap\n */\nexport async function loadImageBitmap(url: string, options: ImageBitmapOptions = {}) {\n  const res = await fetch(url);\n  const blob = await res.blob();\n  const opt: ImageBitmapOptions = {\n    ...options,\n    ...(options.colorSpaceConversion !== undefined && {colorSpaceConversion: 'none'}),\n  };\n  return await createImageBitmap(blob, opt);\n}\n\n/**\n * Load images and create a texture from them, optionally generating mip levels\n *\n * Assumes all the urls reference images of the same size.\n *\n * Example:\n *\n * ```js\n * const texture = await createTextureFromImage(\n *   device,\n *   [\n *     'https://someimage1.url',\n *     'https://someimage2.url',\n *   ],\n *   {\n *     mips: true,\n *     flipY: true,\n *   },\n * );\n * ```\n */\nexport async function createTextureFromImages(device: GPUDevice, urls: string[], options: CreateTextureFromBitmapOptions = {}) {\n  // TODO: start once we've loaded one?\n  // We need at least 1 to know the size of the texture to create\n  const imgBitmaps = await Promise.all(urls.map(url => loadImageBitmap(url)));\n  return createTextureFromSources(device, imgBitmaps, options);\n}\n\n/**\n * Load an image and create a texture from it, optionally generating mip levels\n *\n * Example:\n *\n * ```js\n * const texture = await createTextureFromImage(device, 'https://someimage.url', {\n *   mips: true,\n *   flipY: true,\n * });\n * ```\n */\nexport async function createTextureFromImage(device: GPUDevice, url: string, options: CreateTextureFromBitmapOptions = {}) {\n  return createTextureFromImages(device, [url], options);\n}\n","/*\n * Copyright 2023 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport { isTypedArray, TypedArray, TypedArrayConstructor } from './typed-arrays.js';\nimport { Arrays } from './attribute-utils.js';\n\n/**\n * A class to provide `push` on a typed array.\n *\n * example:\n *\n * ```js\n * const positions = new TypedArrayWrapper(new Float32Array(300), 3);\n * positions.push(1, 2, 3); // add a position\n * positions.push([4, 5, 6]);  // add a position\n * positions.push(new Float32Array(6)); // add 2 positions\n * const data = positions.typedArray;\n * ```\n */\nexport class TypedArrayWrapper<T extends TypedArray> {\n  typedArray: T;\n  cursor = 0;\n  numComponents: number;\n\n  constructor(arr: T, numComponents: number) {\n    this.typedArray = arr;\n    this.numComponents = numComponents;\n  }\n  get numElements() {\n    return this.typedArray.length / this.numComponents;\n  }\n  push(...data: (number | Iterable<number>)[]) {\n    for (const value of data) {\n      if (Array.isArray(value) || isTypedArray(value)) {\n        const asArray = data as number[];\n        this.typedArray.set(asArray, this.cursor);\n        this.cursor += asArray.length;\n      } else {\n        this.typedArray[this.cursor++] = value as number;\n      }\n    }\n  }\n  reset(index = 0) {\n    this.cursor = index;\n  }\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2, Float32Array);\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param numComponents number of components\n * @param numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param Type A constructor for the type. Default = `Float32Array`.\n */\nfunction createAugmentedTypedArray<T extends TypedArrayConstructor>(numComponents: number, numElements: number, Type: T) {\n  return new TypedArrayWrapper(new Type(numComponents * numElements) as InstanceType<T>, numComponents);\n}\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param size the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param xOffset the amount to offset the quad in X\n * @param yOffset the amount to offset the quad in Y\n * @return the created XY Quad vertices\n */\nexport function createXYQuadVertices(size: number = 2, xOffset: number = 0, yOffset: number = 0) {\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  } as Arrays;\n}\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param width Width of the plane. Default = 1\n * @param depth Depth of the plane. Default = 1\n * @param subdivisionsWidth Number of steps across the plane. Default = 1\n * @param subdivisionsDepth Number of steps down the plane. Default = 1\n * @return The created plane vertices.\n */\nexport function createPlaneVertices(\n    width = 1,\n    depth = 1,\n    subdivisionsWidth = 1,\n    subdivisionsDepth = 1) {\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param radius radius of the sphere.\n * @param subdivisionsAxis number of steps around the sphere.\n * @param subdivisionsHeight number of vertically on the sphere.\n * @param startLatitudeInRadians where to start the\n *     top of the sphere.\n * @param endLatitudeInRadians Where to end the\n *     bottom of the sphere.\n * @param startLongitudeInRadians where to start\n *     wrapping the sphere.\n * @param endLongitudeInRadians where to end\n *     wrapping the sphere.\n * @return The created sphere vertices.\n */\nexport function createSphereVertices(\n    radius = 1,\n    subdivisionsAxis = 24,\n    subdivisionsHeight = 12,\n    startLatitudeInRadians = 0,\n    endLatitudeInRadians = Math.PI,\n    startLongitudeInRadians = 0,\n    endLongitudeInRadians = Math.PI * 2) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  const latRange = endLatitudeInRadians - startLatitudeInRadians;\n  const longRange = endLongitudeInRadians - startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + startLongitudeInRadians;\n      const phi = latRange * v + startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param size width, height and depth of the cube.\n * @return The created vertices.\n */\nexport function createCubeVertices(size = 1) {\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2 , numVertices, Float32Array);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param bottomRadius Bottom radius of truncated cone.\n * @param topRadius Top radius of truncated cone.\n * @param height Height of truncated cone.\n * @param radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param topCap Create top cap. Default = true.\n * @param bottomCap Create bottom cap. Default = true.\n * @return The created cone vertices.\n */\nexport function createTruncatedConeVertices(\n    bottomRadius = 1,\n    topRadius = 0,\n    height = 1,\n    radialSubdivisions = 24,\n    verticalSubdivisions = 1,\n    topCap = true,\n    bottomCap = true) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Expands RLE data\n * @param rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param padding value to add each entry with.\n * @return the expanded rleData\n */\nfunction expandRLEData(rleData: number[], padding: number[] = []) {\n  padding = padding || [];\n  const data: number[] = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push(...padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push(...element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return The created vertices.\n */\nexport function create3DFVertices() {\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts, Float32Array),\n    texcoord: createAugmentedTypedArray(2,  numVerts, Float32Array),\n    normal: createAugmentedTypedArray(3, numVerts, Float32Array),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return Object.fromEntries(Object.entries(arrays).map(([k, v]) => [k, v.typedArray]));\n}\n\n/**\n * Creates crescent vertices.\n *\n * @param verticalRadius The vertical radius of the crescent.\n * @param outerRadius The outer radius of the crescent.\n * @param innerRadius The inner radius of the crescent.\n * @param thickness The thickness of the crescent.\n * @param subdivisionsDown number of steps around the crescent.\n * @param startOffset Where to start arc. Default 0.\n * @param endOffset Where to end arg. Default 1.\n * @return The created vertices.\n */\nexport function createCrescentVertices(\n    verticalRadius: 2,\n    outerRadius: 1,\n    innerRadius: 0,\n    thickness: 1,\n    subdivisionsDown: 12,\n    startOffset: 0,\n    endOffset: 1) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals     = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords   = createAugmentedTypedArray(2, numVertices, Float32Array);\n\n  function lerp(a: number, b: number, s: number) {\n    return a + (b - a) * s;\n  }\n\n  function vAdd(a: number[], b: number[]) {\n    return a.map((v, i) => v + b[i]);\n  }\n\n  function vMultiply(a: number[], b: number[]) {\n    return a.map((v, i) => v * b[i]);\n  }\n\n  function createArc(arcRadius: number, x: number, normalMult: number[], normalAdd: number[], uMult: number, uAdd: number) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = vAdd(vMultiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset: number, rightArcOffset: number) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions.typedArray,\n    normal:   normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices:  indices.typedArray,\n  };\n}\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param radius Radius of cylinder.\n  * @param height Height of cylinder.\n  * @param radialSubdivisions The number of subdivisions around the cylinder.\n  * @param verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param topCap Create top cap. Default = true.\n  * @param bottomCap Create bottom cap. Default = true.\n  * @return The created vertices.\n  */\nexport function createCylinderVertices(\n    radius = 1,\n    height = 1,\n    radialSubdivisions = 24,\n    verticalSubdivisions = 1,\n    topCap = true,\n    bottomCap = true) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates vertices for a torus\n *\n * @param radius radius of center of torus circle.\n * @param thickness radius of torus ring.\n * @param radialSubdivisions The number of subdivisions around the torus.\n * @param bodySubdivisions The number of subdivisions around the body torus.\n * @param startAngle start angle in radians. Default = 0.\n * @param endAngle end angle in radians. Default = Math.PI * 2.\n * @return The created vertices.\n */\nexport function createTorusVertices(\n    radius = 1,\n    thickness = 0.24,\n    radialSubdivisions = 24,\n    bodySubdivisions = 12,\n    startAngle = 0,\n    endAngle = Math.PI * 2) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals     = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords   = createAugmentedTypedArray(2, numVertices, Float32Array);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal:   normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices:  indices.typedArray,\n  };\n}\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param radius Radius of the ground plane.\n * @param divisions Number of triangles in the ground plane (at least 3).\n * @param stacks Number of radial divisions (default=1).\n * @param innerRadius Default 0.\n * @param stackPower Power to raise stack size to for decreasing width.\n * @return The created vertices.\n */\nexport function createDiscVertices(\n    radius = 1,\n    divisions = 24,\n    stacks = 1,\n    innerRadius = 0,\n    stackPower = 1) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n","export const roundUpToMultipleOf = (v: number, multiple: number) => (((v + multiple - 1) / multiple) | 0) * multiple;\n"],"names":["isTypedArray","arr","length","buffer","ArrayBuffer","byteLength","b","i32","numElements","align","size","type","View","Int32Array","u32","Uint32Array","f32","Float32Array","f16","Uint16Array","vec2f","vec2i","vec2u","vec2h","vec3i","vec3u","vec3f","vec3h","vec4i","vec4u","vec4f","vec4h","mat2x2f","mat2x2h","mat3x2f","mat3x2h","mat4x2f","mat4x2h","mat2x3f","pad","mat2x3h","mat3x3f","mat3x3h","mat4x3f","mat4x3h","mat2x4f","mat2x4h","mat3x4f","mat3x4h","mat4x4f","mat4x4h","typeInfo","getSizeOfStructDef","fieldDef","Array","isArray","makeTypedArrayViews","structDef","arrayBuffer","offset","baseOffset","makeViews","map","elemDef","Error","fields","views","name","def","Object","entries","BYTES_PER_ELEMENT","setStructuredView","data","undefined","view","dataLen","stride","i","set","asArray","forEach","newValue","ndx","asViews","key","s_views","WeakMap","getView","Ctor","viewsByCtor","get","Map","getViewsByCtor","ParseContext","constructor","this","constants","aliases","structs","Node","isAstNode","astNodeType","evaluate","context","evaluateString","toString","Statement","super","Function","args","returnType","body","StaticAssert","expression","While","condition","For","init","increment","Var","storage","access","value","Let","Const","IncrementOperator","AssignOperator","_a","TokenClass","parse","val","Increment","operator","variable","Assign","Call","Loop","continuing","Switch","If","elseif","_else","else","Return","Struct","members","getMemberIndex","Enable","Alias","Discard","Break","Continue","Type","TemplateType","format","PointerType","ArrayType","attributes","count","SamplerType","Expression","StringExpr","CreateExpr","CallExpr","Math","abs","acos","acosh","asin","asinh","atan","atan2","atanh","ceil","min","max","cos","PI","sqrt","pow","exp","floor","log","log2","round","sign","sin","sinh","tan","tanh","trunc","VariableExpr","ConstExpr","initializer","_b","property","postfix","struct","memberIndex","console","LiteralExpr","BitcastExpr","TypecastExpr","GroupingExpr","contents","Operator","UnaryOperator","right","BinaryOperator","left","SwitchCase","Case","selector","Default","Argument","ElseIf","Member","Attribute","TokenType","rule","TokenTypes","none","reserved","eof","token","asm","bf16","do","enum","f64","handle","i8","i16","i64","mat","premerge","regardless","typedef","u8","u16","u64","unless","using","vec","void","keywords","array","keyword","atomic","bool","mat2x2","mat2x3","mat2x4","mat3x2","mat3x3","mat3x4","mat4x2","mat4x3","mat4x4","ptr","sampler","sampler_comparison","texture_1d","texture_2d","texture_2d_array","texture_3d","texture_cube","texture_cube_array","texture_multisampled_2d","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","texture_depth_multisampled_2d","vec2","vec3","vec4","bitcast","block","break","case","continue","default","discard","enable","fallthrough","false","fn","for","function","if","let","const","loop","while","private","read","read_write","return","switch","true","alias","uniform","var","workgroup","write","r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8unorm_srgb","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","bgra8unorm_srgb","rgb10a2unorm","rg11b10float","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","static_assert","tokens","decimal_float_literal","hex_float_literal","int_literal","uint_literal","ident","and","and_and","arrow","attr","attr_left","attr_right","forward_slash","bang","bracket_left","bracket_right","brace_left","brace_right","colon","comma","equal","equal_equal","not_equal","greater_than","greater_than_equal","shift_right","less_than","less_than_equal","shift_left","modulo","minus","minus_minus","period","plus","plus_plus","or","or_or","paren_left","paren_right","semicolon","star","tilde","underscore","xor","plus_equal","minus_equal","times_equal","division_equal","modulo_equal","and_equal","or_equal","xor_equal","shift_right_equal","shift_left_equal","storage_class","access_mode","sampler_type","sampled_texture_type","multisampled_texture_type","storage_texture_type","depth_texture_type","any_texture_type","texel_format","const_literal","literal_or_ident","element_count_expression","template_types","attribute_name","assignment_operators","increment_operators","Token","lexeme","line","WgslScanner","source","_tokens","_start","_current","_line","_source","scanTokens","_isAtEnd","scanToken","push","_advance","_isWhitespace","_peekAhead","commentLevel","matchType","matchedType","_findType","foundLessThan","ti","indexOf","_addToken","lookAheadLexeme","lookAhead","maxLookAhead","li","_match","match","exec","index","c","amount","text","substring","WgslParser","_context","tokensOrCode","_initialize","statements","statement","_global_decl_or_directive","scanner","_error","message","error","_peek","types","_check","l","_consume","tk","t","_previous","_type_alias","_enable_directive","attrs","_attribute","_var","_global_variable_decl","_let","_global_let_decl","_const","_global_const_decl","_struct","_struct_decl","_fn","_function_decl","argAttrs","typeAttrs","_type_decl","_return","_compound_statement","_statement","_if_statement","_switch_statement","_loop_statement","_for_statement","_while_statement","_static_assert_statement","result","_return_statement","_variable_statement","_increment_decrement_statement","_func_call_statement","_assignment_statement","_optional_paren_expression","_for_init","_short_circuit_or_expression","_for_increment","_variable_decl","savedPos","_unary_expression","decrement","isUnderscore","_argument_expression_list","s","_switch_body","cases","_case_selectors","_case_body","_cases","selectors","nextStatement","_elseif_statement","expr","_short_circuit_and_expr","_inclusive_or_expression","_exclusive_or_expression","_and_expression","_equality_expression","_relational_expression","_shift_expression","_additive_expression","_multiplicative_expression","_singular_expression","_primary_expression","p","_postfix_expression","_getStruct","has","parseFloat","_paren_expression","arg","memberAttrs","memberName","memberType","structNode","_const_expression","valueExpr","constValue","aliasType","aliasNode","pointer","decl","_texture_sampler_types","countInt","parseInt","v","VariableInfo","node","group","binding","FunctionInfo","inputs","InputInfo","input","locationType","location","interpolation","MemberInfo","TypeInfo","BufferInfo","BindGropEntry","resource","EntryFunctions","vertex","fragment","compute","WgslReflect","code","uniforms","textures","samplers","functions","initialize","parser","ast","entry","isUniformVar","g","getAttributeNum","isStorageVar","isTextureVar","isSamplerVar","_getInputs","vertexStage","getAttribute","fragmentStage","computeStage","stage","textureTypes","samplerTypes","defaultValue","a","obj","_getInputInfo","getStruct","info","_parseInt","_parseString","n","isNaN","getAlias","u","getBindGroups","groups","_makeRoom","getUniformBufferInfo","getStorageBufferInfo","_getUniformInfo","getStructInfo","_c","_d","_e","lastSize","lastOffset","structAlign","mi","ml","member","getTypeInfo","_roundUp","isStruct","si","arrayStride","arrayCount","structInfo","explicitSize","explicitAlign","divisor","E","m","k","addMember","reflect","fill","_","addMembers","fromEntries","getViewDimensionForTexture","texture","dimension","depthOrArrayLayers","normalizeGPUExtent3D","slice","width","height","normalizeGPUExtent3Dict","numMipLevels","sizes","maxSize","byDevice","generateMipmap","device","perDeviceInfo","pipelineByFormatAndView","moduleByView","module","extraSampleParamsWGSL","createShaderModule","label","createSampler","minFilter","id","createRenderPipeline","layout","entryPoint","targets","pipeline","encoder","createCommandEncoder","baseMipLevel","mipLevelCount","baseArrayLayer","bindGroup","createBindGroup","getBindGroupLayout","createView","arrayLayerCount","renderPassDescriptor","colorAttachments","loadOp","storeOp","pass","beginRenderPass","setPipeline","setBindGroup","draw","end","commandBuffer","finish","queue","submit","kTypedArrayToAttribFormat","Int8Array","formats","defaultForType","Uint8Array","Int16Array","kVertexFormatPrefixToType","s1","s2","flat","isIndices","makeTypedArrayFromArrayUnion","asFullSpec","kNameToNumComponents","re","numComponents","guessNumComponentsFromName","test","guessNumComponentsFromNameImpl","kVertexFormatRE","numComponentsAndTypeFromVertexFormat","prefix","createTypedArrayOfSameType","typedArray","getPrototypeOf","createBufferLayoutsFromArrays","arrays","options","interleave","stepMode","shaderLocations","shaderLocation","currentOffset","bufferLayouts","typedArrays","keys","filter","arrayName","totalNumComponents","getArray","getNumComponents","step","component","normalize","shift","getTypedArrayWithOffsetAndStride","ta","interleaveVertexData","attribute","srcOffset","newView","dstOffset","srcOff","subarray","isTextureRawDataSource","src","isTextureData","textureViewDimensionToDimension","viewDimension","kFormatToTypedArray","kTextureFormatRE","getTextureFormatInfo","channels","bits","typeName","numChannels","bytesPerChannel","bytesPerElement","getSizeForMipFromTexture","mipLevel","uploadDataToTexture","toTypedArray","origin","writeTexture","bytesPerRow","rowsPerImage","copySourcesToTexture","sources","layer","flipY","premultipliedAlpha","colorSpace","copyExternalImageToTexture","getSizeFromSource","HTMLVideoElement","videoWidth","videoHeight","maybeHasWidthAndHeight","depth","guessDimensions","createTextureFromSources","createTexture","mips","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","RENDER_ATTACHMENT","async","loadImageBitmap","url","res","fetch","blob","opt","colorSpaceConversion","createImageBitmap","createTextureFromImages","urls","Promise","all","TypedArrayWrapper","cursor","reset","createAugmentedTypedArray","CUBE_FACE_INDICES","createTruncatedConeVertices","bottomRadius","topRadius","radialSubdivisions","verticalSubdivisions","topCap","bottomCap","extra","numVertices","positions","normals","texcoords","indices","vertsAroundEdge","slant","cosSlant","sinSlant","yy","ringRadius","y","ii","position","normal","texcoord","expandRLEData","rleData","padding","runLength","element","jj","colors","numVerts","color","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","offsetRange","lerp","vAdd","vMultiply","createArc","arcRadius","x","normalMult","normalAdd","uMult","uAdd","z","uBack","xBack","angle","radius","px","py","pz","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","cornerVertices","faceNormals","uvCoords","f","faceIndices","uv","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","theta","d","subdivisionsWidth","subdivisionsDepth","numVertsAcross","subdivisionsAxis","subdivisionsHeight","startLatitudeInRadians","endLatitudeInRadians","startLongitudeInRadians","endLongitudeInRadians","latRange","longRange","phi","sinTheta","cosTheta","sinPhi","ux","uy","uz","numVertsAround","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ny","ring","ringAngle","xSin","zCos","nx","nz","nextRingIndex","nextSliceIndex","xOffset","yOffset","byteOffset","sizeInBytes","alignment","multiple","numBytes","buffers","bufferNdx","attribs","attrib0","data0","createBuffer","GPUBufferUsage","VERTEX","mappedAtCreation","getMappedRange","unmap","buffersAndAttributes","indicesEntry","find","indexBuffer","INDEX","indexFormat","storages","setStructuredValues","asIntrinsicDefinition","asStructDefinition"],"mappings":"mPAkDa,MAAAA,EAAgBC,GAC3BA,GAA6B,iBAAfA,EAAIC,QAAuBD,EAAIE,kBAAkBC,aAAyC,iBAAnBH,EAAII,WC/BrFC,EAA6B,CACjCC,IAAK,CAAEC,YAAa,EAAGC,MAAO,EAAGC,KAAM,EAAGC,KAAM,MAAOC,KAAMC,YAC7DC,IAAK,CAAEN,YAAa,EAAGC,MAAO,EAAGC,KAAM,EAAGC,KAAM,MAAOC,KAAMG,aAC7DC,IAAK,CAAER,YAAa,EAAGC,MAAO,EAAGC,KAAM,EAAGC,KAAM,MAAOC,KAAMK,cAC7DC,IAAK,CAAEV,YAAa,EAAGC,MAAO,EAAGC,KAAM,EAAGC,KAAM,MAAOC,KAAMO,aAE7DC,MAAO,CAAEZ,YAAa,EAAGC,MAAQ,EAAGC,KAAO,EAAGC,KAAM,MAAOC,KAAMK,cACjEI,MAAO,CAAEb,YAAa,EAAGC,MAAQ,EAAGC,KAAO,EAAGC,KAAM,MAAOC,KAAMC,YACjES,MAAO,CAAEd,YAAa,EAAGC,MAAQ,EAAGC,KAAO,EAAGC,KAAM,MAAOC,KAAMG,aACjEQ,MAAO,CAAEf,YAAa,EAAGC,MAAQ,EAAGC,KAAO,EAAGC,KAAM,MAAOC,KAAMO,aACjEK,MAAO,CAAEhB,YAAa,EAAGC,MAAO,GAAIC,KAAM,GAAIC,KAAM,MAAOC,KAAMC,YACjEY,MAAO,CAAEjB,YAAa,EAAGC,MAAO,GAAIC,KAAM,GAAIC,KAAM,MAAOC,KAAMG,aACjEW,MAAO,CAAElB,YAAa,EAAGC,MAAO,GAAIC,KAAM,GAAIC,KAAM,MAAOC,KAAMK,cACjEU,MAAO,CAAEnB,YAAa,EAAGC,MAAQ,EAAGC,KAAO,EAAGC,KAAM,MAAOC,KAAMO,aACjES,MAAO,CAAEpB,YAAa,EAAGC,MAAO,GAAIC,KAAM,GAAIC,KAAM,MAAOC,KAAMC,YACjEgB,MAAO,CAAErB,YAAa,EAAGC,MAAO,GAAIC,KAAM,GAAIC,KAAM,MAAOC,KAAMG,aACjEe,MAAO,CAAEtB,YAAa,EAAGC,MAAO,GAAIC,KAAM,GAAIC,KAAM,MAAOC,KAAMK,cACjEc,MAAO,CAAEvB,YAAa,EAAGC,MAAQ,EAAGC,KAAO,EAAGC,KAAM,MAAOC,KAAMO,aAGjEa,QAAS,CAAExB,YAAc,EAAGC,MAAQ,EAAGC,KAAM,GAAiBC,KAAM,MAAOC,KAAMK,cACjFgB,QAAS,CAAEzB,YAAc,EAAGC,MAAQ,EAAGC,KAAO,EAAgBC,KAAM,MAAOC,KAAMO,aACjFe,QAAS,CAAE1B,YAAc,EAAGC,MAAQ,EAAGC,KAAM,GAAiBC,KAAM,MAAOC,KAAMK,cACjFkB,QAAS,CAAE3B,YAAc,EAAGC,MAAQ,EAAGC,KAAM,GAAiBC,KAAM,MAAOC,KAAMO,aACjFiB,QAAS,CAAE5B,YAAc,EAAGC,MAAQ,EAAGC,KAAM,GAAiBC,KAAM,MAAOC,KAAMK,cACjFoB,QAAS,CAAE7B,YAAc,EAAGC,MAAQ,EAAGC,KAAM,GAAiBC,KAAM,MAAOC,KAAMO,aACjFmB,QAAS,CAAE9B,YAAc,EAAGC,MAAO,GAAIC,KAAM,GAAI6B,IAAK,CAAC,EAAG,GAAI5B,KAAM,MAAOC,KAAMK,cACjFuB,QAAS,CAAEhC,YAAc,EAAGC,MAAQ,EAAGC,KAAM,GAAI6B,IAAK,CAAC,EAAG,GAAI5B,KAAM,MAAOC,KAAMO,aACjFsB,QAAS,CAAEjC,YAAa,GAAIC,MAAO,GAAIC,KAAM,GAAI6B,IAAK,CAAC,EAAG,GAAI5B,KAAM,MAAOC,KAAMK,cACjFyB,QAAS,CAAElC,YAAa,GAAIC,MAAQ,EAAGC,KAAM,GAAI6B,IAAK,CAAC,EAAG,GAAI5B,KAAM,MAAOC,KAAMO,aACjFwB,QAAS,CAAEnC,YAAa,GAAIC,MAAO,GAAIC,KAAM,GAAI6B,IAAK,CAAC,EAAG,GAAI5B,KAAM,MAAOC,KAAMK,cACjF2B,QAAS,CAAEpC,YAAa,GAAIC,MAAQ,EAAGC,KAAM,GAAI6B,IAAK,CAAC,EAAG,GAAI5B,KAAM,MAAOC,KAAMO,aACjF0B,QAAS,CAAErC,YAAc,EAAGC,MAAO,GAAIC,KAAM,GAAiBC,KAAM,MAAOC,KAAMK,cACjF6B,QAAS,CAAEtC,YAAc,EAAGC,MAAQ,EAAGC,KAAM,GAAiBC,KAAM,MAAOC,KAAMO,aACjF4B,QAAS,CAAEvC,YAAa,GAAIC,MAAO,GAAIC,KAAM,GAAI6B,IAAK,CAAC,EAAG,GAAI5B,KAAM,MAAOC,KAAMK,cACjF+B,QAAS,CAAExC,YAAa,GAAIC,MAAQ,EAAGC,KAAM,GAAI6B,IAAK,CAAC,EAAG,GAAI5B,KAAM,MAAOC,KAAMO,aACjF8B,QAAS,CAAEzC,YAAa,GAAIC,MAAO,GAAIC,KAAM,GAAiBC,KAAM,MAAOC,KAAMK,cACjFiC,QAAS,CAAE1C,YAAa,GAAIC,MAAQ,EAAGC,KAAM,GAAiBC,KAAM,MAAOC,KAAMO,cAG7EgC,EAAoC,IACrC7C,EAEH,YAAaA,EAAEc,MACf,YAAad,EAAEe,MACf,YAAaf,EAAEgB,MACf,YAAahB,EAAEiB,MACf,YAAajB,EAAEkB,MACf,YAAalB,EAAEmB,MACf,YAAanB,EAAEoB,MACf,YAAapB,EAAEqB,MACf,YAAarB,EAAEsB,MACf,YAAatB,EAAEuB,MACf,YAAavB,EAAEwB,MACf,YAAaxB,EAAEyB,MAEf,cAAezB,EAAE0B,QACjB,cAAe1B,EAAE2B,QACjB,cAAe3B,EAAE4B,QACjB,cAAe5B,EAAE6B,QACjB,cAAe7B,EAAE8B,QACjB,cAAe9B,EAAE+B,QACjB,cAAe/B,EAAEgC,QACjB,cAAehC,EAAEkC,QACjB,cAAelC,EAAEmC,QACjB,cAAenC,EAAEoC,QACjB,cAAepC,EAAEqC,QACjB,cAAerC,EAAEsC,QACjB,cAAetC,EAAEuC,QACjB,cAAevC,EAAEwC,QACjB,cAAexC,EAAEyC,QACjB,cAAezC,EAAE0C,QACjB,cAAe1C,EAAE2C,QACjB,cAAe3C,EAAE4C,SAanB,SAASE,EAAmBC,GAC1B,OAAIC,MAAMC,QAAQF,GACTA,EAASnD,OAASkD,EAAmBC,EAAS,IAE9CA,EAAS3C,IAEpB,UASgB8C,EAAoBC,EAA6BC,EAA2BC,GACxF,MAAMC,EAAaD,GAAU,EACvBxD,EAASuD,GAAe,IAAItD,YAAYgD,EAAmBK,IAE3DI,EAAaJ,IACf,GAAIH,MAAMC,QAAQE,GACd,OAAQA,EAAiCK,KAAIC,GAAWF,EAAUE,KAC/D,GAAyB,iBAAdN,EACd,MAAMO,MAAM,eACT,CACH,MAAMC,EAAUR,EAA+BQ,OAC/C,GAAIA,EAAQ,CACR,MAAMC,EAAe,CAAA,EACrB,IAAK,MAAOC,EAAMC,KAAQC,OAAOC,QAAQL,GACrCC,EAAMC,GAAQN,EAAUO,GAE5B,OAAOF,CACV,CAAM,CACH,MAAMxD,KAAEA,EAAIiD,OAAEA,EAAMhD,KAAEA,GAAS8C,EACjC,IACE,MAAM7C,KAAEA,GAASuC,EAASxC,GACpBH,EAAcE,EAAOE,EAAK2D,kBAChC,OAAO,IAAI3D,EAAKT,EAAQyD,EAAaD,EAAQnD,EAC9C,CAAC,MACA,MAAM,IAAIwD,MAAM,iBAAiBrD,IAClC,CACF,CACJ,GAEL,MAAO,CAAEuD,MAAOL,EAAUJ,GAAYC,YAAavD,EACvD,CAQgB,SAAAqE,EAAkBC,EAAWP,GACzC,QAAaQ,IAATD,EAEG,GAAIzE,EAAakE,GAAQ,CAC5B,MAAMS,EAAOT,EACb,GAAoB,IAAhBS,EAAKzE,QAAgC,iBAATuE,EAC5BE,EAAK,GAAKF,OAEV,GAAInB,MAAMC,QAAQkB,EAAK,KAAOzE,EAAayE,EAAK,IAAK,CAGjD,MAAMG,EAAUH,EAAK,GAAGvE,OAClB2E,EAAqB,IAAZD,EAAgB,EAAIA,EACnC,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAKvE,SAAU4E,EAAG,CAClC,MAAMnB,EAASmB,EAAID,EACnBF,EAAKI,IAAIN,EAAKK,GAAInB,EACrB,CACJ,MACGgB,EAAKI,IAAIN,EAGpB,MAAM,GAAInB,MAAMC,QAAQW,GAAQ,CAC7B,MAAMc,EAAUd,EACfO,EAAeQ,SAAQ,CAACC,EAAUC,KAC/BX,EAAkBU,EAAUF,EAAQG,GAAK,GAEhD,KAAM,CACH,MAAMC,EAAUlB,EAChB,IAAK,MAAOmB,EAAKH,KAAab,OAAOC,QAAQG,GAAO,CAChD,MAAME,EAAOS,EAAQC,GACjBV,GACAH,EAAkBU,EAAUP,EAEnC,CACJ,CACL,CAiEA,MAAMW,EAAU,IAAIC,QAWpB,SAASC,EAA8B9B,EAA0B+B,GAC7D,MAAMC,EAVV,SAAwBhC,GACpB,IAAIgC,EAAcJ,EAAQK,IAAIjC,GAK9B,OAJKgC,IACDA,EAAc,IAAIE,IAClBN,EAAQP,IAAIrB,EAAagC,IAEtBA,CACX,CAGwBG,CAAenC,GACnC,IAAIiB,EAAOe,EAAYC,IAAIF,GAK3B,OAJKd,IACDA,EAAO,IAAIc,EAAK/B,GAChBgC,EAAYX,IAAIU,EAAMd,IAEnBA,CACX,CCtRA,MAAMmB,EACF,WAAAC,GACIC,KAAKC,UAAY,IAAIL,IACrBI,KAAKE,QAAU,IAAIN,IACnBI,KAAKG,QAAU,IAAIP,GACtB,EAOL,MAAMQ,EACF,WAAAL,GAAiB,CACjB,aAAIM,GACA,OAAO,CACV,CACD,eAAIC,GACA,MAAO,EACV,CACD,QAAAC,CAASC,GACL,MAAM,IAAIxC,MAAM,uBACnB,CACD,cAAAyC,CAAeD,GACX,OAAOR,KAAKO,SAASC,GAASE,UACjC,EAOL,MAAMC,UAAkBP,EACpB,WAAAL,GACIa,OACH,EAOL,MAAMC,UAAiBF,EACnB,WAAAZ,CAAY5B,EAAM2C,EAAMC,EAAYC,GAChCJ,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKc,KAAOA,EACZd,KAAKe,WAAaA,EAClBf,KAAKgB,KAAOA,CACf,CACD,eAAIV,GACA,MAAO,UACV,EAOL,MAAMW,UAAqBN,EACvB,WAAAZ,CAAYmB,GACRN,QACAZ,KAAKkB,WAAaA,CACrB,CACD,eAAIZ,GACA,MAAO,cACV,EAOL,MAAMa,UAAcR,EAChB,WAAAZ,CAAYqB,EAAWJ,GACnBJ,QACAZ,KAAKoB,UAAYA,EACjBpB,KAAKgB,KAAOA,CACf,CACD,eAAIV,GACA,MAAO,OACV,EAOL,MAAMe,UAAYV,EACd,WAAAZ,CAAYuB,EAAMF,EAAWG,EAAWP,GACpCJ,QACAZ,KAAKsB,KAAOA,EACZtB,KAAKoB,UAAYA,EACjBpB,KAAKuB,UAAYA,EACjBvB,KAAKgB,KAAOA,CACf,CACD,eAAIV,GACA,MAAO,KACV,EAOL,MAAMkB,UAAYb,EACd,WAAAZ,CAAY5B,EAAMxD,EAAM8G,EAASC,EAAQC,GACrCf,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKrF,KAAOA,EACZqF,KAAKyB,QAAUA,EACfzB,KAAK0B,OAASA,EACd1B,KAAK2B,MAAQA,CAChB,CACD,eAAIrB,GACA,MAAO,KACV,EAOL,MAAMsB,UAAYjB,EACd,WAAAZ,CAAY5B,EAAMxD,EAAM8G,EAASC,EAAQC,GACrCf,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKrF,KAAOA,EACZqF,KAAKyB,QAAUA,EACfzB,KAAK0B,OAASA,EACd1B,KAAK2B,MAAQA,CAChB,CACD,eAAIrB,GACA,MAAO,KACV,EAOL,MAAMuB,UAAclB,EAChB,WAAAZ,CAAY5B,EAAMxD,EAAM8G,EAASC,EAAQC,GACrCf,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKrF,KAAOA,EACZqF,KAAKyB,QAAUA,EACfzB,KAAK0B,OAASA,EACd1B,KAAK2B,MAAQA,CAChB,CACD,eAAIrB,GACA,MAAO,OACV,CACD,QAAAC,CAASC,GACL,OAAOR,KAAK2B,MAAMpB,SAASC,EAC9B,EAEL,IAAIsB,EA6BAC,EA8vBAC,EACAC,GA3xBJ,SAAWH,GACPA,EAA6B,UAAI,KACjCA,EAA6B,UAAI,IACpC,CAHD,CAGGA,IAAsBA,EAAoB,CAAE,IAC/C,SAAWA,GAOPA,EAAkBI,MANlB,SAAeC,GACX,MAAM9C,EAAM8C,EACZ,GAAW,SAAP9C,EACA,MAAM,IAAIrB,MAAM,uCACpB,OAAO8D,EAAkBzC,EAC5B,CAEJ,CARD,CAQGyC,IAAsBA,EAAoB,CAAE,IAM/C,MAAMM,UAAkBzB,EACpB,WAAAZ,CAAYsC,EAAUC,GAClB1B,QACAZ,KAAKqC,SAAWA,EAChBrC,KAAKsC,SAAWA,CACnB,CACD,eAAIhC,GACA,MAAO,WACV,GAGL,SAAWyB,GACPA,EAAuB,OAAI,IAC3BA,EAA0B,UAAI,KAC9BA,EAA8B,cAAI,KAClCA,EAA+B,eAAI,KACnCA,EAA6B,aAAI,KACjCA,EAA6B,aAAI,KACjCA,EAA0B,UAAI,KAC9BA,EAAyB,SAAI,KAC7BA,EAA0B,UAAI,KAC9BA,EAAgC,gBAAI,MACpCA,EAAiC,iBAAI,KACxC,CAZD,CAYGA,IAAmBA,EAAiB,CAAE,IACzC,SAAWA,GAOPA,EAAeG,MANf,SAAeC,GACX,MAAM9C,EAAM8C,EACZ,GAAW,SAAP9C,EACA,MAAM,IAAIrB,MAAM,oCACpB,OAAO+D,EAAe1C,EACzB,CAEJ,CARD,CAQG0C,IAAmBA,EAAiB,CAAE,IAMzC,MAAMQ,UAAe5B,EACjB,WAAAZ,CAAYsC,EAAUC,EAAUX,GAC5Bf,QACAZ,KAAKqC,SAAWA,EAChBrC,KAAKsC,SAAWA,EAChBtC,KAAK2B,MAAQA,CAChB,CACD,eAAIrB,GACA,MAAO,QACV,EAOL,MAAMkC,UAAa7B,EACf,WAAAZ,CAAY5B,EAAM2C,GACdF,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKc,KAAOA,CACf,CACD,eAAIR,GACA,MAAO,MACV,EAOL,MAAMmC,UAAa9B,EACf,WAAAZ,CAAYiB,EAAM0B,GACd9B,QACAZ,KAAKgB,KAAOA,EACZhB,KAAK0C,WAAaA,CACrB,CACD,eAAIpC,GACA,MAAO,MACV,EAOL,MAAMqC,UAAehC,EACjB,WAAAZ,CAAYqB,EAAWJ,GACnBJ,QACAZ,KAAKoB,UAAYA,EACjBpB,KAAKgB,KAAOA,CACf,CACD,eAAIV,GACA,MAAO,MACV,EAOL,MAAMsC,UAAWjC,EACb,WAAAZ,CAAYqB,EAAWJ,EAAM6B,EAAQC,GACjClC,QACAZ,KAAKoB,UAAYA,EACjBpB,KAAKgB,KAAOA,EACZhB,KAAK6C,OAASA,EACd7C,KAAK+C,KAAOD,CACf,CACD,eAAIxC,GACA,MAAO,IACV,EAOL,MAAM0C,UAAerC,EACjB,WAAAZ,CAAY4B,GACRf,QACAZ,KAAK2B,MAAQA,CAChB,CACD,eAAIrB,GACA,MAAO,QACV,EAOL,MAAM2C,UAAetC,EACjB,WAAAZ,CAAY5B,EAAM+E,GACdtC,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKkD,QAAUA,CAClB,CACD,eAAI5C,GACA,MAAO,QACV,CAED,cAAA6C,CAAehF,GACX,IAAK,IAAIW,EAAI,EAAGA,EAAIkB,KAAKkD,QAAQhJ,OAAQ4E,IACrC,GAAIkB,KAAKkD,QAAQpE,GAAGX,MAAQA,EACxB,OAAOW,EAEf,OAAQ,CACX,EAOL,MAAMsE,UAAezC,EACjB,WAAAZ,CAAY5B,GACRyC,QACAZ,KAAK7B,KAAOA,CACf,CACD,eAAImC,GACA,MAAO,QACV,EAOL,MAAM+C,UAAc1C,EAChB,WAAAZ,CAAY5B,EAAMxD,GACdiG,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKrF,KAAOA,CACf,CACD,eAAI2F,GACA,MAAO,OACV,EAOL,MAAMgD,UAAgB3C,EAClB,WAAAZ,GACIa,OACH,CACD,eAAIN,GACA,MAAO,SACV,EAOL,MAAMiD,UAAc5C,EAChB,WAAAZ,GACIa,OACH,CACD,eAAIN,GACA,MAAO,OACV,EAOL,MAAMkD,UAAiB7C,EACnB,WAAAZ,GACIa,OACH,CACD,eAAIN,GACA,MAAO,UACV,EAOL,MAAMmD,UAAarD,EACf,WAAAL,CAAY5B,GACRyC,QACAZ,KAAK7B,KAAOA,CACf,CACD,eAAImC,GACA,MAAO,MACV,EAOL,MAAMoD,UAAqBD,EACvB,WAAA1D,CAAY5B,EAAMwF,EAAQjC,GACtBd,MAAMzC,GACN6B,KAAK2D,OAASA,EACd3D,KAAK0B,OAASA,CACjB,CACD,eAAIpB,GACA,MAAO,UACV,EAOL,MAAMsD,UAAoBH,EACtB,WAAA1D,CAAY5B,EAAMsD,EAAS9G,EAAM+G,GAC7Bd,MAAMzC,GACN6B,KAAKyB,QAAUA,EACfzB,KAAKrF,KAAOA,EACZqF,KAAK0B,OAASA,CACjB,CACD,eAAIpB,GACA,MAAO,SACV,EAOL,MAAMuD,UAAkBJ,EACpB,WAAA1D,CAAY5B,EAAM2F,EAAYH,EAAQI,GAClCnD,MAAMzC,GACN6B,KAAK8D,WAAaA,EAClB9D,KAAK2D,OAASA,EACd3D,KAAK+D,MAAQA,CAChB,CACD,eAAIzD,GACA,MAAO,OACV,EAOL,MAAM0D,UAAoBP,EACtB,WAAA1D,CAAY5B,EAAMwF,EAAQjC,GACtBd,MAAMzC,GACN6B,KAAK2D,OAASA,EACd3D,KAAK0B,OAASA,CACjB,CACD,eAAIpB,GACA,MAAO,SACV,EAOL,MAAM2D,UAAmB7D,EACrB,WAAAL,GACIa,OACH,EAOL,MAAMsD,UAAmBD,EACrB,WAAAlE,CAAY4B,GACRf,QACAZ,KAAK2B,MAAQA,CAChB,CACD,eAAIrB,GACA,MAAO,YACV,CACD,QAAAI,GACI,OAAOV,KAAK2B,KACf,CACD,cAAAlB,GACI,OAAOT,KAAK2B,KACf,EAOL,MAAMwC,UAAmBF,EACrB,WAAAlE,CAAYpF,EAAMmG,GACdF,QACAZ,KAAKrF,KAAOA,EACZqF,KAAKc,KAAOA,CACf,CACD,eAAIR,GACA,MAAO,YACV,EAOL,MAAM8D,UAAiBH,EACnB,WAAAlE,CAAY5B,EAAM2C,GACdF,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKc,KAAOA,CACf,CACD,eAAIR,GACA,MAAO,UACV,CACD,QAAAC,CAASC,GACL,OAAQR,KAAK7B,MACT,IAAK,MACD,OAAOkG,KAAKC,IAAItE,KAAKc,KAAK,GAAGP,SAASC,IAC1C,IAAK,OACD,OAAO6D,KAAKE,KAAKvE,KAAKc,KAAK,GAAGP,SAASC,IAC3C,IAAK,QACD,OAAO6D,KAAKG,MAAMxE,KAAKc,KAAK,GAAGP,SAASC,IAC5C,IAAK,OACD,OAAO6D,KAAKI,KAAKzE,KAAKc,KAAK,GAAGP,SAASC,IAC3C,IAAK,QACD,OAAO6D,KAAKK,MAAM1E,KAAKc,KAAK,GAAGP,SAASC,IAC5C,IAAK,OACD,OAAO6D,KAAKM,KAAK3E,KAAKc,KAAK,GAAGP,SAASC,IAC3C,IAAK,QACD,OAAO6D,KAAKO,MAAM5E,KAAKc,KAAK,GAAGP,SAASC,GAAUR,KAAKc,KAAK,GAAGP,SAASC,IAC5E,IAAK,QACD,OAAO6D,KAAKQ,MAAM7E,KAAKc,KAAK,GAAGP,SAASC,IAC5C,IAAK,OACD,OAAO6D,KAAKS,KAAK9E,KAAKc,KAAK,GAAGP,SAASC,IAC3C,IAAK,QACD,OAAO6D,KAAKU,IAAIV,KAAKW,IAAIhF,KAAKc,KAAK,GAAGP,SAASC,GAAUR,KAAKc,KAAK,GAAGP,SAASC,IAAWR,KAAKc,KAAK,GAAGP,SAASC,IACpH,IAAK,MACD,OAAO6D,KAAKY,IAAIjF,KAAKc,KAAK,GAAGP,SAASC,IAG1C,IAAK,UACD,OAAyC,IAAjCR,KAAKc,KAAK,GAAGP,SAASC,GAAkB6D,KAAKa,GAGzD,IAAK,WACD,OAAOb,KAAKc,KAAKd,KAAKe,IAAIpF,KAAKc,KAAK,GAAGP,SAASC,GAAWR,KAAKc,KAAK,GAAGP,SAASC,GAAU,IAC/F,IAAK,MAEL,IAAK,MACD,OAAO6D,KAAKgB,IAAIrF,KAAKc,KAAK,GAAGP,SAASC,IAC1C,IAAK,OACD,OAAO6D,KAAKe,IAAI,EAAGpF,KAAKc,KAAK,GAAGP,SAASC,IAK7C,IAAK,QACD,OAAO6D,KAAKiB,MAAMtF,KAAKc,KAAK,GAAGP,SAASC,IAC5C,IAAK,MACD,OAAQR,KAAKc,KAAK,GAAGP,SAASC,GAAWR,KAAKc,KAAK,GAAGP,SAASC,GAC3DR,KAAKc,KAAK,GAAGP,SAASC,GAC9B,IAAK,QAqBL,IAAK,OACD,OAAQR,KAAKc,KAAK,GAAGP,SAASC,GAC1B6D,KAAKiB,MAAMtF,KAAKc,KAAK,GAAGP,SAASC,IAlBzC,IAAK,cACD,OAAO,EAAI6D,KAAKc,KAAKnF,KAAKc,KAAK,GAAGP,SAASC,IAG/C,IAAK,MACD,OAAO6D,KAAKkB,IAAIvF,KAAKc,KAAK,GAAGP,SAASC,IAC1C,IAAK,OACD,OAAO6D,KAAKmB,KAAKxF,KAAKc,KAAK,GAAGP,SAASC,IAC3C,IAAK,MACD,OAAO6D,KAAKW,IAAIhF,KAAKc,KAAK,GAAGP,SAASC,GAAUR,KAAKc,KAAK,GAAGP,SAASC,IAC1E,IAAK,MACD,OAAO6D,KAAKU,IAAI/E,KAAKc,KAAK,GAAGP,SAASC,GAAUR,KAAKc,KAAK,GAAGP,SAASC,IAC1E,IAAK,MACD,OAAQR,KAAKc,KAAK,GAAGP,SAASC,IACzB,EAAIR,KAAKc,KAAK,GAAGP,SAASC,IAC3BR,KAAKc,KAAK,GAAGP,SAASC,GAAWR,KAAKc,KAAK,GAAGP,SAASC,GAI/D,IAAK,MACD,OAAO6D,KAAKe,IAAIpF,KAAKc,KAAK,GAAGP,SAASC,GAAUR,KAAKc,KAAK,GAAGP,SAASC,IAC1E,IAAK,UACD,OAAQR,KAAKc,KAAK,GAAGP,SAASC,GAAW6D,KAAKa,GAAM,IACxD,IAAK,QACD,OAAOb,KAAKoB,MAAMzF,KAAKc,KAAK,GAAGP,SAASC,IAC5C,IAAK,OACD,OAAO6D,KAAKqB,KAAK1F,KAAKc,KAAK,GAAGP,SAASC,IAC3C,IAAK,MACD,OAAO6D,KAAKsB,IAAI3F,KAAKc,KAAK,GAAGP,SAASC,IAC1C,IAAK,OACD,OAAO6D,KAAKuB,KAAK5F,KAAKc,KAAK,GAAGP,SAASC,IAC3C,IAAK,WACD,OAAO6D,KAAKU,IAAIV,KAAKW,IAAIhF,KAAKc,KAAK,GAAGP,SAASC,GAAU,GAAI,GACjE,IAAK,aACD,OAAQR,KAAKc,KAAK,GAAGP,SAASC,GAC1BR,KAAKc,KAAK,GAAGP,SAASC,IACrB,EAAI,EAAIR,KAAKc,KAAK,GAAGP,SAASC,IACvC,IAAK,OACD,OAAO6D,KAAKc,KAAKnF,KAAKc,KAAK,GAAGP,SAASC,IAC3C,IAAK,OACD,OAAOR,KAAKc,KAAK,GAAGP,SAASC,GAAWR,KAAKc,KAAK,GAAGP,SAASC,GACxD,EACA,EACV,IAAK,MACD,OAAO6D,KAAKwB,IAAI7F,KAAKc,KAAK,GAAGP,SAASC,IAC1C,IAAK,OACD,OAAO6D,KAAKyB,KAAK9F,KAAKc,KAAK,GAAGP,SAASC,IAC3C,IAAK,QACD,OAAO6D,KAAK0B,MAAM/F,KAAKc,KAAK,GAAGP,SAASC,IAC5C,QACI,MAAM,IAAIxC,MAAM,uBAAyBgC,KAAK7B,MAEzD,EAOL,MAAM6H,UAAqB/B,EACvB,WAAAlE,CAAY5B,GACRyC,QACAZ,KAAK7B,KAAOA,CACf,CACD,eAAImC,GACA,MAAO,SACV,EAOL,MAAM2F,UAAkBhC,EACpB,WAAAlE,CAAY5B,EAAM+H,GACdtF,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKkG,YAAcA,CACtB,CACD,eAAI5F,GACA,MAAO,WACV,CACD,QAAAC,CAASC,GACL,IAAIwB,EAAImE,EACR,GAAInG,KAAKkG,uBAAuB/B,EAAY,CAExC,MAAMiC,EAAmC,QAAvBpE,EAAKhC,KAAKqG,eAA4B,IAAPrE,OAAgB,EAASA,EAAGvB,eAAeD,GACtF7F,EAAwC,QAAhCwL,EAAKnG,KAAKkG,YAAYvL,YAAyB,IAAPwL,OAAgB,EAASA,EAAGhI,KAC5EmI,EAAS9F,EAAQL,QAAQR,IAAIhF,GAC7B4L,EAAcD,aAAuC,EAASA,EAAOnD,eAAeiD,GAC1F,IAAoB,GAAhBG,EAAmB,CAEnB,OADcvG,KAAKkG,YAAYpF,KAAKyF,GAAahG,SAASC,EAE7D,CACDgG,QAAQjB,IAAIgB,EACf,CACD,OAAOvG,KAAKkG,YAAY3F,SAASC,EACpC,EAOL,MAAMiG,UAAoBxC,EACtB,WAAAlE,CAAY4B,GACRf,QACAZ,KAAK2B,MAAQA,CAChB,CACD,eAAIrB,GACA,MAAO,aACV,CACD,QAAAC,GACI,OAAOP,KAAK2B,KACf,EAOL,MAAM+E,UAAoBzC,EACtB,WAAAlE,CAAYpF,EAAMgH,GACdf,QACAZ,KAAKrF,KAAOA,EACZqF,KAAK2B,MAAQA,CAChB,CACD,eAAIrB,GACA,MAAO,aACV,EAOL,MAAMqG,UAAqB1C,EACvB,WAAAlE,CAAYpF,EAAMmG,GACdF,QACAZ,KAAKrF,KAAOA,EACZqF,KAAKc,KAAOA,CACf,CACD,eAAIR,GACA,MAAO,cACV,CACD,QAAAC,CAASC,GACL,OAAOR,KAAKc,KAAK,GAAGP,SAASC,EAChC,EAOL,MAAMoG,UAAqB3C,EACvB,WAAAlE,CAAY8G,GACRjG,QACAZ,KAAK6G,SAAWA,CACnB,CACD,eAAIvG,GACA,MAAO,WACV,CACD,QAAAC,CAASC,GACL,OAAOR,KAAK6G,SAAS,GAAGtG,SAASC,EACpC,EAOL,MAAMsG,UAAiB7C,EACnB,WAAAlE,GACIa,OACH,EAQL,MAAMmG,UAAsBD,EACxB,WAAA/G,CAAYsC,EAAU2E,GAClBpG,QACAZ,KAAKqC,SAAWA,EAChBrC,KAAKgH,MAAQA,CAChB,CACD,eAAI1G,GACA,MAAO,SACV,CACD,QAAAC,CAASC,GACL,OAAQR,KAAKqC,UACT,IAAK,IACD,OAAOrC,KAAKgH,MAAMzG,SAASC,GAC/B,IAAK,IACD,OAAQR,KAAKgH,MAAMzG,SAASC,GAChC,IAAK,IACD,OAAOR,KAAKgH,MAAMzG,SAASC,GAAW,EAAI,EAC9C,IAAK,IACD,OAAQR,KAAKgH,MAAMzG,SAASC,GAChC,QACI,MAAM,IAAIxC,MAAM,2BAA6BgC,KAAKqC,UAE7D,EAQL,MAAM4E,UAAuBH,EACzB,WAAA/G,CAAYsC,EAAU6E,EAAMF,GACxBpG,QACAZ,KAAKqC,SAAWA,EAChBrC,KAAKkH,KAAOA,EACZlH,KAAKgH,MAAQA,CAChB,CACD,eAAI1G,GACA,MAAO,UACV,CACD,QAAAC,CAASC,GACL,OAAQR,KAAKqC,UACT,IAAK,IACD,OAAOrC,KAAKkH,KAAK3G,SAASC,GAAWR,KAAKgH,MAAMzG,SAASC,GAC7D,IAAK,IACD,OAAOR,KAAKkH,KAAK3G,SAASC,GAAWR,KAAKgH,MAAMzG,SAASC,GAC7D,IAAK,IACD,OAAOR,KAAKkH,KAAK3G,SAASC,GAAWR,KAAKgH,MAAMzG,SAASC,GAC7D,IAAK,IACD,OAAOR,KAAKkH,KAAK3G,SAASC,GAAWR,KAAKgH,MAAMzG,SAASC,GAC7D,IAAK,IACD,OAAOR,KAAKkH,KAAK3G,SAASC,GAAWR,KAAKgH,MAAMzG,SAASC,GAC7D,IAAK,KACD,OAAOR,KAAKkH,KAAK3G,SAASC,IAAYR,KAAKgH,MAAMzG,SAASC,GACpD,EACA,EACV,IAAK,KACD,OAAOR,KAAKkH,KAAK3G,SAASC,IAAYR,KAAKgH,MAAMzG,SAASC,GACpD,EACA,EACV,IAAK,IACD,OAAOR,KAAKkH,KAAK3G,SAASC,GAAWR,KAAKgH,MAAMzG,SAASC,GACnD,EACA,EACV,IAAK,IACD,OAAOR,KAAKkH,KAAK3G,SAASC,GAAWR,KAAKgH,MAAMzG,SAASC,GACnD,EACA,EACV,IAAK,KACD,OAAOR,KAAKkH,KAAK3G,SAASC,IAAYR,KAAKgH,MAAMzG,SAASC,GACpD,EACA,EACV,IAAK,KACD,OAAOR,KAAKkH,KAAK3G,SAASC,IAAYR,KAAKgH,MAAMzG,SAASC,GACpD,EACA,EACV,IAAK,KACD,OAAOR,KAAKkH,KAAK3G,SAASC,IAAYR,KAAKgH,MAAMzG,SAASC,GACpD,EACA,EACV,IAAK,KACD,OAAOR,KAAKkH,KAAK3G,SAASC,IAAYR,KAAKgH,MAAMzG,SAASC,GACpD,EACA,EACV,QACI,MAAM,IAAIxC,MAAM,oBAAoBgC,KAAKqC,YAEpD,EAOL,MAAM8E,WAAmB/G,EACrB,WAAAL,GACIa,OACH,EAOL,MAAMwG,WAAaD,GACf,WAAApH,CAAYsH,EAAUrG,GAClBJ,QACAZ,KAAKqH,SAAWA,EAChBrH,KAAKgB,KAAOA,CACf,CACD,eAAIV,GACA,MAAO,MACV,EAOL,MAAMgH,WAAgBH,GAClB,WAAApH,CAAYiB,GACRJ,QACAZ,KAAKgB,KAAOA,CACf,CACD,eAAIV,GACA,MAAO,SACV,EAOL,MAAMiH,WAAiBnH,EACnB,WAAAL,CAAY5B,EAAMxD,EAAMmJ,GACpBlD,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKrF,KAAOA,EACZqF,KAAK8D,WAAaA,CACrB,CACD,eAAIxD,GACA,MAAO,UACV,EAOL,MAAMkH,WAAepH,EACjB,WAAAL,CAAYqB,EAAWJ,GACnBJ,QACAZ,KAAKoB,UAAYA,EACjBpB,KAAKgB,KAAOA,CACf,CACD,eAAIV,GACA,MAAO,QACV,EAOL,MAAMmH,WAAerH,EACjB,WAAAL,CAAY5B,EAAMxD,EAAMmJ,GACpBlD,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAKrF,KAAOA,EACZqF,KAAK8D,WAAaA,CACrB,CACD,eAAIxD,GACA,MAAO,QACV,EAOL,MAAMoH,WAAkBtH,EACpB,WAAAL,CAAY5B,EAAMwD,GACdf,QACAZ,KAAK7B,KAAOA,EACZ6B,KAAK2B,MAAQA,CAChB,CACD,eAAIrB,GACA,MAAO,WACV,GAKL,SAAW2B,GACPA,EAAWA,EAAkB,MAAI,GAAK,QACtCA,EAAWA,EAAoB,QAAI,GAAK,UACxCA,EAAWA,EAAqB,SAAI,GAAK,UAC5C,CAJD,CAIGA,IAAeA,EAAa,CAAE,IACjC,MAAM0F,GACF,WAAA5H,CAAY5B,EAAMxD,EAAMiN,GACpB5H,KAAK7B,KAAOA,EACZ6B,KAAKrF,KAAOA,EACZqF,KAAK4H,KAAOA,CACf,CACD,QAAAlH,GACI,OAAOV,KAAK7B,IACf,EAGL,MAAM0J,IAEN7F,EAAK6F,GACLA,GAAWC,KAAO,IAAIH,GAAU,GAAI1F,EAAW8F,SAAU,IACzDF,GAAWG,IAAM,IAAIL,GAAU,MAAO1F,EAAWgG,MAAO,IACxDJ,GAAWE,SAAW,CAClBG,IAAK,IAAIP,GAAU,MAAO1F,EAAW8F,SAAU,OAC/CI,KAAM,IAAIR,GAAU,OAAQ1F,EAAW8F,SAAU,QACjDK,GAAI,IAAIT,GAAU,KAAM1F,EAAW8F,SAAU,MAC7CM,KAAM,IAAIV,GAAU,OAAQ1F,EAAW8F,SAAU,QACjD7M,IAAK,IAAIyM,GAAU,MAAO1F,EAAW8F,SAAU,OAC/CO,IAAK,IAAIX,GAAU,MAAO1F,EAAW8F,SAAU,OAC/CQ,OAAQ,IAAIZ,GAAU,SAAU1F,EAAW8F,SAAU,UACrDS,GAAI,IAAIb,GAAU,KAAM1F,EAAW8F,SAAU,MAC7CU,IAAK,IAAId,GAAU,MAAO1F,EAAW8F,SAAU,OAC/CW,IAAK,IAAIf,GAAU,MAAO1F,EAAW8F,SAAU,OAC/CY,IAAK,IAAIhB,GAAU,MAAO1F,EAAW8F,SAAU,OAC/Ca,SAAU,IAAIjB,GAAU,WAAY1F,EAAW8F,SAAU,YACzDc,WAAY,IAAIlB,GAAU,aAAc1F,EAAW8F,SAAU,cAC7De,QAAS,IAAInB,GAAU,UAAW1F,EAAW8F,SAAU,WACvDgB,GAAI,IAAIpB,GAAU,KAAM1F,EAAW8F,SAAU,MAC7CiB,IAAK,IAAIrB,GAAU,MAAO1F,EAAW8F,SAAU,OAC/CkB,IAAK,IAAItB,GAAU,MAAO1F,EAAW8F,SAAU,OAC/CmB,OAAQ,IAAIvB,GAAU,SAAU1F,EAAW8F,SAAU,UACrDoB,MAAO,IAAIxB,GAAU,QAAS1F,EAAW8F,SAAU,SACnDqB,IAAK,IAAIzB,GAAU,MAAO1F,EAAW8F,SAAU,OAC/CsB,KAAM,IAAI1B,GAAU,OAAQ1F,EAAW8F,SAAU,SAErDF,GAAWyB,SAAW,CAClBC,MAAO,IAAI5B,GAAU,QAAS1F,EAAWuH,QAAS,SAClDC,OAAQ,IAAI9B,GAAU,SAAU1F,EAAWuH,QAAS,UACpDE,KAAM,IAAI/B,GAAU,OAAQ1F,EAAWuH,QAAS,QAChDxO,IAAK,IAAI2M,GAAU,MAAO1F,EAAWuH,QAAS,OAC9CjP,IAAK,IAAIoN,GAAU,MAAO1F,EAAWuH,QAAS,OAC9CG,OAAQ,IAAIhC,GAAU,SAAU1F,EAAWuH,QAAS,UACpDI,OAAQ,IAAIjC,GAAU,SAAU1F,EAAWuH,QAAS,UACpDK,OAAQ,IAAIlC,GAAU,SAAU1F,EAAWuH,QAAS,UACpDM,OAAQ,IAAInC,GAAU,SAAU1F,EAAWuH,QAAS,UACpDO,OAAQ,IAAIpC,GAAU,SAAU1F,EAAWuH,QAAS,UACpDQ,OAAQ,IAAIrC,GAAU,SAAU1F,EAAWuH,QAAS,UACpDS,OAAQ,IAAItC,GAAU,SAAU1F,EAAWuH,QAAS,UACpDU,OAAQ,IAAIvC,GAAU,SAAU1F,EAAWuH,QAAS,UACpDW,OAAQ,IAAIxC,GAAU,SAAU1F,EAAWuH,QAAS,UACpDY,IAAK,IAAIzC,GAAU,MAAO1F,EAAWuH,QAAS,OAC9Ca,QAAS,IAAI1C,GAAU,UAAW1F,EAAWuH,QAAS,WACtDc,mBAAoB,IAAI3C,GAAU,qBAAsB1F,EAAWuH,QAAS,sBAC5ElD,OAAQ,IAAIqB,GAAU,SAAU1F,EAAWuH,QAAS,UACpDe,WAAY,IAAI5C,GAAU,aAAc1F,EAAWuH,QAAS,cAC5DgB,WAAY,IAAI7C,GAAU,aAAc1F,EAAWuH,QAAS,cAC5DiB,iBAAkB,IAAI9C,GAAU,mBAAoB1F,EAAWuH,QAAS,oBACxEkB,WAAY,IAAI/C,GAAU,aAAc1F,EAAWuH,QAAS,cAC5DmB,aAAc,IAAIhD,GAAU,eAAgB1F,EAAWuH,QAAS,gBAChEoB,mBAAoB,IAAIjD,GAAU,qBAAsB1F,EAAWuH,QAAS,sBAC5EqB,wBAAyB,IAAIlD,GAAU,0BAA2B1F,EAAWuH,QAAS,2BACtFsB,mBAAoB,IAAInD,GAAU,qBAAsB1F,EAAWuH,QAAS,sBAC5EuB,mBAAoB,IAAIpD,GAAU,qBAAsB1F,EAAWuH,QAAS,sBAC5EwB,yBAA0B,IAAIrD,GAAU,2BAA4B1F,EAAWuH,QAAS,4BACxFyB,mBAAoB,IAAItD,GAAU,qBAAsB1F,EAAWuH,QAAS,sBAC5E0B,iBAAkB,IAAIvD,GAAU,mBAAoB1F,EAAWuH,QAAS,oBACxE2B,uBAAwB,IAAIxD,GAAU,yBAA0B1F,EAAWuH,QAAS,0BACpF4B,mBAAoB,IAAIzD,GAAU,qBAAsB1F,EAAWuH,QAAS,sBAC5E6B,yBAA0B,IAAI1D,GAAU,2BAA4B1F,EAAWuH,QAAS,4BACxF8B,8BAA+B,IAAI3D,GAAU,gCAAiC1F,EAAWuH,QAAS,iCAClG1O,IAAK,IAAI6M,GAAU,MAAO1F,EAAWuH,QAAS,OAC9C+B,KAAM,IAAI5D,GAAU,OAAQ1F,EAAWuH,QAAS,QAChDgC,KAAM,IAAI7D,GAAU,OAAQ1F,EAAWuH,QAAS,QAChDiC,KAAM,IAAI9D,GAAU,OAAQ1F,EAAWuH,QAAS,QAChDkC,QAAS,IAAI/D,GAAU,UAAW1F,EAAWuH,QAAS,WACtDmC,MAAO,IAAIhE,GAAU,QAAS1F,EAAWuH,QAAS,SAClDoC,MAAO,IAAIjE,GAAU,QAAS1F,EAAWuH,QAAS,SAClDqC,KAAM,IAAIlE,GAAU,OAAQ1F,EAAWuH,QAAS,QAChDsC,SAAU,IAAInE,GAAU,WAAY1F,EAAWuH,QAAS,YACxD9G,WAAY,IAAIiF,GAAU,aAAc1F,EAAWuH,QAAS,cAC5DuC,QAAS,IAAIpE,GAAU,UAAW1F,EAAWuH,QAAS,WACtDwC,QAAS,IAAIrE,GAAU,UAAW1F,EAAWuH,QAAS,WACtDzG,KAAM,IAAI4E,GAAU,OAAQ1F,EAAWuH,QAAS,QAChD3G,OAAQ,IAAI8E,GAAU,SAAU1F,EAAWuH,QAAS,UACpDyC,OAAQ,IAAItE,GAAU,SAAU1F,EAAWuH,QAAS,UACpD0C,YAAa,IAAIvE,GAAU,cAAe1F,EAAWuH,QAAS,eAC9D2C,MAAO,IAAIxE,GAAU,QAAS1F,EAAWuH,QAAS,SAClD4C,GAAI,IAAIzE,GAAU,KAAM1F,EAAWuH,QAAS,MAC5C6C,IAAK,IAAI1E,GAAU,MAAO1F,EAAWuH,QAAS,OAC9C8C,SAAU,IAAI3E,GAAU,WAAY1F,EAAWuH,QAAS,YACxD+C,GAAI,IAAI5E,GAAU,KAAM1F,EAAWuH,QAAS,MAC5CgD,IAAK,IAAI7E,GAAU,MAAO1F,EAAWuH,QAAS,OAC9CiD,MAAO,IAAI9E,GAAU,QAAS1F,EAAWuH,QAAS,SAClDkD,KAAM,IAAI/E,GAAU,OAAQ1F,EAAWuH,QAAS,QAChDmD,MAAO,IAAIhF,GAAU,QAAS1F,EAAWuH,QAAS,SAClDoD,QAAS,IAAIjF,GAAU,UAAW1F,EAAWuH,QAAS,WACtDqD,KAAM,IAAIlF,GAAU,OAAQ1F,EAAWuH,QAAS,QAChDsD,WAAY,IAAInF,GAAU,aAAc1F,EAAWuH,QAAS,cAC5DuD,OAAQ,IAAIpF,GAAU,SAAU1F,EAAWuH,QAAS,UACpD/H,QAAS,IAAIkG,GAAU,UAAW1F,EAAWuH,QAAS,WACtDwD,OAAQ,IAAIrF,GAAU,SAAU1F,EAAWuH,QAAS,UACpDyD,KAAM,IAAItF,GAAU,OAAQ1F,EAAWuH,QAAS,QAChD0D,MAAO,IAAIvF,GAAU,QAAS1F,EAAWuH,QAAS,SAClD7O,KAAM,IAAIgN,GAAU,OAAQ1F,EAAWuH,QAAS,QAChD2D,QAAS,IAAIxF,GAAU,UAAW1F,EAAWuH,QAAS,WACtD4D,IAAK,IAAIzF,GAAU,MAAO1F,EAAWuH,QAAS,OAC9C6D,UAAW,IAAI1F,GAAU,YAAa1F,EAAWuH,QAAS,aAC1D8D,MAAO,IAAI3F,GAAU,QAAS1F,EAAWuH,QAAS,SAClD+D,QAAS,IAAI5F,GAAU,UAAW1F,EAAWuH,QAAS,WACtDgE,QAAS,IAAI7F,GAAU,UAAW1F,EAAWuH,QAAS,WACtDiE,OAAQ,IAAI9F,GAAU,SAAU1F,EAAWuH,QAAS,UACpDkE,OAAQ,IAAI/F,GAAU,SAAU1F,EAAWuH,QAAS,UACpDmE,QAAS,IAAIhG,GAAU,UAAW1F,EAAWuH,QAAS,WACtDoE,QAAS,IAAIjG,GAAU,UAAW1F,EAAWuH,QAAS,WACtDqE,SAAU,IAAIlG,GAAU,WAAY1F,EAAWuH,QAAS,YACxDsE,SAAU,IAAInG,GAAU,WAAY1F,EAAWuH,QAAS,YACxDuE,SAAU,IAAIpG,GAAU,WAAY1F,EAAWuH,QAAS,YACxDwE,QAAS,IAAIrG,GAAU,UAAW1F,EAAWuH,QAAS,WACtDyE,QAAS,IAAItG,GAAU,UAAW1F,EAAWuH,QAAS,WACtD0E,QAAS,IAAIvG,GAAU,UAAW1F,EAAWuH,QAAS,WACtD2E,QAAS,IAAIxG,GAAU,UAAW1F,EAAWuH,QAAS,WACtD4E,SAAU,IAAIzG,GAAU,WAAY1F,EAAWuH,QAAS,YACxD6E,SAAU,IAAI1G,GAAU,WAAY1F,EAAWuH,QAAS,YACxD8E,SAAU,IAAI3G,GAAU,WAAY1F,EAAWuH,QAAS,YACxD+E,UAAW,IAAI5G,GAAU,YAAa1F,EAAWuH,QAAS,aAC1DgF,WAAY,IAAI7G,GAAU,aAAc1F,EAAWuH,QAAS,cAC5DiF,gBAAiB,IAAI9G,GAAU,kBAAmB1F,EAAWuH,QAAS,mBACtEkF,WAAY,IAAI/G,GAAU,aAAc1F,EAAWuH,QAAS,cAC5DmF,UAAW,IAAIhH,GAAU,YAAa1F,EAAWuH,QAAS,aAC1DoF,UAAW,IAAIjH,GAAU,YAAa1F,EAAWuH,QAAS,aAC1DqF,WAAY,IAAIlH,GAAU,aAAc1F,EAAWuH,QAAS,cAC5DsF,gBAAiB,IAAInH,GAAU,kBAAmB1F,EAAWuH,QAAS,mBACtEuF,aAAc,IAAIpH,GAAU,eAAgB1F,EAAWuH,QAAS,gBAChEwF,aAAc,IAAIrH,GAAU,eAAgB1F,EAAWuH,QAAS,gBAChEyF,SAAU,IAAItH,GAAU,WAAY1F,EAAWuH,QAAS,YACxD0F,SAAU,IAAIvH,GAAU,WAAY1F,EAAWuH,QAAS,YACxD2F,UAAW,IAAIxH,GAAU,YAAa1F,EAAWuH,QAAS,aAC1D4F,WAAY,IAAIzH,GAAU,aAAc1F,EAAWuH,QAAS,cAC5D6F,WAAY,IAAI1H,GAAU,aAAc1F,EAAWuH,QAAS,cAC5D8F,YAAa,IAAI3H,GAAU,cAAe1F,EAAWuH,QAAS,eAC9D+F,WAAY,IAAI5H,GAAU,aAAc1F,EAAWuH,QAAS,cAC5DgG,WAAY,IAAI7H,GAAU,aAAc1F,EAAWuH,QAAS,cAC5DiG,YAAa,IAAI9H,GAAU,cAAe1F,EAAWuH,QAAS,eAC9DkG,cAAe,IAAI/H,GAAU,gBAAiB1F,EAAWuH,QAAS,kBAQtE3B,GAAW8H,OAAS,CAChBC,sBAAuB,IAAIjI,GAAU,wBAAyB1F,EAAWgG,MAAO,+FAChF4H,kBAAmB,IAAIlI,GAAU,oBAAqB1F,EAAWgG,MAAO,6HACxE6H,YAAa,IAAInI,GAAU,cAAe1F,EAAWgG,MAAO,oCAC5D8H,aAAc,IAAIpI,GAAU,eAAgB1F,EAAWgG,MAAO,mCAC9D+H,MAAO,IAAIrI,GAAU,QAAS1F,EAAWgG,MAAO,yBAChDgI,IAAK,IAAItI,GAAU,MAAO1F,EAAWgG,MAAO,KAC5CiI,QAAS,IAAIvI,GAAU,UAAW1F,EAAWgG,MAAO,MACpDkI,MAAO,IAAIxI,GAAU,SAAU1F,EAAWgG,MAAO,MACjDmI,KAAM,IAAIzI,GAAU,OAAQ1F,EAAWgG,MAAO,KAC9CoI,UAAW,IAAI1I,GAAU,YAAa1F,EAAWgG,MAAO,MACxDqI,WAAY,IAAI3I,GAAU,aAAc1F,EAAWgG,MAAO,MAC1DsI,cAAe,IAAI5I,GAAU,gBAAiB1F,EAAWgG,MAAO,KAChEuI,KAAM,IAAI7I,GAAU,OAAQ1F,EAAWgG,MAAO,KAC9CwI,aAAc,IAAI9I,GAAU,eAAgB1F,EAAWgG,MAAO,KAC9DyI,cAAe,IAAI/I,GAAU,gBAAiB1F,EAAWgG,MAAO,KAChE0I,WAAY,IAAIhJ,GAAU,aAAc1F,EAAWgG,MAAO,KAC1D2I,YAAa,IAAIjJ,GAAU,cAAe1F,EAAWgG,MAAO,KAC5D4I,MAAO,IAAIlJ,GAAU,QAAS1F,EAAWgG,MAAO,KAChD6I,MAAO,IAAInJ,GAAU,QAAS1F,EAAWgG,MAAO,KAChD8I,MAAO,IAAIpJ,GAAU,QAAS1F,EAAWgG,MAAO,KAChD+I,YAAa,IAAIrJ,GAAU,cAAe1F,EAAWgG,MAAO,MAC5DgJ,UAAW,IAAItJ,GAAU,YAAa1F,EAAWgG,MAAO,MACxDiJ,aAAc,IAAIvJ,GAAU,eAAgB1F,EAAWgG,MAAO,KAC9DkJ,mBAAoB,IAAIxJ,GAAU,qBAAsB1F,EAAWgG,MAAO,MAC1EmJ,YAAa,IAAIzJ,GAAU,cAAe1F,EAAWgG,MAAO,MAC5DoJ,UAAW,IAAI1J,GAAU,YAAa1F,EAAWgG,MAAO,KACxDqJ,gBAAiB,IAAI3J,GAAU,kBAAmB1F,EAAWgG,MAAO,MACpEsJ,WAAY,IAAI5J,GAAU,aAAc1F,EAAWgG,MAAO,MAC1DuJ,OAAQ,IAAI7J,GAAU,SAAU1F,EAAWgG,MAAO,KAClDwJ,MAAO,IAAI9J,GAAU,QAAS1F,EAAWgG,MAAO,KAChDyJ,YAAa,IAAI/J,GAAU,cAAe1F,EAAWgG,MAAO,MAC5D0J,OAAQ,IAAIhK,GAAU,SAAU1F,EAAWgG,MAAO,KAClD2J,KAAM,IAAIjK,GAAU,OAAQ1F,EAAWgG,MAAO,KAC9C4J,UAAW,IAAIlK,GAAU,YAAa1F,EAAWgG,MAAO,MACxD6J,GAAI,IAAInK,GAAU,KAAM1F,EAAWgG,MAAO,KAC1C8J,MAAO,IAAIpK,GAAU,QAAS1F,EAAWgG,MAAO,MAChD+J,WAAY,IAAIrK,GAAU,aAAc1F,EAAWgG,MAAO,KAC1DgK,YAAa,IAAItK,GAAU,cAAe1F,EAAWgG,MAAO,KAC5DiK,UAAW,IAAIvK,GAAU,YAAa1F,EAAWgG,MAAO,KACxDkK,KAAM,IAAIxK,GAAU,OAAQ1F,EAAWgG,MAAO,KAC9CmK,MAAO,IAAIzK,GAAU,QAAS1F,EAAWgG,MAAO,KAChDoK,WAAY,IAAI1K,GAAU,aAAc1F,EAAWgG,MAAO,KAC1DqK,IAAK,IAAI3K,GAAU,MAAO1F,EAAWgG,MAAO,KAC5CsK,WAAY,IAAI5K,GAAU,aAAc1F,EAAWgG,MAAO,MAC1DuK,YAAa,IAAI7K,GAAU,cAAe1F,EAAWgG,MAAO,MAC5DwK,YAAa,IAAI9K,GAAU,cAAe1F,EAAWgG,MAAO,MAC5DyK,eAAgB,IAAI/K,GAAU,iBAAkB1F,EAAWgG,MAAO,MAClE0K,aAAc,IAAIhL,GAAU,eAAgB1F,EAAWgG,MAAO,MAC9D2K,UAAW,IAAIjL,GAAU,YAAa1F,EAAWgG,MAAO,MACxD4K,SAAU,IAAIlL,GAAU,WAAY1F,EAAWgG,MAAO,MACtD6K,UAAW,IAAInL,GAAU,YAAa1F,EAAWgG,MAAO,MACxD8K,kBAAmB,IAAIpL,GAAU,oBAAqB1F,EAAWgG,MAAO,OACxE+K,iBAAkB,IAAIrL,GAAU,mBAAoB1F,EAAWgG,MAAO,QAE1EJ,GAAWoL,cAAgB,CACvBjR,EAAGsH,SAASgD,SACZtK,EAAGsH,SAASsD,QACZ5K,EAAGsH,SAAS+D,UACZrL,EAAGsH,SAAS6D,QACZnL,EAAGsH,SAAS7H,SAEhBoG,GAAWqL,YAAc,CACrBlR,EAAGsH,SAASuD,KACZ7K,EAAGsH,SAASgE,MACZtL,EAAGsH,SAASwD,YAEhBjF,GAAWsL,aAAe,CACtBnR,EAAGsH,SAASe,QACZrI,EAAGsH,SAASgB,oBAEhBzC,GAAWuL,qBAAuB,CAC9BpR,EAAGsH,SAASiB,WACZvI,EAAGsH,SAASkB,WACZxI,EAAGsH,SAASmB,iBACZzI,EAAGsH,SAASoB,WACZ1I,EAAGsH,SAASqB,aACZ3I,EAAGsH,SAASsB,oBAEhB/C,GAAWwL,0BAA4B,CACnCrR,EAAGsH,SAASuB,yBAEhBhD,GAAWyL,qBAAuB,CAC9BtR,EAAGsH,SAASwB,mBACZ9I,EAAGsH,SAASyB,mBACZ/I,EAAGsH,SAAS0B,yBACZhJ,EAAGsH,SAAS2B,oBAEhBpD,GAAW0L,mBAAqB,CAC5BvR,EAAGsH,SAAS4B,iBACZlJ,EAAGsH,SAAS6B,uBACZnJ,EAAGsH,SAAS8B,mBACZpJ,EAAGsH,SAAS+B,yBACZrJ,EAAGsH,SAASgC,+BAEhBzD,GAAW2L,iBAAmB,IACvBxR,EAAGoR,wBACHpR,EAAGqR,6BACHrR,EAAGsR,wBACHtR,EAAGuR,oBAEV1L,GAAW4L,aAAe,CACtBzR,EAAGsH,SAASiE,QACZvL,EAAGsH,SAASkE,QACZxL,EAAGsH,SAASmE,OACZzL,EAAGsH,SAASoE,OACZ1L,EAAGsH,SAASqE,QACZ3L,EAAGsH,SAASsE,QACZ5L,EAAGsH,SAASuE,SACZ7L,EAAGsH,SAASwE,SACZ9L,EAAGsH,SAASyE,SACZ/L,EAAGsH,SAAS0E,QACZhM,EAAGsH,SAAS2E,QACZjM,EAAGsH,SAAS4E,QACZlM,EAAGsH,SAAS6E,QACZnM,EAAGsH,SAAS8E,SACZpM,EAAGsH,SAAS+E,SACZrM,EAAGsH,SAASgF,SACZtM,EAAGsH,SAASiF,UACZvM,EAAGsH,SAASkF,WACZxM,EAAGsH,SAASmF,gBACZzM,EAAGsH,SAASoF,WACZ1M,EAAGsH,SAASqF,UACZ3M,EAAGsH,SAASsF,UACZ5M,EAAGsH,SAASuF,WACZ7M,EAAGsH,SAASwF,gBACZ9M,EAAGsH,SAASyF,aACZ/M,EAAGsH,SAAS0F,aACZhN,EAAGsH,SAAS2F,SACZjN,EAAGsH,SAAS4F,SACZlN,EAAGsH,SAAS6F,UACZnN,EAAGsH,SAAS8F,WACZpN,EAAGsH,SAAS+F,WACZrN,EAAGsH,SAASgG,YACZtN,EAAGsH,SAASiG,WACZvN,EAAGsH,SAASkG,WACZxN,EAAGsH,SAASmG,aAEhB5H,GAAW6L,cAAgB,CACvB1R,EAAG2N,OAAOG,YACV9N,EAAG2N,OAAOI,aACV/N,EAAG2N,OAAOC,sBACV5N,EAAG2N,OAAOE,kBACV7N,EAAGsH,SAAS2D,KACZjL,EAAGsH,SAAS6C,OAEhBtE,GAAW8L,iBAAmB,CAC1B3R,EAAG2N,OAAOK,MACVhO,EAAG2N,OAAOG,YACV9N,EAAG2N,OAAOI,aACV/N,EAAG2N,OAAOC,sBACV5N,EAAG2N,OAAOE,mBAEdhI,GAAW+L,yBAA2B,CAClC5R,EAAG2N,OAAOG,YACV9N,EAAG2N,OAAOI,aACV/N,EAAG2N,OAAOK,OAEdnI,GAAWgM,eAAiB,CACxB7R,EAAGsH,SAASiC,KACZvJ,EAAGsH,SAASkC,KACZxJ,EAAGsH,SAASmC,KACZzJ,EAAGsH,SAASK,OACZ3H,EAAGsH,SAASM,OACZ5H,EAAGsH,SAASO,OACZ7H,EAAGsH,SAASQ,OACZ9H,EAAGsH,SAASS,OACZ/H,EAAGsH,SAASU,OACZhI,EAAGsH,SAASW,OACZjI,EAAGsH,SAASY,OACZlI,EAAGsH,SAASa,OACZnI,EAAGsH,SAASG,OACZzH,EAAGsH,SAASoC,WACT1J,EAAGwR,kBAIV3L,GAAWiM,eAAiB,CAAC9R,EAAG2N,OAAOK,MAAOhO,EAAGsH,SAASqC,OAC1D9D,GAAWkM,qBAAuB,CAC9B/R,EAAG2N,OAAOoB,MACV/O,EAAG2N,OAAO4C,WACVvQ,EAAG2N,OAAO6C,YACVxQ,EAAG2N,OAAO8C,YACVzQ,EAAG2N,OAAO+C,eACV1Q,EAAG2N,OAAOgD,aACV3Q,EAAG2N,OAAOiD,UACV5Q,EAAG2N,OAAOkD,SACV7Q,EAAG2N,OAAOmD,UACV9Q,EAAG2N,OAAOoD,kBACV/Q,EAAG2N,OAAOqD,kBAEdnL,GAAWmM,oBAAsB,CAC7BhS,EAAG2N,OAAOkC,UACV7P,EAAG2N,OAAO+B,aAGd,MAAMuC,GACF,WAAAlU,CAAYpF,EAAMuZ,EAAQC,GACtBnU,KAAKrF,KAAOA,EACZqF,KAAKkU,OAASA,EACdlU,KAAKmU,KAAOA,CACf,CACD,QAAAzT,GACI,OAAOV,KAAKkU,MACf,EAIL,MAAME,GACF,WAAArU,CAAYsU,GACRrU,KAAKsU,QAAU,GACftU,KAAKuU,OAAS,EACdvU,KAAKwU,SAAW,EAChBxU,KAAKyU,MAAQ,EACbzU,KAAK0U,QAAUL,QAAuCA,EAAS,EAClE,CAED,UAAAM,GACI,MAAQ3U,KAAK4U,YAET,GADA5U,KAAKuU,OAASvU,KAAKwU,UACdxU,KAAK6U,YACN,KAAM,0BAA0B7U,KAAKyU,QAG7C,OADAzU,KAAKsU,QAAQQ,KAAK,IAAIb,GAAMpM,GAAWG,IAAK,GAAIhI,KAAKyU,QAC9CzU,KAAKsU,OACf,CAED,SAAAO,GAEI,IAAIX,EAASlU,KAAK+U,WAElB,GAAc,MAAVb,EAEA,OADAlU,KAAKyU,SACE,EAGX,GAAIzU,KAAKgV,cAAcd,GACnB,OAAO,EAEX,GAAc,KAAVA,EAAe,CAEf,GAAyB,KAArBlU,KAAKiV,aAAqB,CAC1B,KAAiB,MAAVf,GAAgB,CACnB,GAAIlU,KAAK4U,WACL,OAAO,EACXV,EAASlU,KAAK+U,UACjB,CAGD,OADA/U,KAAKyU,SACE,CACV,CACI,GAAyB,KAArBzU,KAAKiV,aAAqB,CAG/BjV,KAAK+U,WACL,IAAIG,EAAe,EACnB,KAAOA,EAAe,GAAG,CACrB,GAAIlV,KAAK4U,WACL,OAAO,EAEX,GADAV,EAASlU,KAAK+U,WACA,MAAVb,EACAlU,KAAKyU,aAEJ,GAAc,KAAVP,GACL,GAAyB,KAArBlU,KAAKiV,eACLjV,KAAK+U,WACLG,IACoB,GAAhBA,GACA,OAAO,MAIA,KAAVhB,GACoB,KAArBlU,KAAKiV,eACLjV,KAAK+U,WACLG,IAGX,CACD,OAAO,CACV,CACJ,CACD,IAAIC,EAAYtN,GAAWC,KAC3B,OAAS,CACL,IAAIsN,EAAcpV,KAAKqV,UAAUnB,GASjC,GAAc,KAAVA,GAAsC,KAArBlU,KAAKiV,aAAqB,CAC3C,IAAIK,GAAgB,EAChBC,EAAKvV,KAAKsU,QAAQpa,OAAS,EAC/B,IAAK,IAAI6J,EAAQ,EAAGA,EAAQ,GAAKwR,GAAM,IAAKxR,IAASwR,EACjD,GAAIvV,KAAKsU,QAAQiB,GAAI5a,OAASkN,GAAW8H,OAAO0B,UAAW,CACnDkE,EAAK,IAC4D,GAAjE1N,GAAWgM,eAAe2B,QAAQxV,KAAKsU,QAAQiB,EAAK,GAAG5a,QACvD2a,GAAgB,GAEpB,KACH,CAIL,GAAIA,EAEA,OADAtV,KAAKyV,UAAUL,IACR,CAEd,CASD,GAAIA,IAAgBvN,GAAWC,KAAM,CACjC,IAAI4N,EAAkBxB,EAClByB,EAAY,EAChB,MAAMC,EAAe,EACrB,IAAK,IAAIC,EAAK,EAAGA,EAAKD,IAAgBC,EAGlC,GAFAH,GAAmB1V,KAAKiV,WAAWY,GACnCT,EAAcpV,KAAKqV,UAAUK,GACzBN,IAAgBvN,GAAWC,KAAM,CACjC6N,EAAYE,EACZ,KACH,CAEL,GAAIT,IAAgBvN,GAAWC,KAC3B,OAAIqN,IAActN,GAAWC,OAE7B9H,KAAKwU,WACLxU,KAAKyV,UAAUN,IACR,GAEXjB,EAASwB,EACT1V,KAAKwU,UAAYmB,EAAY,CAChC,CAED,GADAR,EAAYC,EACRpV,KAAK4U,WACL,MACJV,GAAUlU,KAAK+U,UAClB,CAED,OAAII,IAActN,GAAWC,OAE7B9H,KAAKyV,UAAUN,IACR,EACV,CACD,SAAAE,CAAUnB,GACN,IAAK,MAAM/V,KAAQ0J,GAAWyB,SAAU,CACpC,MAAM3O,EAAOkN,GAAWyB,SAASnL,GACjC,GAAI6B,KAAK8V,OAAO5B,EAAQvZ,EAAKiN,MACzB,OAAOjN,CAEd,CACD,IAAK,MAAMwD,KAAQ0J,GAAW8H,OAAQ,CAClC,MAAMhV,EAAOkN,GAAW8H,OAAOxR,GAC/B,GAAI6B,KAAK8V,OAAO5B,EAAQvZ,EAAKiN,MACzB,OAAOjN,CAEd,CACD,OAAOkN,GAAWC,IACrB,CACD,MAAAgO,CAAO5B,EAAQtM,GACX,GAAoB,iBAATA,GACP,GAAIA,GAAQsM,EACR,OAAO,MAGV,CAED,MAAM6B,EAAQnO,EAAKoO,KAAK9B,GACxB,GAAI6B,GAAwB,GAAfA,EAAME,OAAcF,EAAM,IAAM7B,EACzC,OAAO,CACd,CACD,OAAO,CACV,CACD,QAAAU,GACI,OAAO5U,KAAKwU,UAAYxU,KAAK0U,QAAQxa,MACxC,CACD,aAAA8a,CAAckB,GACV,MAAY,KAALA,GAAiB,MAALA,GAAkB,MAALA,CACnC,CACD,QAAAnB,CAASoB,EAAS,GACd,IAAID,EAAIlW,KAAK0U,QAAQ1U,KAAKwU,UAI1B,OAHA2B,EAASA,GAAU,EACnBA,IACAnW,KAAKwU,UAAY2B,EACVD,CACV,CACD,UAAAjB,CAAWtX,EAAS,GAEhB,OADAA,EAASA,GAAU,EACfqC,KAAKwU,SAAW7W,GAAUqC,KAAK0U,QAAQxa,OAChC,KACJ8F,KAAK0U,QAAQ1U,KAAKwU,SAAW7W,EACvC,CACD,SAAA8X,CAAU9a,GACN,MAAMyb,EAAOpW,KAAK0U,QAAQ2B,UAAUrW,KAAKuU,OAAQvU,KAAKwU,UACtDxU,KAAKsU,QAAQQ,KAAK,IAAIb,GAAMtZ,EAAMyb,EAAMpW,KAAKyU,OAChD,EAOL,MAAM6B,GACF,WAAAvW,GACIC,KAAKsU,QAAU,GACftU,KAAKwU,SAAW,EAChBxU,KAAKuW,SAAW,IAAIzW,CACvB,CACD,KAAAoC,CAAMsU,GACFxW,KAAKyW,YAAYD,GACjB,IAAIE,EAAa,GACjB,MAAQ1W,KAAK4U,YAAY,CACrB,MAAM+B,EAAY3W,KAAK4W,4BACvB,IAAKD,EACD,MACJD,EAAW5B,KAAK6B,EACnB,CACD,OAAOD,CACV,CACD,WAAAD,CAAYD,GACR,GAAIA,EACA,GAA2B,iBAAhBA,EAA0B,CACjC,MAAMK,EAAU,IAAIzC,GAAYoC,GAChCxW,KAAKsU,QAAUuC,EAAQlC,YAC1B,MAEG3U,KAAKsU,QAAUkC,OAInBxW,KAAKsU,QAAU,GAEnBtU,KAAKwU,SAAW,CACnB,CACD,MAAAsC,CAAO7O,EAAO8O,GAEV,OADAvQ,QAAQwQ,MAAM/O,EAAO8O,GACd,CACH9O,QACA8O,UACArW,SAAU,WACN,MAAO,GAAGqW,GACb,EAER,CACD,QAAAnC,GACI,OAAQ5U,KAAKwU,UAAYxU,KAAKsU,QAAQpa,QAClC8F,KAAKiX,QAAQtc,MAAQkN,GAAWG,GACvC,CACD,MAAA8N,CAAOoB,GACH,GAAIA,aAAiBvP,GACjB,QAAI3H,KAAKmX,OAAOD,KACZlX,KAAK+U,YACE,GAIf,IAAK,IAAIjW,EAAI,EAAGsY,EAAIF,EAAMhd,OAAQ4E,EAAIsY,IAAKtY,EAAG,CAC1C,MAAMnE,EAAOuc,EAAMpY,GACnB,GAAIkB,KAAKmX,OAAOxc,GAEZ,OADAqF,KAAK+U,YACE,CAEd,CACD,OAAO,CACV,CACD,QAAAsC,CAASH,EAAOH,GACZ,GAAI/W,KAAKmX,OAAOD,GACZ,OAAOlX,KAAK+U,WAChB,MAAM/U,KAAK8W,OAAO9W,KAAKiX,QAASF,EACnC,CACD,MAAAI,CAAOD,GACH,GAAIlX,KAAK4U,WACL,OAAO,EACX,MAAM0C,EAAKtX,KAAKiX,QAChB,GAAIC,aAAiB5Z,MAAO,CACxB,IAAIia,EAAID,EAAG3c,KAEX,OAAiB,GADLuc,EAAM1B,QAAQ+B,EAE7B,CACD,OAAOD,EAAG3c,MAAQuc,CACrB,CACD,QAAAnC,GAGI,OAFK/U,KAAK4U,YACN5U,KAAKwU,WACFxU,KAAKwX,WACf,CACD,KAAAP,GACI,OAAOjX,KAAKsU,QAAQtU,KAAKwU,SAC5B,CACD,SAAAgD,GACI,OAAOxX,KAAKsU,QAAQtU,KAAKwU,SAAW,EACvC,CACD,yBAAAoC,GASI,KAAO5W,KAAK8V,OAAOjO,GAAW8H,OAAOuC,aAAelS,KAAK4U,aAEzD,GAAI5U,KAAK8V,OAAOjO,GAAWyB,SAAS4D,OAAQ,CACxC,MAAMvS,EAAOqF,KAAKyX,cAElB,OADAzX,KAAKqX,SAASxP,GAAW8H,OAAOuC,UAAW,gBACpCvX,CACV,CACD,GAAIqF,KAAK8V,OAAOjO,GAAWyB,SAAS2C,QAAS,CACzC,MAAMA,EAASjM,KAAK0X,oBAEpB,OADA1X,KAAKqX,SAASxP,GAAW8H,OAAOuC,UAAW,gBACpCjG,CACV,CAED,MAAM0L,EAAQ3X,KAAK4X,aACnB,GAAI5X,KAAKmX,OAAOtP,GAAWyB,SAAS8D,KAAM,CACtC,MAAMyK,EAAO7X,KAAK8X,wBAIlB,OAHY,MAARD,IACAA,EAAK/T,WAAa6T,GACtB3X,KAAKqX,SAASxP,GAAW8H,OAAOuC,UAAW,iBACpC2F,CACV,CACD,GAAI7X,KAAKmX,OAAOtP,GAAWyB,SAASkD,KAAM,CACtC,MAAMuL,EAAO/X,KAAKgY,mBAIlB,OAHY,MAARD,IACAA,EAAKjU,WAAa6T,GACtB3X,KAAKqX,SAASxP,GAAW8H,OAAOuC,UAAW,iBACpC6F,CACV,CACD,GAAI/X,KAAKmX,OAAOtP,GAAWyB,SAASmD,OAAQ,CACxC,MAAMwL,EAASjY,KAAKkY,qBAIpB,OAHc,MAAVD,IACAA,EAAOnU,WAAa6T,GACxB3X,KAAKqX,SAASxP,GAAW8H,OAAOuC,UAAW,iBACpC+F,CACV,CACD,GAAIjY,KAAKmX,OAAOtP,GAAWyB,SAAShD,QAAS,CACzC,MAAM6R,EAAUnY,KAAKoY,eAGrB,OAFe,MAAXD,IACAA,EAAQrU,WAAa6T,GAClBQ,CACV,CACD,GAAInY,KAAKmX,OAAOtP,GAAWyB,SAAS8C,IAAK,CACrC,MAAMiM,EAAMrY,KAAKsY,iBAGjB,OAFW,MAAPD,IACAA,EAAIvU,WAAa6T,GACdU,CACV,CACD,OAAO,IACV,CACD,cAAAC,GAGI,IAAKtY,KAAK8V,OAAOjO,GAAWyB,SAAS8C,IACjC,OAAO,KACX,MAAMjO,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,2BAA2BtP,WAC/EV,KAAKqX,SAASxP,GAAW8H,OAAOqC,WAAY,wCAC5C,MAAMlR,EAAO,GACb,IAAKd,KAAKmX,OAAOtP,GAAW8H,OAAOsC,aAC/B,EAAG,CACC,GAAIjS,KAAKmX,OAAOtP,GAAW8H,OAAOsC,aAC9B,MACJ,MAAMsG,EAAWvY,KAAK4X,aAChBzZ,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,2BAA2BtP,WAC/EV,KAAKqX,SAASxP,GAAW8H,OAAOkB,MAAO,mCACvC,MAAM2H,EAAYxY,KAAK4X,aACjBjd,EAAOqF,KAAKyY,aACN,MAAR9d,IACAA,EAAKmJ,WAAa0U,EAClB1X,EAAKgU,KAAK,IAAIvN,GAASpJ,EAAMxD,EAAM4d,IAE1C,OAAQvY,KAAK8V,OAAOjO,GAAW8H,OAAOmB,QAE3C9Q,KAAKqX,SAASxP,GAAW8H,OAAOsC,YAAa,0CAC7C,IAAIyG,EAAU,KACd,GAAI1Y,KAAK8V,OAAOjO,GAAW8H,OAAOQ,OAAQ,CACtC,MAAMwH,EAAQ3X,KAAK4X,aACnBc,EAAU1Y,KAAKyY,aACA,MAAXC,IACAA,EAAQ5U,WAAa6T,EAC5B,CACD,MAAM3W,EAAOhB,KAAK2Y,sBAClB,OAAO,IAAI9X,EAAS1C,EAAM2C,EAAM4X,EAAS1X,EAC5C,CACD,mBAAA2X,GAEI,MAAMjC,EAAa,GAEnB,IADA1W,KAAKqX,SAASxP,GAAW8H,OAAOgB,WAAY,4BACpC3Q,KAAKmX,OAAOtP,GAAW8H,OAAOiB,cAAc,CAChD,MAAM+F,EAAY3W,KAAK4Y,aACL,OAAdjC,GACAD,EAAW5B,KAAK6B,EACvB,CAED,OADA3W,KAAKqX,SAASxP,GAAW8H,OAAOiB,YAAa,2BACtC8F,CACV,CACD,UAAAkC,GAkBI,KAAO5Y,KAAK8V,OAAOjO,GAAW8H,OAAOuC,aAAelS,KAAK4U,aAEzD,GAAI5U,KAAKmX,OAAOtP,GAAWyB,SAASiD,IAChC,OAAOvM,KAAK6Y,gBAChB,GAAI7Y,KAAKmX,OAAOtP,GAAWyB,SAAS0D,QAChC,OAAOhN,KAAK8Y,oBAChB,GAAI9Y,KAAKmX,OAAOtP,GAAWyB,SAASoD,MAChC,OAAO1M,KAAK+Y,kBAChB,GAAI/Y,KAAKmX,OAAOtP,GAAWyB,SAAS+C,KAChC,OAAOrM,KAAKgZ,iBAChB,GAAIhZ,KAAKmX,OAAOtP,GAAWyB,SAASqD,OAChC,OAAO3M,KAAKiZ,mBAChB,GAAIjZ,KAAKmX,OAAOtP,GAAWyB,SAASoG,eAChC,OAAO1P,KAAKkZ,2BAChB,GAAIlZ,KAAKmX,OAAOtP,GAAW8H,OAAOgB,YAC9B,OAAO3Q,KAAK2Y,sBAChB,IAAIQ,EAAS,KAsBb,OApBIA,EADAnZ,KAAKmX,OAAOtP,GAAWyB,SAASyD,QACvB/M,KAAKoZ,oBACTpZ,KAAKmX,OAAO,CACjBtP,GAAWyB,SAAS8D,IACpBvF,GAAWyB,SAASkD,IACpB3E,GAAWyB,SAASmD,QAEXzM,KAAKqZ,sBACTrZ,KAAK8V,OAAOjO,GAAWyB,SAAS0C,SAC5B,IAAI1I,EACRtD,KAAK8V,OAAOjO,GAAWyB,SAASsC,OAC5B,IAAIrI,EACRvD,KAAK8V,OAAOjO,GAAWyB,SAASwC,UAC5B,IAAItI,EAGTxD,KAAKsZ,kCACDtZ,KAAKuZ,wBACLvZ,KAAKwZ,wBACH,MAAVL,GACAnZ,KAAKqX,SAASxP,GAAW8H,OAAOuC,UAAW,iCACxCiH,CACV,CACD,wBAAAD,GACI,IAAKlZ,KAAK8V,OAAOjO,GAAWyB,SAASoG,eACjC,OAAO,KACX,IAAIxO,EAAalB,KAAKyZ,6BACtB,OAAO,IAAIxY,EAAaC,EAC3B,CACD,gBAAA+X,GACI,IAAKjZ,KAAK8V,OAAOjO,GAAWyB,SAASqD,OACjC,OAAO,KACX,IAAIvL,EAAYpB,KAAKyZ,6BACrB,MAAM9N,EAAQ3L,KAAK2Y,sBACnB,OAAO,IAAIxX,EAAMC,EAAWuK,EAC/B,CACD,cAAAqN,GAEI,IAAKhZ,KAAK8V,OAAOjO,GAAWyB,SAAS+C,KACjC,OAAO,KACXrM,KAAKqX,SAASxP,GAAW8H,OAAOqC,WAAY,iBAE5C,MAAM1Q,EAAQtB,KAAKmX,OAAOtP,GAAW8H,OAAOuC,WAEtC,KADAlS,KAAK0Z,YAEX1Z,KAAKqX,SAASxP,GAAW8H,OAAOuC,UAAW,iBAC3C,MAAM9Q,EAAapB,KAAKmX,OAAOtP,GAAW8H,OAAOuC,WAE3C,KADAlS,KAAK2Z,+BAEX3Z,KAAKqX,SAASxP,GAAW8H,OAAOuC,UAAW,iBAC3C,MAAM3Q,EAAavB,KAAKmX,OAAOtP,GAAW8H,OAAOsC,aAE3C,KADAjS,KAAK4Z,iBAEX5Z,KAAKqX,SAASxP,GAAW8H,OAAOsC,YAAa,iBAC7C,MAAMjR,EAAOhB,KAAK2Y,sBAClB,OAAO,IAAItX,EAAIC,EAAMF,EAAWG,EAAWP,EAC9C,CACD,SAAA0Y,GAEI,OAAQ1Z,KAAKqZ,uBACTrZ,KAAKuZ,wBACLvZ,KAAKwZ,uBACZ,CACD,cAAAI,GAEI,OAAQ5Z,KAAKuZ,wBACTvZ,KAAKsZ,kCACLtZ,KAAKwZ,uBACZ,CACD,mBAAAH,GAKI,GAAIrZ,KAAKmX,OAAOtP,GAAWyB,SAAS8D,KAAM,CACtC,MAAMyK,EAAO7X,KAAK6Z,iBAClB,GAAa,OAAThC,EACA,MAAM7X,KAAK8W,OAAO9W,KAAKiX,QAAS,kCACpC,IAAItV,EAAQ,KAGZ,OAFI3B,KAAK8V,OAAOjO,GAAW8H,OAAOoB,SAC9BpP,EAAQ3B,KAAK2Z,gCACV,IAAInY,EAAIqW,EAAK1Z,KAAM0Z,EAAKld,KAAMkd,EAAKpW,QAASoW,EAAKnW,OAAQC,EACnE,CACD,GAAI3B,KAAK8V,OAAOjO,GAAWyB,SAASkD,KAAM,CACtC,MAAMrO,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,0BAA0BtP,WAC9E,IAAI/F,EAAO,KACX,GAAIqF,KAAK8V,OAAOjO,GAAW8H,OAAOkB,OAAQ,CACtC,MAAM2H,EAAYxY,KAAK4X,aACvBjd,EAAOqF,KAAKyY,aACA,MAAR9d,IACAA,EAAKmJ,WAAa0U,EACzB,CACDxY,KAAKqX,SAASxP,GAAW8H,OAAOoB,MAAO,yBACvC,MAAMpP,EAAQ3B,KAAK2Z,+BACnB,OAAO,IAAI/X,EAAIzD,EAAMxD,EAAM,KAAM,KAAMgH,EAC1C,CACD,GAAI3B,KAAK8V,OAAOjO,GAAWyB,SAASmD,OAAQ,CACxC,MAAMtO,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,4BAA4BtP,WAChF,IAAI/F,EAAO,KACX,GAAIqF,KAAK8V,OAAOjO,GAAW8H,OAAOkB,OAAQ,CACtC,MAAM2H,EAAYxY,KAAK4X,aACvBjd,EAAOqF,KAAKyY,aACA,MAAR9d,IACAA,EAAKmJ,WAAa0U,EACzB,CACDxY,KAAKqX,SAASxP,GAAW8H,OAAOoB,MAAO,2BACvC,MAAMpP,EAAQ3B,KAAK2Z,+BACnB,OAAO,IAAI9X,EAAM1D,EAAMxD,EAAM,KAAM,KAAMgH,EAC5C,CACD,OAAO,IACV,CACD,8BAAA2X,GACI,MAAMQ,EAAW9Z,KAAKwU,SAChBqD,EAAO7X,KAAK+Z,oBAClB,GAAY,MAARlC,EACA,OAAO,KACX,IAAK7X,KAAKmX,OAAOtP,GAAWmM,qBAExB,OADAhU,KAAKwU,SAAWsF,EACT,KAEX,MAAM7R,EAAQjI,KAAKqX,SAASxP,GAAWmM,oBAAqB,+BAC5D,OAAO,IAAI5R,EAAU6F,EAAMtN,OAASkN,GAAW8H,OAAOkC,UAChD/P,EAAkBP,UAClBO,EAAkBkY,UAAWnC,EACtC,CACD,qBAAA2B,GAEI,IAAI3B,EAAO,KACX,GAAI7X,KAAKmX,OAAOtP,GAAW8H,OAAOiB,aAC9B,OAAO,KACX,IAAIqJ,EAAeja,KAAK8V,OAAOjO,GAAW8H,OAAO0C,YAGjD,GAFK4H,IACDpC,EAAO7X,KAAK+Z,sBACXE,GAAwB,MAARpC,EACjB,OAAO,KACX,MAAMld,EAAOqF,KAAKqX,SAASxP,GAAWkM,qBAAsB,iCACtDpS,EAAQ3B,KAAK2Z,+BACnB,OAAO,IAAIpX,EAAOR,EAAeG,MAAMvH,EAAKuZ,QAAS2D,EAAMlW,EAC9D,CACD,oBAAA4X,GAEI,IAAKvZ,KAAKmX,OAAOtP,GAAW8H,OAAOK,OAC/B,OAAO,KACX,MAAM8J,EAAW9Z,KAAKwU,SAChBrW,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,2BAC9ClP,EAAOd,KAAKka,4BAClB,OAAa,OAATpZ,GACAd,KAAKwU,SAAWsF,EACT,MAEJ,IAAItX,EAAKrE,EAAK+V,OAAQpT,EAChC,CACD,eAAAiY,GAEI,IAAK/Y,KAAK8V,OAAOjO,GAAWyB,SAASoD,MACjC,OAAO,KACX1M,KAAKqX,SAASxP,GAAW8H,OAAOgB,WAAY,0BAE5C,MAAM+F,EAAa,GACnB,IAAIC,EAAY3W,KAAK4Y,aACrB,KAAqB,OAAdjC,GAAoB,CACvB,GAAIA,aAAsB,MACtB,IAAK,IAAIwD,KAAKxD,EACVD,EAAW5B,KAAKqF,QAIpBzD,EAAW5B,KAAK6B,GAEpBA,EAAY3W,KAAK4Y,YACpB,CAED,IAAIlW,EAAa,KAIjB,OAHI1C,KAAK8V,OAAOjO,GAAWyB,SAAS5G,cAChCA,EAAa1C,KAAK2Y,uBACtB3Y,KAAKqX,SAASxP,GAAW8H,OAAOiB,YAAa,0BACtC,IAAInO,EAAKiU,EAAYhU,EAC/B,CACD,iBAAAoW,GAEI,IAAK9Y,KAAK8V,OAAOjO,GAAWyB,SAAS0D,QACjC,OAAO,KACX,MAAM5L,EAAYpB,KAAKyZ,6BACvBzZ,KAAKqX,SAASxP,GAAW8H,OAAOgB,WAAY,4BAC5C,MAAM3P,EAAOhB,KAAKoa,eAClB,GAAY,MAARpZ,GAA+B,GAAfA,EAAK9G,OACrB,MAAM8F,KAAK8W,OAAO9W,KAAKwX,YAAa,iCAExC,OADAxX,KAAKqX,SAASxP,GAAW8H,OAAOiB,YAAa,4BACtC,IAAIjO,EAAOvB,EAAWJ,EAChC,CACD,YAAAoZ,GAGI,MAAMC,EAAQ,GACd,GAAIra,KAAK8V,OAAOjO,GAAWyB,SAASuC,MAAO,CACvC,MAAMxE,EAAWrH,KAAKsa,kBACtBta,KAAKqX,SAASxP,GAAW8H,OAAOkB,MAAO,gCACvC7Q,KAAKqX,SAASxP,GAAW8H,OAAOgB,WAAY,gCAC5C,MAAM3P,EAAOhB,KAAKua,aAClBva,KAAKqX,SAASxP,GAAW8H,OAAOiB,YAAa,gCAC7CyJ,EAAMvF,KAAK,IAAI1N,GAAKC,EAAUrG,GACjC,CACD,GAAIhB,KAAK8V,OAAOjO,GAAWyB,SAASyC,SAAU,CAC1C/L,KAAKqX,SAASxP,GAAW8H,OAAOkB,MAAO,mCACvC7Q,KAAKqX,SAASxP,GAAW8H,OAAOgB,WAAY,mCAC5C,MAAM3P,EAAOhB,KAAKua,aAClBva,KAAKqX,SAASxP,GAAW8H,OAAOiB,YAAa,mCAC7CyJ,EAAMvF,KAAK,IAAIxN,GAAQtG,GAC1B,CACD,GAAIhB,KAAKmX,OAAO,CAACtP,GAAWyB,SAASyC,QAASlE,GAAWyB,SAASuC,OAAQ,CACtE,MAAM2O,EAASxa,KAAKoa,eACpBC,EAAMvF,KAAK0F,EAAO,GACrB,CACD,OAAOH,CACV,CACD,eAAAC,GAEI,MAAMG,EAAY,CACdza,KAAKqX,SAASxP,GAAW6L,cAAe,6BAA6BhT,YAEzE,KAAOV,KAAK8V,OAAOjO,GAAW8H,OAAOmB,QACjC2J,EAAU3F,KAAK9U,KAAKqX,SAASxP,GAAW6L,cAAe,6BAA6BhT,YAExF,OAAO+Z,CACV,CACD,UAAAF,GAGI,GAAIva,KAAK8V,OAAOjO,GAAWyB,SAAS4C,aAEhC,OADAlM,KAAKqX,SAASxP,GAAW8H,OAAOuC,UAAW,gBACpC,GAEX,IAAIyE,EAAY3W,KAAK4Y,aACrB,GAAiB,MAAbjC,EACA,MAAO,GACLA,aAAqBrZ,QACvBqZ,EAAY,CAACA,IAEjB,MAAM+D,EAAgB1a,KAAKua,aAC3B,OAA4B,GAAxBG,EAAcxgB,OACPyc,EACJ,IAAIA,EAAW+D,EAAc,GACvC,CACD,aAAA7B,GAEI,IAAK7Y,KAAK8V,OAAOjO,GAAWyB,SAASiD,IACjC,OAAO,KACX,MAAMnL,EAAYpB,KAAKyZ,6BACjB9N,EAAQ3L,KAAK2Y,sBACnB,IAAI9V,EAAS,KACT7C,KAAK8V,OAAOjO,GAAWyB,SAASzG,UAChCA,EAAS7C,KAAK2a,qBAClB,IAAI7X,EAAQ,KAGZ,OAFI9C,KAAK8V,OAAOjO,GAAWyB,SAASvG,QAChCD,EAAQ9C,KAAK2Y,uBACV,IAAI/V,EAAGxB,EAAWuK,EAAO9I,EAAQC,EAC3C,CACD,iBAAA6X,GAEI,MAAM9X,EAAS,GACTzB,EAAYpB,KAAKyZ,6BACjB9N,EAAQ3L,KAAK2Y,sBAInB,OAHA9V,EAAOiS,KAAK,IAAItN,GAAOpG,EAAWuK,IAC9B3L,KAAK8V,OAAOjO,GAAWyB,SAASzG,SAChCA,EAAOiS,KAAK9U,KAAK2a,oBAAoB,IAClC9X,CACV,CACD,iBAAAuW,GAEI,IAAKpZ,KAAK8V,OAAOjO,GAAWyB,SAASyD,QACjC,OAAO,KACX,MAAMpL,EAAQ3B,KAAK2Z,+BACnB,OAAO,IAAI3W,EAAOrB,EACrB,CACD,4BAAAgY,GAGI,IAAIiB,EAAO5a,KAAK6a,0BAChB,KAAO7a,KAAK8V,OAAOjO,GAAW8H,OAAOoC,QACjC6I,EAAO,IAAI3T,EAAejH,KAAKwX,YAAY9W,WAAYka,EAAM5a,KAAK6a,2BAEtE,OAAOD,CACV,CACD,uBAAAC,GAGI,IAAID,EAAO5a,KAAK8a,2BAChB,KAAO9a,KAAK8V,OAAOjO,GAAW8H,OAAOO,UACjC0K,EAAO,IAAI3T,EAAejH,KAAKwX,YAAY9W,WAAYka,EAAM5a,KAAK8a,4BAEtE,OAAOF,CACV,CACD,wBAAAE,GAGI,IAAIF,EAAO5a,KAAK+a,2BAChB,KAAO/a,KAAK8V,OAAOjO,GAAW8H,OAAOmC,KACjC8I,EAAO,IAAI3T,EAAejH,KAAKwX,YAAY9W,WAAYka,EAAM5a,KAAK+a,4BAEtE,OAAOH,CACV,CACD,wBAAAG,GAGI,IAAIH,EAAO5a,KAAKgb,kBAChB,KAAOhb,KAAK8V,OAAOjO,GAAW8H,OAAO2C,MACjCsI,EAAO,IAAI3T,EAAejH,KAAKwX,YAAY9W,WAAYka,EAAM5a,KAAKgb,mBAEtE,OAAOJ,CACV,CACD,eAAAI,GAGI,IAAIJ,EAAO5a,KAAKib,uBAChB,KAAOjb,KAAK8V,OAAOjO,GAAW8H,OAAOM,MACjC2K,EAAO,IAAI3T,EAAejH,KAAKwX,YAAY9W,WAAYka,EAAM5a,KAAKib,wBAEtE,OAAOL,CACV,CACD,oBAAAK,GAII,MAAML,EAAO5a,KAAKkb,yBAClB,OAAIlb,KAAK8V,OAAO,CAACjO,GAAW8H,OAAOqB,YAAanJ,GAAW8H,OAAOsB,YACvD,IAAIhK,EAAejH,KAAKwX,YAAY9W,WAAYka,EAAM5a,KAAKkb,0BAE/DN,CACV,CACD,sBAAAM,GAMI,IAAIN,EAAO5a,KAAKmb,oBAChB,KAAOnb,KAAK8V,OAAO,CACfjO,GAAW8H,OAAO0B,UAClBxJ,GAAW8H,OAAOuB,aAClBrJ,GAAW8H,OAAO2B,gBAClBzJ,GAAW8H,OAAOwB,sBAElByJ,EAAO,IAAI3T,EAAejH,KAAKwX,YAAY9W,WAAYka,EAAM5a,KAAKmb,qBAEtE,OAAOP,CACV,CACD,iBAAAO,GAII,IAAIP,EAAO5a,KAAKob,uBAChB,KAAOpb,KAAK8V,OAAO,CAACjO,GAAW8H,OAAO4B,WAAY1J,GAAW8H,OAAOyB,eAChEwJ,EAAO,IAAI3T,EAAejH,KAAKwX,YAAY9W,WAAYka,EAAM5a,KAAKob,wBAEtE,OAAOR,CACV,CACD,oBAAAQ,GAII,IAAIR,EAAO5a,KAAKqb,6BAChB,KAAOrb,KAAK8V,OAAO,CAACjO,GAAW8H,OAAOiC,KAAM/J,GAAW8H,OAAO8B,SAC1DmJ,EAAO,IAAI3T,EAAejH,KAAKwX,YAAY9W,WAAYka,EAAM5a,KAAKqb,8BAEtE,OAAOT,CACV,CACD,0BAAAS,GAKI,IAAIT,EAAO5a,KAAK+Z,oBAChB,KAAO/Z,KAAK8V,OAAO,CACfjO,GAAW8H,OAAOwC,KAClBtK,GAAW8H,OAAOY,cAClB1I,GAAW8H,OAAO6B,UAElBoJ,EAAO,IAAI3T,EAAejH,KAAKwX,YAAY9W,WAAYka,EAAM5a,KAAK+Z,qBAEtE,OAAOa,CACV,CACD,iBAAAb,GAOI,OAAI/Z,KAAK8V,OAAO,CACZjO,GAAW8H,OAAO8B,MAClB5J,GAAW8H,OAAOa,KAClB3I,GAAW8H,OAAOyC,MAClBvK,GAAW8H,OAAOwC,KAClBtK,GAAW8H,OAAOM,MAEX,IAAIlJ,EAAc/G,KAAKwX,YAAY9W,WAAYV,KAAK+Z,qBAExD/Z,KAAKsb,sBACf,CACD,oBAAAA,GAEI,MAAMV,EAAO5a,KAAKub,sBACZC,EAAIxb,KAAKyb,sBAGf,OAFID,IACAZ,EAAKvU,QAAUmV,GACZZ,CACV,CACD,mBAAAa,GAEI,GAAIzb,KAAK8V,OAAOjO,GAAW8H,OAAOc,cAAe,CAC7C,MAAMmK,EAAO5a,KAAK2Z,+BAClB3Z,KAAKqX,SAASxP,GAAW8H,OAAOe,cAAe,iBAC/C,MAAM8K,EAAIxb,KAAKyb,sBAGf,OAFID,IACAZ,EAAKvU,QAAUmV,GACZZ,CACV,CAED,GAAI5a,KAAK8V,OAAOjO,GAAW8H,OAAOgC,QAAS,CACvC,MAAMxT,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,yBAC9CwL,EAAIxb,KAAKyb,sBACTb,EAAO,IAAI1W,EAAW/F,EAAK+V,QAGjC,OAFIsH,IACAZ,EAAKvU,QAAUmV,GACZZ,CACV,CACD,OAAO,IACV,CACD,UAAAc,CAAWvd,GACP,GAAI6B,KAAKuW,SAASrW,QAAQyb,IAAIxd,GAAO,CAEjC,OADc6B,KAAKuW,SAASrW,QAAQP,IAAIxB,GAAMxD,IAEjD,CACD,GAAIqF,KAAKuW,SAASpW,QAAQwb,IAAIxd,GAAO,CAEjC,OADe6B,KAAKuW,SAASpW,QAAQR,IAAIxB,EAE5C,CACD,OAAO,IACV,CACD,mBAAAod,GAEI,GAAIvb,KAAK8V,OAAOjO,GAAW8H,OAAOK,OAAQ,CACtC,MAAM7R,EAAO6B,KAAKwX,YAAY9W,WAC9B,GAAIV,KAAKmX,OAAOtP,GAAW8H,OAAOqC,YAAa,CAC3C,MAAMlR,EAAOd,KAAKka,4BACZ5T,EAAStG,KAAK0b,WAAWvd,GAC/B,OAAc,MAAVmI,EACO,IAAInC,EAAWmC,EAAQxF,GAE3B,IAAIsD,EAASjG,EAAM2C,EAC7B,CACD,GAAId,KAAKuW,SAAStW,UAAU0b,IAAIxd,GAAO,CACnC,MAAM+X,EAAIlW,KAAKuW,SAAStW,UAAUN,IAAIxB,GACtC,OAAO,IAAI8H,EAAU9H,EAAM+X,EAAEvU,MAChC,CACD,OAAO,IAAIqE,EAAa7H,EAC3B,CAED,GAAI6B,KAAK8V,OAAOjO,GAAW6L,eACvB,OAAO,IAAIjN,EAAYmV,WAAW5b,KAAKwX,YAAY9W,aAGvD,GAAIV,KAAKmX,OAAOtP,GAAW8H,OAAOqC,YAC9B,OAAOhS,KAAK6b,oBAGhB,GAAI7b,KAAK8V,OAAOjO,GAAWyB,SAASoC,SAAU,CAC1C1L,KAAKqX,SAASxP,GAAW8H,OAAO0B,UAAW,iBAC3C,MAAM1W,EAAOqF,KAAKyY,aAClBzY,KAAKqX,SAASxP,GAAW8H,OAAOuB,aAAc,iBAC9C,MAAMvP,EAAQ3B,KAAK6b,oBACnB,OAAO,IAAInV,EAAY/L,EAAMgH,EAChC,CAED,MAAMhH,EAAOqF,KAAKyY,aACZ3X,EAAOd,KAAKka,4BAClB,OAAO,IAAIvT,EAAahM,EAAMmG,EACjC,CACD,yBAAAoZ,GAEI,IAAKla,KAAK8V,OAAOjO,GAAW8H,OAAOqC,YAC/B,OAAO,KACX,MAAMlR,EAAO,GACb,EAAG,CACC,GAAId,KAAKmX,OAAOtP,GAAW8H,OAAOsC,aAC9B,MACJ,MAAM6J,EAAM9b,KAAK2Z,+BACjB7Y,EAAKgU,KAAKgH,EACb,OAAQ9b,KAAK8V,OAAOjO,GAAW8H,OAAOmB,QAEvC,OADA9Q,KAAKqX,SAASxP,GAAW8H,OAAOsC,YAAa,iCACtCnR,CACV,CACD,0BAAA2Y,GAEIzZ,KAAK8V,OAAOjO,GAAW8H,OAAOqC,YAC9B,MAAM4I,EAAO5a,KAAK2Z,+BAElB,OADA3Z,KAAK8V,OAAOjO,GAAW8H,OAAOsC,aACvB,IAAIrL,EAAa,CAACgU,GAC5B,CACD,iBAAAiB,GAEI7b,KAAKqX,SAASxP,GAAW8H,OAAOqC,WAAY,iBAC5C,MAAM4I,EAAO5a,KAAK2Z,+BAElB,OADA3Z,KAAKqX,SAASxP,GAAW8H,OAAOsC,YAAa,iBACtC,IAAIrL,EAAa,CAACgU,GAC5B,CACD,YAAAxC,GAEI,IAAKpY,KAAK8V,OAAOjO,GAAWyB,SAAShD,QACjC,OAAO,KACX,MAAMnI,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,6BAA6BtP,WAEjFV,KAAKqX,SAASxP,GAAW8H,OAAOgB,WAAY,iCAC5C,MAAMzN,EAAU,GAChB,MAAQlD,KAAKmX,OAAOtP,GAAW8H,OAAOiB,cAAc,CAEhD,MAAMmL,EAAc/b,KAAK4X,aACnBoE,EAAahc,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,2BAA2BtP,WACrFV,KAAKqX,SAASxP,GAAW8H,OAAOkB,MAAO,wCACvC,MAAM2H,EAAYxY,KAAK4X,aACjBqE,EAAajc,KAAKyY,aACN,MAAdwD,IACAA,EAAWnY,WAAa0U,GACvBxY,KAAKmX,OAAOtP,GAAW8H,OAAOiB,aAG/B5Q,KAAK8V,OAAOjO,GAAW8H,OAAOmB,OAF9B9Q,KAAKqX,SAASxP,GAAW8H,OAAOmB,MAAO,mCAG3C5N,EAAQ4R,KAAK,IAAIrN,GAAOuU,EAAYC,EAAYF,GACnD,CACD/b,KAAKqX,SAASxP,GAAW8H,OAAOiB,YAAa,mCAC7C,MAAMsL,EAAa,IAAIjZ,EAAO9E,EAAM+E,GAEpC,OADAlD,KAAKuW,SAASpW,QAAQpB,IAAIZ,EAAM+d,GACzBA,CACV,CACD,qBAAApE,GAEI,MAAMD,EAAO7X,KAAK6Z,iBAGlB,OAFIhC,GAAQ7X,KAAK8V,OAAOjO,GAAW8H,OAAOoB,SACtC8G,EAAKlW,MAAQ3B,KAAKmc,qBACftE,CACV,CACD,kBAAAK,GAEI,IAAKlY,KAAK8V,OAAOjO,GAAWyB,SAASmD,OACjC,OAAO,KACX,MAAMtO,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,0BACpD,IAAIrV,EAAO,KACX,GAAIqF,KAAK8V,OAAOjO,GAAW8H,OAAOkB,OAAQ,CACtC,MAAM8G,EAAQ3X,KAAK4X,aACnBjd,EAAOqF,KAAKyY,aACA,MAAR9d,IACAA,EAAKmJ,WAAa6T,EACzB,CACD,IAAIhW,EAAQ,KACZ,GAAI3B,KAAK8V,OAAOjO,GAAW8H,OAAOoB,OAAQ,CACtC,IAAIqL,EAAYpc,KAAK2Z,+BACrB,GAAIyC,aAAqBjY,EACrBxC,EAAQya,OAEP,GAAIA,aAAqBnW,GAC1BmW,EAAUlW,uBAAuB/B,EACjCxC,EAAQya,EAAUlW,gBAEjB,CACD,IAAImW,EAAaD,EAAU7b,SAASP,KAAKuW,UACzC5U,EAAQ,IAAI8E,EAAY4V,EAC3B,CACJ,CACD,MAAMnG,EAAI,IAAIrU,EAAM1D,EAAKuC,WAAY/F,EAAM,GAAI,GAAIgH,GAEnD,OADA3B,KAAKuW,SAAStW,UAAUlB,IAAImX,EAAE/X,KAAM+X,GAC7BA,CACV,CACD,gBAAA8B,GAEI,IAAKhY,KAAK8V,OAAOjO,GAAWyB,SAASkD,KACjC,OAAO,KACX,MAAMrO,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,0BACpD,IAAIrV,EAAO,KACX,GAAIqF,KAAK8V,OAAOjO,GAAW8H,OAAOkB,OAAQ,CACtC,MAAM8G,EAAQ3X,KAAK4X,aACnBjd,EAAOqF,KAAKyY,aACA,MAAR9d,IACAA,EAAKmJ,WAAa6T,EACzB,CACD,IAAIhW,EAAQ,KAIZ,OAHI3B,KAAK8V,OAAOjO,GAAW8H,OAAOoB,SAC9BpP,EAAQ3B,KAAKmc,qBAEV,IAAIva,EAAIzD,EAAKuC,WAAY/F,EAAM,GAAI,GAAIgH,EACjD,CACD,iBAAAwa,GAGI,GAAInc,KAAK8V,OAAOjO,GAAW6L,eACvB,OAAO,IAAIxP,EAAWlE,KAAKwX,YAAY9W,YAC3C,MAAM/F,EAAOqF,KAAKyY,aAClBzY,KAAKqX,SAASxP,GAAW8H,OAAOqC,WAAY,iBAC5C,IAAIlR,EAAO,GACX,MAAQd,KAAKmX,OAAOtP,GAAW8H,OAAOsC,eAClCnR,EAAKgU,KAAK9U,KAAKmc,qBACVnc,KAAKmX,OAAOtP,GAAW8H,OAAOmB,SAEnC9Q,KAAK+U,WAGT,OADA/U,KAAKqX,SAASxP,GAAW8H,OAAOsC,YAAa,iBACtC,IAAI9N,EAAWxJ,EAAMmG,EAC/B,CACD,cAAA+Y,GAEI,IAAK7Z,KAAK8V,OAAOjO,GAAWyB,SAAS8D,KACjC,OAAO,KAEX,IAAI3L,EAAU,GACVC,EAAS,GACT1B,KAAK8V,OAAOjO,GAAW8H,OAAO0B,aAC9B5P,EAAUzB,KAAKqX,SAASxP,GAAWoL,cAAe,2BAA2BvS,WACzEV,KAAK8V,OAAOjO,GAAW8H,OAAOmB,SAC9BpP,EAAS1B,KAAKqX,SAASxP,GAAWqL,YAAa,yBAAyBxS,YAC5EV,KAAKqX,SAASxP,GAAW8H,OAAOuB,aAAc,kBAElD,MAAM/S,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,0BACpD,IAAIrV,EAAO,KACX,GAAIqF,KAAK8V,OAAOjO,GAAW8H,OAAOkB,OAAQ,CACtC,MAAM8G,EAAQ3X,KAAK4X,aACnBjd,EAAOqF,KAAKyY,aACA,MAAR9d,IACAA,EAAKmJ,WAAa6T,EACzB,CACD,OAAO,IAAInW,EAAIrD,EAAKuC,WAAY/F,EAAM8G,EAASC,EAAQ,KAC1D,CACD,iBAAAgW,GAEI,MAAMvZ,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,sBACpD,OAAO,IAAI5M,EAAOjF,EAAKuC,WAC1B,CACD,WAAA+W,GAEI,MAAMtZ,EAAO6B,KAAKqX,SAASxP,GAAW8H,OAAOK,MAAO,sBACpDhQ,KAAKqX,SAASxP,GAAW8H,OAAOoB,MAAO,gCACvC,IAAIuL,EAAYtc,KAAKyY,aACrB,GAAkB,OAAd6D,EACA,MAAMtc,KAAK8W,OAAO9W,KAAKiX,QAAS,4BAEhCjX,KAAKuW,SAASrW,QAAQyb,IAAIW,EAAUne,QACpCme,EAAYtc,KAAKuW,SAASrW,QAAQP,IAAI2c,EAAUne,MAAMxD,MAE1D,MAAM4hB,EAAY,IAAIlZ,EAAMlF,EAAKuC,WAAY4b,GAE7C,OADAtc,KAAKuW,SAASrW,QAAQnB,IAAIwd,EAAUpe,KAAMoe,GACnCA,CACV,CACD,UAAA9D,GAsBI,GAAIzY,KAAKmX,OAAO,CACZtP,GAAW8H,OAAOK,SACfnI,GAAW4L,aACd5L,GAAWyB,SAASI,KACpB7B,GAAWyB,SAAStO,IACpB6M,GAAWyB,SAAS/O,IACpBsN,GAAWyB,SAASxO,MACpB,CACA,MAAMH,EAAOqF,KAAK+U,WAClB,OAAO,IAAItR,EAAK9I,EAAK+F,WACxB,CACD,GAAIV,KAAKmX,OAAOtP,GAAWgM,gBAAiB,CACxC,IAAIlZ,EAAOqF,KAAK+U,WAAWrU,WACvBiD,EAAS,KACTjC,EAAS,KAQb,OAPI1B,KAAK8V,OAAOjO,GAAW8H,OAAO0B,aAC9B1N,EAAS3D,KAAKyY,aACd/W,EAAS,KACL1B,KAAK8V,OAAOjO,GAAW8H,OAAOmB,SAC9BpP,EAAS1B,KAAKqX,SAASxP,GAAWqL,YAAa,oCAAoCxS,YACvFV,KAAKqX,SAASxP,GAAW8H,OAAOuB,aAAc,2BAE3C,IAAIxN,EAAa/I,EAAMgJ,EAAQjC,EACzC,CAED,GAAI1B,KAAK8V,OAAOjO,GAAWyB,SAASc,KAAM,CACtC,IAAIoS,EAAUxc,KAAKwX,YAAY9W,WAC/BV,KAAKqX,SAASxP,GAAW8H,OAAO0B,UAAW,6BAC3C,MAAM5P,EAAUzB,KAAKqX,SAASxP,GAAWoL,cAAe,sCACxDjT,KAAKqX,SAASxP,GAAW8H,OAAOmB,MAAO,6BACvC,MAAM2L,EAAOzc,KAAKyY,aAClB,IAAI/W,EAAS,KAIb,OAHI1B,KAAK8V,OAAOjO,GAAW8H,OAAOmB,SAC9BpP,EAAS1B,KAAKqX,SAASxP,GAAWqL,YAAa,oCAAoCxS,YACvFV,KAAKqX,SAASxP,GAAW8H,OAAOuB,aAAc,6BACvC,IAAItN,EAAY4Y,EAAS/a,EAAQf,WAAY+b,EAAM/a,EAC7D,CAED,IAAI/G,EAAOqF,KAAK0c,yBAChB,GAAI/hB,EACA,OAAOA,EAEX,MAAMgd,EAAQ3X,KAAK4X,aAGnB,GAAI5X,KAAK8V,OAAOjO,GAAWyB,SAASC,OAAQ,CACxC,IAAI5F,EAAS,KACTgZ,GAAY,EAChB,MAAMpT,EAAQvJ,KAAKwX,YACnB,GAAIxX,KAAK8V,OAAOjO,GAAW8H,OAAO0B,WAAY,CAC1C1N,EAAS3D,KAAKyY,aACVzY,KAAKuW,SAASrW,QAAQyb,IAAIhY,EAAOxF,QACjCwF,EAAS3D,KAAKuW,SAASrW,QAAQP,IAAIgE,EAAOxF,MAAMxD,MAEpD,IAAIoJ,EAAQ,GACZ,GAAI/D,KAAK8V,OAAOjO,GAAW8H,OAAOmB,OAAQ,CAEtC/M,EADQ/D,KAAKmb,oBACH5a,SAASP,KAAKuW,UAAU7V,UACrC,CACDV,KAAKqX,SAASxP,GAAW8H,OAAOuB,aAAc,2BAC9CyL,EAAW5Y,EAAQ6Y,SAAS7Y,GAAS,CACxC,CACD,OAAO,IAAIF,EAAU0F,EAAM7I,WAAYiX,EAAOhU,EAAQgZ,EACzD,CACD,OAAO,IACV,CACD,sBAAAD,GAEI,GAAI1c,KAAK8V,OAAOjO,GAAWsL,cACvB,OAAO,IAAInP,EAAYhE,KAAKwX,YAAY9W,WAAY,KAAM,MAE9D,GAAIV,KAAK8V,OAAOjO,GAAW0L,oBACvB,OAAO,IAAIvP,EAAYhE,KAAKwX,YAAY9W,WAAY,KAAM,MAG9D,GAAIV,KAAK8V,OAAOjO,GAAWuL,uBACvBpT,KAAK8V,OAAOjO,GAAWwL,2BAA4B,CACnD,MAAMhJ,EAAUrK,KAAKwX,YACrBxX,KAAKqX,SAASxP,GAAW8H,OAAO0B,UAAW,kCAC3C,MAAM1N,EAAS3D,KAAKyY,aAEpB,OADAzY,KAAKqX,SAASxP,GAAW8H,OAAOuB,aAAc,kCACvC,IAAIlN,EAAYqG,EAAQ3J,WAAYiD,EAAQ,KACtD,CAED,GAAI3D,KAAK8V,OAAOjO,GAAWyL,sBAAuB,CAC9C,MAAMjJ,EAAUrK,KAAKwX,YACrBxX,KAAKqX,SAASxP,GAAW8H,OAAO0B,UAAW,kCAC3C,MAAM1N,EAAS3D,KAAKqX,SAASxP,GAAW4L,aAAc,yBAAyB/S,WAC/EV,KAAKqX,SAASxP,GAAW8H,OAAOmB,MAAO,oCACvC,MAAMpP,EAAS1B,KAAKqX,SAASxP,GAAWqL,YAAa,kDAAkDxS,WAEvG,OADAV,KAAKqX,SAASxP,GAAW8H,OAAOuB,aAAc,kCACvC,IAAIlN,EAAYqG,EAAQ3J,WAAYiD,EAAQjC,EACtD,CACD,OAAO,IACV,CACD,UAAAkW,GAGI,IAAI9T,EAAa,GACjB,KAAO9D,KAAK8V,OAAOjO,GAAW8H,OAAOS,OAAO,CACxC,MAAMjS,EAAO6B,KAAKqX,SAASxP,GAAWiM,eAAgB,2BAChD1D,EAAO,IAAI1I,GAAUvJ,EAAKuC,WAAY,MAC5C,GAAIV,KAAK8V,OAAOjO,GAAW8H,OAAOqC,YAAa,CAG3C,GADA5B,EAAKzO,MAAQ3B,KAAKqX,SAASxP,GAAW8L,iBAAkB,4BAA4BjT,WAChFV,KAAKmX,OAAOtP,GAAW8H,OAAOmB,OAAQ,CACtC9Q,KAAK+U,WACL,EAAG,CACC,MAAM8H,EAAI7c,KAAKqX,SAASxP,GAAW8L,iBAAkB,4BAA4BjT,WAC3E0P,EAAKzO,iBAAiBrE,QACxB8S,EAAKzO,MAAQ,CAACyO,EAAKzO,QAEvByO,EAAKzO,MAAMmT,KAAK+H,EACnB,OAAQ7c,KAAK8V,OAAOjO,GAAW8H,OAAOmB,OAC1C,CACD9Q,KAAKqX,SAASxP,GAAW8H,OAAOsC,YAAa,eAChD,CACDnO,EAAWgR,KAAK1E,EACnB,CAGD,KAAOpQ,KAAK8V,OAAOjO,GAAW8H,OAAOU,YAAY,CAC7C,IAAKrQ,KAAKmX,OAAOtP,GAAW8H,OAAOW,YAC/B,EAAG,CACC,MAAMnS,EAAO6B,KAAKqX,SAASxP,GAAWiM,eAAgB,2BAChD1D,EAAO,IAAI1I,GAAUvJ,EAAKuC,WAAY,MAC5C,GAAIV,KAAK8V,OAAOjO,GAAW8H,OAAOqC,YAAa,CAK3C,GAHA5B,EAAKzO,MAAQ,CACT3B,KAAKqX,SAASxP,GAAW8L,iBAAkB,4BAA4BjT,YAEvEV,KAAKmX,OAAOtP,GAAW8H,OAAOmB,OAAQ,CACtC9Q,KAAK+U,WACL,EAAG,CACC,MAAM8H,EAAI7c,KAAKqX,SAASxP,GAAW8L,iBAAkB,4BAA4BjT,WACjF0P,EAAKzO,MAAMmT,KAAK+H,EACnB,OAAQ7c,KAAK8V,OAAOjO,GAAW8H,OAAOmB,OAC1C,CACD9Q,KAAKqX,SAASxP,GAAW8H,OAAOsC,YAAa,eAChD,CACDnO,EAAWgR,KAAK1E,EACnB,OAAQpQ,KAAK8V,OAAOjO,GAAW8H,OAAOmB,QAG3C9Q,KAAKqX,SAASxP,GAAW8H,OAAOW,WAAY,6CAC/C,CACD,OAAyB,GAArBxM,EAAW5J,OACJ,KACJ4J,CACV,EAML,MAAMgZ,GACF,WAAA/c,CAAYgd,EAAMC,EAAOC,GACrBjd,KAAKgd,MAAQA,EACbhd,KAAKid,QAAUA,EACfjd,KAAK+c,KAAOA,CACf,CACD,QAAI5e,GACA,OAAO6B,KAAK+c,KAAK5e,IACpB,CACD,QAAIxD,GACA,OAAOqF,KAAK+c,KAAKpiB,IACpB,CACD,cAAImJ,GACA,OAAO9D,KAAK+c,KAAKjZ,UACpB,EAEL,MAAMoZ,GACF,WAAAnd,CAAYgd,GACR/c,KAAKmd,OAAS,GACdnd,KAAK+c,KAAOA,CACf,CACD,QAAI5e,GACA,OAAO6B,KAAK+c,KAAK5e,IACpB,CACD,cAAI4C,GACA,OAAOf,KAAK+c,KAAKhc,UACpB,CACD,QAAID,GACA,OAAOd,KAAK+c,KAAKjc,IACpB,CACD,cAAIgD,GACA,OAAO9D,KAAK+c,KAAKjZ,UACpB,EAEL,MAAMsZ,GACF,WAAArd,CAAY5B,EAAMxD,EAAM0iB,EAAOC,EAAcC,GACzCvd,KAAK7B,KAAOA,EACZ6B,KAAKrF,KAAOA,EACZqF,KAAKqd,MAAQA,EACbrd,KAAKsd,aAAeA,EACpBtd,KAAKud,SAAWA,EAChBvd,KAAKwd,cAAgBxd,KAAKwd,aAC7B,EAEL,MAAMC,IAIN,MAAMC,GACF,WAAA3d,CAAYtF,EAAOC,GACfsF,KAAKvF,MAAQA,EACbuF,KAAKtF,KAAOA,CACf,EAEL,MAAMijB,WAAmBD,GACrB,WAAA3d,CAAY5B,EAAMxD,GACdiG,MAAM,EAAG,GACTZ,KAAK7B,KAAOA,EACZ6B,KAAKrF,KAAOA,CACf,EAEL,MAAMijB,GACF,WAAA7d,CAAYpF,EAAMkjB,GACd7d,KAAKrF,KAAOA,EACZqF,KAAK6d,SAAWA,CACnB,EAEL,MAAMC,GACF,WAAA/d,GACIC,KAAK+d,OAAS,GACd/d,KAAKge,SAAW,GAChBhe,KAAKie,QAAU,EAClB,EAEL,MAAMC,GACF,WAAAne,CAAYoe,GAERne,KAAKG,QAAU,GAEfH,KAAKoe,SAAW,GAEhBpe,KAAKyB,QAAU,GAEfzB,KAAKqe,SAAW,GAEhBre,KAAKse,SAAW,GAEhBte,KAAKue,UAAY,GAEjBve,KAAKE,QAAU,GACXie,GACAne,KAAKwe,WAAWL,EACvB,CACD,UAAAK,CAAWL,GACP,MAAMM,EAAS,IAAInI,GACnBtW,KAAK0e,IAAMD,EAAOvc,MAAMic,GACxBne,KAAK2e,MAAQ,IAAIb,GACjB,IAAK,MAAMf,KAAQ/c,KAAK0e,IAAK,CAKzB,GAJwB,UAApB3B,EAAKzc,aACLN,KAAKG,QAAQ2U,KAAKiI,GACE,SAApBA,EAAKzc,aACLN,KAAKE,QAAQ4U,KAAKiI,GAClB/c,KAAK4e,aAAa7B,GAAO,CACzB,MAAMF,EAAIE,EACJ8B,EAAI7e,KAAK8e,gBAAgB/B,EAAM,QAAS,GACxCziB,EAAI0F,KAAK8e,gBAAgB/B,EAAM,UAAW,GAChD/c,KAAKoe,SAAStJ,KAAK,IAAIgI,GAAaD,EAAGgC,EAAGvkB,GAC7C,CACD,GAAI0F,KAAK+e,aAAahC,GAAO,CACzB,MAAMF,EAAIE,EACJ8B,EAAI7e,KAAK8e,gBAAgB/B,EAAM,QAAS,GACxCziB,EAAI0F,KAAK8e,gBAAgB/B,EAAM,UAAW,GAChD/c,KAAKyB,QAAQqT,KAAK,IAAIgI,GAAaD,EAAGgC,EAAGvkB,GAC5C,CACD,GAAI0F,KAAKgf,aAAajC,GAAO,CACzB,MAAMF,EAAIE,EACJ8B,EAAI7e,KAAK8e,gBAAgB/B,EAAM,QAAS,GACxCziB,EAAI0F,KAAK8e,gBAAgB/B,EAAM,UAAW,GAChD/c,KAAKqe,SAASvJ,KAAK,IAAIgI,GAAaD,EAAGgC,EAAGvkB,GAC7C,CACD,GAAI0F,KAAKif,aAAalC,GAAO,CACzB,MAAMF,EAAIE,EACJ8B,EAAI7e,KAAK8e,gBAAgB/B,EAAM,QAAS,GACxCziB,EAAI0F,KAAK8e,gBAAgB/B,EAAM,UAAW,GAChD/c,KAAKse,SAASxJ,KAAK,IAAIgI,GAAaD,EAAGgC,EAAGvkB,GAC7C,CACD,GAAIyiB,aAAgBlc,EAAU,CAC1B,MAAMuL,EAAK,IAAI8Q,GAAaH,GAC5B3Q,EAAG+Q,OAASnd,KAAKkf,WAAWnC,EAAKjc,MACjCd,KAAKue,UAAUzJ,KAAK1I,GACpB,MAAM+S,EAAcnf,KAAKof,aAAarC,EAAM,UACtCsC,EAAgBrf,KAAKof,aAAarC,EAAM,YACxCuC,EAAetf,KAAKof,aAAarC,EAAM,WACvCwC,EAAQJ,GAAeE,GAAiBC,EAC1CC,GACAvf,KAAK2e,MAAMY,EAAMphB,MAAM2W,KAAK1I,EAEnC,CACJ,CACJ,CACD,YAAA4S,CAAajC,GACT,OAAQA,aAAgBvb,GACN,OAAdub,EAAKpiB,OACgD,GAArDujB,GAAYsB,aAAahK,QAAQuH,EAAKpiB,KAAKwD,KAClD,CACD,YAAA8gB,CAAalC,GACT,OAAQA,aAAgBvb,GACN,OAAdub,EAAKpiB,OACgD,GAArDujB,GAAYuB,aAAajK,QAAQuH,EAAKpiB,KAAKwD,KAClD,CACD,YAAAygB,CAAa7B,GACT,OAAOA,aAAgBvb,GAAuB,WAAhBub,EAAKtb,OACtC,CACD,YAAAsd,CAAahC,GACT,OAAOA,aAAgBvb,GAAuB,WAAhBub,EAAKtb,OACtC,CACD,eAAAqd,CAAgB/B,EAAM5e,EAAMuhB,GACxB,MAAMC,EAAI3f,KAAKof,aAAarC,EAAM5e,GAClC,GAAS,MAALwhB,EACA,OAAOD,EAEX,IAAI7C,EAAU,OAAN8C,GAA0B,OAAZA,EAAEhe,MAAiBge,EAAEhe,MAAQ+d,EAInD,OAHI7C,aAAavf,QACbuf,EAAIA,EAAE,IAEO,iBAANA,EACAA,EAEM,iBAANA,EACAD,SAASC,GAEb6C,CACV,CACD,YAAAN,CAAarC,EAAM5e,GACf,MAAMyhB,EAAM7C,EACZ,IAAK6C,IAAQA,EAAgB,WACzB,OAAO,KACX,MAAMjI,EAAQiI,EAAgB,WAC9B,IAAK,IAAID,KAAKhI,EACV,GAAIgI,EAAExhB,MAAQA,EACV,OAAOwhB,EAEf,OAAO,IACV,CACD,UAAAT,CAAWpe,EAAMqc,OAASze,QACPA,IAAXye,IACAA,EAAS,IACb,IAAK,MAAMrB,KAAOhb,EAAM,CACpB,MAAMuc,EAAQrd,KAAK6f,cAAc/D,GACnB,OAAVuB,GACAF,EAAOrI,KAAKuI,GAChB,MAAM/W,EAAStG,KAAK8f,UAAUhE,EAAInhB,MAC9B2L,GACAtG,KAAKkf,WAAW5Y,EAAOpD,QAASia,EACvC,CACD,OAAOA,CACV,CACD,aAAA0C,CAAc9C,GACV,MAAMQ,EAAWvd,KAAKof,aAAarC,EAAM,aAAe/c,KAAKof,aAAarC,EAAM,WAChF,GAAiB,OAAbQ,EAAmB,CACnB,MAAMC,EAAgBxd,KAAKof,aAAarC,EAAM,iBACxCgD,EAAO,IAAI3C,GAAUL,EAAK5e,KAAM4e,EAAKpiB,KAAMoiB,EAAMQ,EAASpf,KAAM6B,KAAKggB,UAAUzC,EAAS5b,QAI9F,OAHsB,OAAlB6b,IACAuC,EAAKvC,cAAgBxd,KAAKigB,aAAazC,EAAc7b,QAElDoe,CACV,CACD,OAAO,IACV,CACD,YAAAE,CAAa9F,GAIT,OAHIA,aAAa7c,QACb6c,EAAIA,EAAE,IAEHA,CACV,CACD,SAAA6F,CAAU7F,GACFA,aAAa7c,QACb6c,EAAIA,EAAE,IAEV,MAAM+F,EAAItD,SAASzC,GACnB,OAAOgG,MAAMD,GAAK/F,EAAI+F,CACzB,CACD,SAAAJ,CAAU3hB,GACN,GAAa,OAATA,EACA,OAAO,KACX,GAAIA,aAAgB8E,EAChB,OAAO9E,GACXA,EAAO6B,KAAKogB,SAASjiB,IAASA,aACVsF,IAChBtF,EAAOA,EAAKA,MAEhB,IAAK,MAAMkiB,KAAKrgB,KAAKG,QACjB,GAAIkgB,EAAEliB,MAAQA,EACV,OAAOkiB,EAEf,OAAO,IACV,CACD,QAAAD,CAASzlB,GACL,GAAa,OAATA,EACA,OAAO,KACX,GAAIA,aAAgByF,EAAM,CACtB,KAAMzF,aAAgB8I,GAClB,OAAO,KAEX9I,EAAOA,EAAKwD,IACf,CACD,IAAK,MAAMkiB,KAAKrgB,KAAKE,QACjB,GAAImgB,EAAEliB,MAAQxD,EACV,OAAOqF,KAAKogB,SAASC,EAAE1lB,OAAS0lB,EAAE1lB,KAE1C,OAAO,IACV,CACD,aAAA2lB,GACI,MAAMC,EAAS,GACf,SAASC,EAAUxD,EAAOC,GAClBD,GAASuD,EAAOrmB,SAChBqmB,EAAOrmB,OAAS8iB,EAAQ,QACNte,IAAlB6hB,EAAOvD,KACPuD,EAAOvD,GAAS,IAChBC,GAAWsD,EAAOvD,GAAO9iB,SACzBqmB,EAAOvD,GAAO9iB,OAAS+iB,EAAU,EACxC,CACD,IAAK,MAAMoD,KAAKrgB,KAAKoe,SAAU,CAC3BoC,EAAUH,EAAErD,MAAOqD,EAAEpD,SACPsD,EAAOF,EAAErD,OACjBqD,EAAEpD,SAAW,IAAIW,GAAc,SAAU5d,KAAKygB,qBAAqBJ,GAC5E,CACD,IAAK,MAAMA,KAAKrgB,KAAKyB,QAAS,CAC1B+e,EAAUH,EAAErD,MAAOqD,EAAEpD,SACPsD,EAAOF,EAAErD,OACjBqD,EAAEpD,SAAW,IAAIW,GAAc,UAAW5d,KAAK0gB,qBAAqBL,GAC7E,CACD,IAAK,MAAM9I,KAAKvX,KAAKqe,SAAU,CAC3BmC,EAAUjJ,EAAEyF,MAAOzF,EAAE0F,SACPsD,EAAOhJ,EAAEyF,OACjBzF,EAAE0F,SAAW,IAAIW,GAAc,UAAWrG,EACnD,CACD,IAAK,MAAMA,KAAKvX,KAAKse,SAAU,CAC3BkC,EAAUjJ,EAAEyF,MAAOzF,EAAE0F,SACPsD,EAAOhJ,EAAEyF,OACjBzF,EAAE0F,SAAW,IAAIW,GAAc,UAAWrG,EACnD,CACD,OAAOgJ,CACV,CACD,oBAAAG,CAAqB3D,GAIjB,GAHIA,aAAgBD,KAChBC,EAAOA,EAAKA,OAEX/c,KAAK+e,aAAahC,GACnB,OAAO,KACX,MAAMC,EAAQhd,KAAK8e,gBAAgB/B,EAAM,QAAS,GAC5CE,EAAUjd,KAAK8e,gBAAgB/B,EAAM,UAAW,GAChDgD,EAAO/f,KAAK2gB,gBAAgB5D,GAGlC,OAFAgD,EAAK/C,MAAQA,EACb+C,EAAK9C,QAAUA,EACR8C,CACV,CAED,aAAAa,CAAc7D,GACV,IAAI/a,EAAImE,EAAI0a,EAAIC,EAAIC,EACpB,GAAa,OAAThE,EACA,OAAO,KACX,MAAMzW,EAASyW,aAAgB9Z,EAAS8Z,EAAO/c,KAAK8f,UAAU/C,EAAKpiB,MACnE,IAAK2L,EACD,OAAO,KACX,IAAI3I,EAAS,EACTqjB,EAAW,EACXC,EAAa,EACbC,EAAc,EACd/mB,EAAS,IAAIwjB,GAAWZ,EAAK5e,KAAM4e,aAAgBvb,EAAMub,EAAKpiB,KAAO,MACzER,EAAO+I,QAAU,GACjB,IAAK,IAAIie,EAAK,EAAGC,EAAK9a,EAAOpD,QAAQhJ,OAAQinB,EAAKC,IAAMD,EAAI,CACxD,MAAME,EAAS/a,EAAOpD,QAAQie,GACxBhjB,EAAOkjB,EAAOljB,KACd4hB,EAAO/f,KAAKshB,YAAYD,GAC9B,IAAKtB,EACD,SACJ,MAAMplB,EAAOqF,KAAKogB,SAASiB,EAAO1mB,OAAS0mB,EAAO1mB,KAC5CF,EAAQslB,EAAKtlB,MACbC,EAAOqlB,EAAKrlB,KAClBiD,EAASqC,KAAKuhB,SAAS9mB,EAAOkD,EAASqjB,GACvCA,EAAWtmB,EACXumB,EAAatjB,EACbujB,EAAc7c,KAAKW,IAAIkc,EAAazmB,GACpC,MAAM8C,EAAsC,UAA5B8jB,EAAO1mB,KAAK2F,YACtB6Z,EAAIna,KAAK8f,UAAUnlB,KACpB4C,EAAUyC,KAAK8f,UAAoC,QAAzB9d,EAAKrH,EAAa,cAAsB,IAAPqH,OAAgB,EAASA,EAAG7D,MAAQ,MAC9FqjB,IAAarH,EACbsH,EAAKD,EAAWxhB,KAAK4gB,cAAczG,QAAKzb,EACxCgjB,GAA0E,QAA1Dvb,EAAKsb,aAA+B,EAASA,EAAG/mB,YAAyB,IAAPyL,EAAgBA,EAAK5I,GAC3D,QAA3CsjB,EAAK7gB,KAAKshB,YAAY3mB,EAAa,eAAuB,IAAPkmB,OAAgB,EAASA,EAAGnmB,KACvC,QAAxComB,EAAK9gB,KAAKshB,YAAYD,EAAO1mB,aAA0B,IAAPmmB,OAAgB,EAASA,EAAGpmB,KAC7EinB,EAA6C,QAA/BZ,EAAKM,EAAO1mB,KAAY,aAAsB,IAAPomB,EAAgBA,EAAK,EAC1E7d,EAAUse,EAAWC,aAA+B,EAASA,EAAGve,aAAUxE,EAC1E2hB,EAAI,IAAI5C,GACd4C,EAAEtD,KAAOsE,EACThB,EAAEliB,KAAOA,EACTkiB,EAAE1iB,OAASA,EACX0iB,EAAE3lB,KAAOA,EACT2lB,EAAE1lB,KAAOA,EACT0lB,EAAE9iB,QAAUA,EACZ8iB,EAAEsB,WAAaA,EACftB,EAAEqB,YAAcA,EAChBrB,EAAEmB,SAAWA,EACbnB,EAAEnd,QAAUA,EACZ/I,EAAO+I,QAAQ4R,KAAKuL,EACvB,CAMD,OALAlmB,EAAOO,KAAOsF,KAAKuhB,SAASL,EAAaD,EAAaD,GACtD7mB,EAAOM,MAAQymB,EACf/mB,EAAOoD,SAAU,EACjBpD,EAAOqnB,UAAW,EAClBrnB,EAAOwnB,WAAa,EACbxnB,CACV,CACD,eAAAwmB,CAAgB5D,GACZ,IAAI/a,EAAImE,EAAI0a,EAAIC,EAAIC,EACpB,MAAMa,EAAa5hB,KAAK4gB,cAAc7D,GACtC,GAAmB,OAAf6E,EACA,OAAOA,EACX,IAAI1B,EAAInD,EACR,MAAM5f,EAAW6C,KAAKshB,YAAYpB,EAAEvlB,MACpC,GAAiB,OAAbwC,EACA,OAAO,KACX,MAAMxC,EAAOqF,KAAKogB,SAASF,EAAEvlB,OAASulB,EAAEvlB,KAClColB,EAAO,IAAIpC,GAAWZ,EAAK5e,KAAMxD,GACvColB,EAAKtlB,MAAQ0C,EAAS1C,MACtBslB,EAAKrlB,KAAOyC,EAASzC,KACrB,IAAIyf,EAAIna,KAAK8f,UAAoC,QAAzB9d,EAAKrH,EAAa,cAAsB,IAAPqH,OAAgB,EAASA,EAAG7D,MACjFsjB,EAAKtH,EAAIna,KAAK4gB,cAAczG,QAAKzb,EAWrC,OAVAqhB,EAAKxiB,QAA+B,UAArB5C,EAAK2F,YACpByf,EAAKyB,WAAarH,EAClB4F,EAAK7c,QAAU6c,EAAKyB,SAAWC,aAA+B,EAASA,EAAGve,aAAUxE,EACpFqhB,EAAK5hB,KAAO+hB,EAAE/hB,KACd4hB,EAAKplB,KAAOA,EACZolB,EAAK2B,aAC2D,QAA1Dvb,EAAKsb,aAA+B,EAASA,EAAG/mB,YAAyB,IAAPyL,EAAgBA,EAAK4Z,EAAKxiB,SAC5C,QAA3CsjB,EAAK7gB,KAAKshB,YAAY3mB,EAAa,eAAuB,IAAPkmB,OAAgB,EAASA,EAAGnmB,KAC9C,QAAjComB,EAAK9gB,KAAKshB,YAAY3mB,UAA0B,IAAPmmB,OAAgB,EAASA,EAAGpmB,KAChFqlB,EAAK4B,WAAa/E,SAAkC,QAAxBmE,EAAKpmB,EAAY,aAAsB,IAAPomB,EAAgBA,EAAK,GAC1EhB,CACV,CACD,oBAAAU,CAAqBtT,GACjB,IAAKnN,KAAK4e,aAAazR,EAAQ4P,MAC3B,OAAO,KACX,MAAMgD,EAAO/f,KAAK2gB,gBAAgBxT,EAAQ4P,MAG1C,OAFAgD,EAAK/C,MAAQ7P,EAAQ6P,MACrB+C,EAAK9C,QAAU9P,EAAQ8P,QAChB8C,CACV,CACD,WAAAuB,CAAY3mB,GACR,IAAIqH,EACJ,GAAIrH,QACA,OAAO,KACX,MAAMknB,EAAe7hB,KAAK8e,gBAAgBnkB,EAAM,OAAQ,GAClDmnB,EAAgB9hB,KAAK8e,gBAAgBnkB,EAAM,QAAS,GAG1D,GAFIA,aAAgB8M,KAChB9M,EAAOA,EAAKA,MACZA,aAAgB8I,EAAM,CACtB,MAAMyJ,EAAQlN,KAAKogB,SAASzlB,EAAKwD,MACnB,OAAV+O,IACAvS,EAAOuS,GAEX,MAAM5G,EAAStG,KAAK8f,UAAUnlB,EAAKwD,MACpB,OAAXmI,IACA3L,EAAO2L,EACd,CACD,CACI,MAAMyZ,EAAO7B,GAAY/gB,SAASxC,EAAKwD,MACvC,QAAaO,IAATqhB,EAAoB,CACpB,MAAMgC,EAA6B,QAAnBpnB,EAAa,OAAc,EAAI,EAC/C,OAAO,IAAI+iB,GAASrZ,KAAKW,IAAI8c,EAAe/B,EAAKtlB,MAAQsnB,GAAU1d,KAAKW,IAAI6c,EAAc9B,EAAKrlB,KAAOqnB,GACzG,CACJ,CACD,CACI,MAAMhC,EAAO7B,GAAY/gB,SAASxC,EAAKwD,KAAKkY,UAAU,EAAG1b,EAAKwD,KAAKjE,OAAS,IAC5E,GAAI6lB,EAAM,CACN,MAAMgC,EAA8C,MAApCpnB,EAAKwD,KAAKxD,EAAKwD,KAAKjE,OAAS,GAAa,EAAI,EAC9D,OAAO,IAAIwjB,GAASrZ,KAAKW,IAAI8c,EAAe/B,EAAKtlB,MAAQsnB,GAAU1d,KAAKW,IAAI6c,EAAc9B,EAAKrlB,KAAOqnB,GACzG,CACJ,CACD,GAAiB,SAAbpnB,EAAKwD,KAAiB,CACtB,IAAI1D,EAAQ,EACRC,EAAO,EAWX,MAAMsnB,EAAIhiB,KAAKshB,YAAY3mB,EAAa,QAC9B,OAANqnB,IACAtnB,EAAOsnB,EAAEtnB,KACTD,EAAQunB,EAAEvnB,OAOd,OAHAC,EAFUkiB,SAAkC,QAAxB5a,EAAKrH,EAAY,aAAsB,IAAPqH,EAAgBA,EAAK,GAC1DhC,KAAK8e,gBAAgBnkB,EAAM,SAAUqF,KAAKuhB,SAAS9mB,EAAOC,IAErEmnB,IACAnnB,EAAOmnB,GACJ,IAAInE,GAASrZ,KAAKW,IAAI8c,EAAernB,GAAQ4J,KAAKW,IAAI6c,EAAcnnB,GAC9E,CACD,GAAIC,aAAgBsI,EAAQ,CACxB,IAAIxI,EAAQ,EACRC,EAAO,EAIPiD,EAAS,EACTqjB,EAAW,EACXC,EAAa,EACjB,IAAK,MAAMgB,KAAKtnB,EAAKuI,QAAS,CAC1B,MAAMie,EAAKnhB,KAAKshB,YAAYW,GAC5BxnB,EAAQ4J,KAAKW,IAAImc,EAAG1mB,MAAOA,GAC3BkD,EAASqC,KAAKuhB,SAASJ,EAAG1mB,MAAOkD,EAASqjB,GAC1CA,EAAWG,EAAGzmB,KACdumB,EAAatjB,CAChB,CAED,OADAjD,EAAOsF,KAAKuhB,SAAS9mB,EAAOwmB,EAAaD,GAClC,IAAItD,GAASrZ,KAAKW,IAAI8c,EAAernB,GAAQ4J,KAAKW,IAAI6c,EAAcnnB,GAC9E,CACD,OAAO,IACV,CACD,QAAA6mB,CAASW,EAAGhC,GACR,OAAO7b,KAAKS,KAAKob,EAAIgC,GAAKA,CAC7B,ECl4FL,SAASC,GAAUC,EAAsBH,EAAWtkB,GAChD,OAAIskB,EAAE1kB,QACE0kB,EAAET,SACK,CACHS,EAAE9jB,KACF,IAAIb,MAAM2kB,EAAEN,YAAYU,KAAK,GAAGvkB,KAAI,CAACwkB,EAAGnjB,IAC7BojB,GAAWH,EAASH,EAAE/e,QAAU+e,EAAEvnB,KAAOunB,EAAEN,WAAYhkB,GAAUskB,EAAEtkB,QAAU,GAAKskB,EAAEvnB,KAAOunB,EAAEN,WAAaxiB,MAIlH,CACH8iB,EAAE9jB,KACF,CACIR,OAAQA,GAAUskB,EAAEtkB,QAAU,GAC9BjD,KAAMunB,EAAEvnB,KACRC,KAAMsnB,EAAEtnB,KAAKgJ,OAAQA,OACf,GAAGse,EAAEtnB,KAAKgJ,OAAQxF,QAAS8jB,EAAEtnB,KAAKgJ,OAAQA,OAAQxF,QAClD8jB,EAAEtnB,KAAKgJ,OAAQxF,KACrB3D,YAAaynB,EAAEN,aAIpBM,EAAET,SACF,CACHS,EAAE9jB,KACFokB,GAAWH,EAASH,EAAE/e,QAAU+e,EAAEvnB,KAAMiD,GAAUskB,EAAEtkB,QAAU,KAG3D,CACHskB,EAAE9jB,KACF,CACIR,OAAQA,GAAUskB,EAAEtkB,QAAU,GAC9BjD,KAAMunB,EAAEvnB,KACRC,KAAMsnB,EAAEtnB,MAAMgJ,OACR,GAAGse,EAAEtnB,KAAKwD,QAAQ8jB,EAAEtnB,KAAKgJ,OAAOxF,QAChC8jB,EAAEtnB,MAAMwD,MAAQ8jB,EAAE9jB,MAIxC,CAEA,SAASokB,GAAWH,EAAsBlf,EAAmBxI,EAAciD,EAAS,GAKhF,MAAO,CACHM,OAL6BI,OAAOmkB,YAAYtf,EAAQpF,KAAImkB,GACrDE,GAAUC,EAASH,EAAGtkB,MAK7BjD,OAER,CCrJA,SAAS+nB,GAA2BC,GACjC,OAAQA,EAAQC,WACb,IAAK,KACF,MAAO,KACV,IAAK,KACF,MAAO,KACV,QAEG,OAAOD,EAAQE,mBAAqB,EAAI,WAAa,KAE9D,CAkBM,SAAUC,GAAqBnoB,GACnC,OAAQ4C,MAAMC,QAAQ7C,IAASV,EAAaU,GACxC,IAAKA,EAA2B,EAAG,GAAGooB,MAAM,EAAG,GAlBrD,SAAiCpoB,GAC/B,MAAO,CAACA,EAAKqoB,MAAOroB,EAAKsoB,QAAU,EAAGtoB,EAAKkoB,oBAAsB,EACnE,CAiBMK,CAAwBvoB,EAC9B,CAQM,SAAUwoB,GAAaxoB,GAC1B,MAAMyoB,EAAQN,GAAqBnoB,GAC7B0oB,EAAU/e,KAAKW,OAAOme,GAC5B,OAAO,EAAI9e,KAAKmB,KAAK4d,GAAW,CACnC,CF08FAlF,GAAY/gB,SAAW,CACnBjC,IAAK,CAAET,MAAO,EAAGC,KAAM,GACvBH,IAAK,CAAEE,MAAO,EAAGC,KAAM,GACvBI,IAAK,CAAEL,MAAO,EAAGC,KAAM,GACvBM,IAAK,CAAEP,MAAO,EAAGC,KAAM,GACvB+O,OAAQ,CAAEhP,MAAO,EAAGC,KAAM,GAC1B6Q,KAAM,CAAE9Q,MAAO,EAAGC,KAAM,GACxB8Q,KAAM,CAAE/Q,MAAO,GAAIC,KAAM,IACzB+Q,KAAM,CAAEhR,MAAO,GAAIC,KAAM,IACzBiP,OAAQ,CAAElP,MAAO,EAAGC,KAAM,IAC1BoP,OAAQ,CAAErP,MAAO,EAAGC,KAAM,IAC1BuP,OAAQ,CAAExP,MAAO,EAAGC,KAAM,IAC1BkP,OAAQ,CAAEnP,MAAO,GAAIC,KAAM,IAC3BqP,OAAQ,CAAEtP,MAAO,GAAIC,KAAM,IAC3BwP,OAAQ,CAAEzP,MAAO,GAAIC,KAAM,IAC3BmP,OAAQ,CAAEpP,MAAO,GAAIC,KAAM,IAC3BsP,OAAQ,CAAEvP,MAAO,GAAIC,KAAM,IAC3ByP,OAAQ,CAAE1P,MAAO,GAAIC,KAAM,KAE/BwjB,GAAYsB,aAAe3X,GAAW2L,iBAAiB1V,KAAKyZ,GACjDA,EAAEpZ,OAEb+f,GAAYuB,aAAe5X,GAAWsL,aAAarV,KAAKyZ,GAC7CA,EAAEpZ,OE99Fb,MAAMklB,GAAW,IAAI9jB,QAWL,SAAA+jB,GAAeC,EAAmBb,GAChD,IAAIc,EAAgBH,GAAS1jB,IAAI4jB,GAC5BC,IACHA,EAAgB,CACdC,wBAAyB,CAAE,EAC3BC,aAAc,CAAE,GAElBL,GAAStkB,IAAIwkB,EAAQC,IAEvB,IAAInZ,QACFA,GACEmZ,EACJ,MAAMC,wBACJA,EAAuBC,aACvBA,GACEF,EACE7kB,EAAO8jB,GAA2BC,GACxC,IAAIiB,EAASD,EAAa/kB,GAC1B,IAAKglB,EAAQ,CACX,MAAMhpB,EAAgB,OAATgE,EACT,kBACA,wBACEilB,EAAiC,OAATjlB,EAC1B,GACA,OACJglB,EAASJ,EAAOM,mBAAmB,CACjCC,MAAO,4BAA4BnlB,IACnCwf,KAAM,gtBAuBoCxjB,oJAGyBipB,2BAIrEF,EAAa/kB,GAAQglB,CACtB,CAEItZ,IACHA,EAAUkZ,EAAOQ,cAAc,CAC7BC,UAAW,WAEbR,EAAcnZ,QAAUA,GAG1B,MAAM4Z,EAAK,GAAGvB,EAAQ/e,UAAUhF,IAE3B8kB,EAAwBQ,KAC3BR,EAAwBQ,GAAMV,EAAOW,qBAAqB,CACxDJ,MAAO,oCAAoCnlB,IAC3CwlB,OAAQ,OACRpG,OAAQ,CACN4F,SACAS,WAAY,MAEdpG,SAAU,CACR2F,SACAS,WAAY,KACZC,QAAS,CAAC,CAAE1gB,OAAQ+e,EAAQ/e,aAIlC,MAAM2gB,EAAWb,EAAwBQ,GAEnCM,EAAUhB,EAAOiB,qBAAqB,CAC1CV,MAAO,oBAGHnB,EAAYF,GAA2BC,GAC7C,IAAK,IAAI+B,EAAe,EAAGA,EAAe/B,EAAQgC,gBAAiBD,EACjE,IAAK,IAAIE,EAAiB,EAAGA,EAAiBjC,EAAQE,qBAAsB+B,EAAgB,CAC1F,MAAMC,EAAYrB,EAAOsB,gBAAgB,CACvCV,OAAQG,EAASQ,mBAAmB,GACpCxmB,QAAS,CACP,CAAE2e,QAAS,EAAGY,SAAUxT,GACxB,CACE4S,QAAS,EACTY,SAAU6E,EAAQqC,WAAW,CAC3BpC,YACA8B,aAAcA,EAAe,EAC7BC,cAAe,EACfC,iBACAK,gBAAiB,QAMnBC,EAAgD,CACpDnB,MAAO,qBACPoB,iBAAkB,CAChB,CACEvmB,KAAM+jB,EAAQqC,WAAW,CACtBpC,YACA8B,eACAC,cAAe,EACfC,iBACAK,gBAAiB,IAEpBG,OAAQ,QACRC,QAAS,WAKTC,EAAOd,EAAQe,gBAAgBL,GACrCI,EAAKE,YAAYjB,GACjBe,EAAKG,aAAa,EAAGZ,GACrBS,EAAKI,KAAK,GACVJ,EAAKK,KACN,CAGH,MAAMC,EAAgBpB,EAAQqB,SAC9BrC,EAAOsC,MAAMC,OAAO,CAACH,GACvB,CCjMA,MAAMI,GAA4B,IAAInmB,IAAgF,CACpH,CAAEomB,UAAc,CAAEC,QAAS,CAAC,QAAW,UAAYC,eAAgB,IACnE,CAAEC,WAAc,CAAEF,QAAS,CAAC,QAAW,UAAYC,eAAgB,IACnE,CAAEE,WAAc,CAAEH,QAAS,CAAC,SAAW,WAAYC,eAAgB,IACnE,CAAE/qB,YAAc,CAAE8qB,QAAS,CAAC,SAAW,WAAYC,eAAgB,IACnE,CAAErrB,WAAc,CAAEorB,QAAS,CAAC,SAAW,WAAYC,eAAgB,IACnE,CAAEnrB,YAAc,CAAEkrB,QAAS,CAAC,SAAW,WAAYC,eAAgB,IACnE,CAAEjrB,aAAc,CAAEgrB,QAAS,CAAC,UAAW,WAAYC,eAAgB,MAI/DG,GAA4B,IAAIzmB,IACpC,IAAImmB,GAA0BznB,WAAWR,KAAI,EAAE2F,GAAOwiB,SAAUK,EAAIC,OAAU,CAAC,CAACD,EAAI7iB,GAAO,CAAC8iB,EAAI9iB,MAA8E+iB,QAiEhL,SAASC,GAAUtoB,GACjB,MAAgB,YAATA,CACT,CAEA,SAASuoB,GAA6Bnd,EAAmBpL,GACvD,GAAInE,EAAauP,GACf,OAAOA,EAGT,IAAIod,EAAapd,EACjB,GAAIvP,EAAa2sB,EAAWloB,MAC1B,OAAOkoB,EAAWloB,MAGhBnB,MAAMC,QAAQgM,IAA2B,iBAAVA,KACjCod,EAAa,CACXloB,KAAM8K,IAIV,IAAI9F,EAAOkjB,EAAWhsB,KAQtB,OAPK8I,IAEDA,EADEgjB,GAAUtoB,GACLpD,YAEAE,cAGJ,IAAIwI,EAAKkjB,EAAWloB,KAC7B,CAOA,MAAMmoB,GAAuB,CAC3B,CAAEC,GAAI,oBAAqBC,cAAe,GAC1C,CAAED,GAAI,gBAAiBC,cAAe,IAYxC,SAASC,GAA2B5oB,EAAcjE,GAChD,MAAM4sB,EAVR,SAAwC3oB,GACtC,IAAK,MAAM0oB,GAACA,EAAEC,cAAEA,KAAkBF,GAChC,GAAIC,EAAGG,KAAK7oB,GACV,OAAO2oB,EAGX,OAAO,CACT,CAGwBG,CAA+B9oB,GACrD,GAAIjE,EAAS4sB,EAAgB,EAC3B,MAAM,IAAI9oB,MAAM,8CAA8CG,aAAgB2oB,SAAqB5sB,uCAA4C4sB,6BAEjJ,OAAOA,CACT,CAMA,MAAMI,GAAkB,kBACxB,SAASC,GAAqCxjB,GAC5C,MAAMse,EAAIiF,GAAgBlR,KAAKrS,IACxByjB,EAAQN,GAAiB7E,EAAI,CAACA,EAAE,GAAIrF,SAASqF,EAAE,KAAO,CAACte,EAAQ,GACtE,MAAO,CACLF,KAAM4iB,GAA0B1mB,IAAIynB,GACpCN,gBAEJ,CAEA,SAASO,GAA2BC,EAAwB5pB,GAE1D,OAAO,IAAI+B,EADEpB,OAAOkpB,eAAeD,GAAYvnB,aAC/BrC,EAClB,UAqDgB8pB,GAA8BC,EAAgBC,EAAyB,IACrF,MAAMC,OAAoCjpB,IAAvBgpB,EAAQC,YAAkCD,EAAQC,WAC/DC,EAAWF,EAAQE,UAAY,SAC/BC,EAA4BH,EAAQI,eACpCxqB,MAAMC,QAAQmqB,EAAQI,gBAAkBJ,EAAQI,eAAiB,CAACJ,EAAQI,gBAC3E,CAAC,GACN,IAAIC,EAAgB,EACpB,MAAMC,EAAyC,GACzClkB,EAAmC,GACnCmkB,EAA+C,GAqErD,OApEA5pB,OAAO6pB,KAAKT,GACTU,QAAOC,IAAc3B,GAAU2B,KAC/BnpB,SAAQmpB,IACP,MAAM7e,EAAQke,EAAOW,GACf3pB,EAAOioB,GAA6Bnd,EAAO6e,GAC3CC,EArFZ,SAA0B9e,EAAoB6e,GAC5C,OAAQ7e,EAAwBud,eAAiBC,GAA2BqB,EA5B9E,SAAkB7e,GAEhB,OADaA,EAAqBrP,OAASqP,EAASA,EAAwB9K,IAE9E,CAyByF6pB,CAAS/e,GAAOrP,OACzG,CAmFiCquB,CAAiBhf,EAAO6e,GAoB7CI,EAFMH,EAAqB,EAEd,GAAM,EAAI,EADjBA,EAAqB,EACO,GAAM,EAAI,EAAI,EACtD,IAAK,IAAII,EAAY,EAAGA,EAAYJ,EAAoBI,GAAaD,EAAM,CACzE,MAAM1B,EAAgBziB,KAAKU,IAAIyjB,EAAMH,EAAqBI,GACpD9qB,EAASoqB,EACfA,GAAiBjB,EAAgBroB,EAAKF,kBACtC,MAAM2nB,eAAEA,EAAcD,QAAEA,GAAYF,GAA0BpmB,IAAItB,OAAOkpB,eAAe9oB,GAAMsB,aACxF2oB,EAAanf,EAAwBmf,UAErC/kB,EAAS,GAAGsiB,OADqB,IAAdyC,EAA4BxC,EAAkBwC,EAAY,EAAI,KAChD5B,EAAgB,EAAI,IAAIA,IAAkB,KAG3EgB,EAAiBD,EAAgBc,QACR,IAA3Bd,EAAgB3tB,QAClB2tB,EAAgB/S,KAAKgT,EAAiB,GAExChkB,EAAWgR,KAAK,CACdnX,SACAgG,SACAmkB,mBAEFG,EAAYnT,KAAK,CACfrW,OACAd,OAAQ8qB,EACR5pB,OAAQwpB,GAEX,CACIV,IACHK,EAAclT,KAAK,CACjB8S,WACAlG,YAAaqG,EACbjkB,WAAYA,EAAWgf,UAEzBiF,EAAgB,EAChBjkB,EAAW5J,OAAS,EACrB,IAED4J,EAAW5J,QACb8tB,EAAclT,KAAK,CACjB8S,WACAlG,YAAaqG,EACbjkB,WAAYA,IAGT,CACLkkB,gBACAC,cAEJ,CAEA,SAASW,GAAiCC,EAAgD/B,GACxF,OAAQ9sB,EAAa6uB,GACjB,CAAEpqB,KAAMoqB,EAAIlrB,OAAQ,EAAGkB,OAAQioB,GAC/B+B,CACN,CAgCM,SAAUC,GACZhlB,EACAmkB,EACAvG,EACAhkB,GAEF,MAAMQ,EAAQ,IAAI0B,IAYlBkE,EAAW7E,SAAQ,CAAC8pB,EAAW5pB,KAC7B,MAAMxB,OAAEA,EAAMgG,OAAEA,GAAWolB,GACrBjC,cAAEA,GAAkBK,GAAqCxjB,IACzDlF,KACJA,EACAd,OAAQqrB,EAASnqB,OACjBA,GACE+pB,GAAiCX,EAAY9oB,GAAM2nB,GAEjDnoB,EApBQ,CAAC2oB,IACf,MAAM7nB,EAAOpB,OAAOkpB,eAAeD,GAAYvnB,YACzCpB,EAAOT,EAAMyB,IAAIF,GACvB,GAAId,EACF,OAAOA,EAET,MAAMsqB,EAAU,IAAIxpB,EAAK/B,GAEzB,OADAQ,EAAMa,IAAIU,EAAMwpB,GACTA,CAAO,EAYDzpB,CAAQf,GACrB,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAKvE,OAAQ4E,GAAKD,EAAQ,CAC5C,MACMqqB,GAAavrB,EADPmB,EAAID,EACkB6iB,GAAe/iB,EAAKJ,kBAChD4qB,EAASrqB,EAAIkqB,EACb7O,EAAI1b,EAAK2qB,SAASD,EAAQA,EAASrC,GACzCnoB,EAAKI,IAAIob,EAAG+O,EACb,IAEL,CC7UA,SAASG,GAAuBhV,GAC9B,OAAOra,EAAaqa,IAAW/W,MAAMC,QAAQ8W,IAN/C,SAAuBA,GACrB,MAAMiV,EAAMjV,EACZ,OAAOra,EAAasvB,EAAI7qB,OAASnB,MAAMC,QAAQ+rB,EAAI7qB,KACrD,CAG0D8qB,CAAclV,EACxE,CAyCA,SAASmV,GAAgCC,GACvC,OAAQA,GACN,IAAK,KAAM,MAAO,KAClB,IAAK,KAAM,MAAO,KAClB,QAAS,MAAO,KAEpB,CAEA,MAAMC,GAA8D,CAClE,SAAU1D,UACV,SAAUG,WACV,QAASH,UACT,QAASG,WACT,UAAWC,WACX,UAAWjrB,YACX,SAAUirB,WACV,SAAUjrB,YACV,UAAWN,WACX,UAAWE,YACX,SAAUF,WACV,SAAUE,YACV,UAAWI,YACX,UAAWF,cAGP0uB,GAAmB,wBAEzB,SAASC,GAAqBjmB,GAE5B,MAAM,CAAGkmB,EAAUC,EAAMC,GAAYJ,GAAiB3T,KAAKrS,GAErDqmB,EAAcH,EAAS3vB,OACvB+vB,EAAkBrN,SAASkN,GAAQ,EAIzC,MAAO,CACLD,WACAG,cACAC,kBACAC,gBAPsBF,EAAcC,EAQpCxmB,KAPWimB,GAAoB,GAAGI,IAAOC,KAS7C,CAMgB,SAAAI,GAAyBzH,EAAqB0H,GAC5D,MAAO,CACL1H,EAAQK,MACRL,EAAQM,OACRN,EAAQE,oBACR9kB,KAAI+e,GAAKxY,KAAKW,IAAI,EAAGX,KAAKiB,MAAMuX,EAAI,GAAKuN,KAC7C,CAKA,SAASC,GACP9G,EACAb,EACArO,EACAqT,GAEA,MAAMjpB,EAzGR,SAAsBoe,EAA0BlZ,GAC9C,GAAI3J,EAAa6iB,GACf,OAAOA,EAET,MAAMpZ,KAAEA,GAASmmB,GAAqBjmB,GACtC,OAAO,IAAIF,EAAKoZ,EAClB,CAmGeyN,CAAcjW,EAAuB5V,MAAQ4V,EAAQqO,EAAQ/e,QAEpEjJ,EAAOyvB,GAAyBzH,EADrB,IAEXwH,gBAAEA,GAAoBN,GAAqBlH,EAAQ/e,QACnD4mB,EAAS7C,EAAQ6C,QAAU,CAAC,EAAG,EAAG,GACxChH,EAAOsC,MAAM2E,aACX,CAAE9H,UAAS6H,UACX9rB,EACA,CAAEgsB,YAAaP,EAAkBxvB,EAAK,GAAIgwB,aAAchwB,EAAK,IAC7DA,EAEJ,CAKM,SAAUiwB,GACZpH,EACAb,EACAkI,EACAlD,EAA8B,CAAA,GAEhCkD,EAAQ3rB,SAAQ,CAACoV,EAAQwW,KACvB,MAAMN,EAAS,CAAC,EAAG,EAAGM,GAASnD,EAAQ/C,gBAAkB,IACzD,GAAI0E,GAAuBhV,GACzBgW,GAAoB9G,EAAQb,EAASrO,EAAgC,CAAEkW,eAClE,CACL,MAAMpQ,EAAI9F,GACJyW,MAACA,EAAKC,mBAAEA,EAAkBC,WAAEA,GAActD,EAChDnE,EAAOsC,MAAMoF,2BACX,CAAE5W,OAAQ8F,EAAG2Q,SACb,CAAEpI,UAASqI,qBAAoBC,aAAYT,UAC3CW,GAAkB/Q,EAAGuN,GAExB,KAGChF,EAAQgC,cAAgB,GAC1BpB,GAAeC,EAAQb,EAE3B,CAgCgB,SAAAwI,GAAkB7W,EAAuBqT,GACvD,GAAIrT,aAAkB8W,iBACpB,MAAO,CAAC9W,EAAO+W,WAAY/W,EAAOgX,YAAa,GAC1C,CACL,MAAMC,EAAyBjX,GACzB0O,MAAEA,EAAKC,OAAEA,GAAWsI,EAC1B,GAAIvI,EAAQ,GAAKC,EAAS,IAAMqG,GAAuBhV,GAErD,MAAO,CAAC0O,EAAOC,EAAQ,GAEzB,MAAMrf,EAAS+jB,EAAQ/jB,QAAU,cAC3BumB,gBAAEA,EAAeD,gBAAEA,GAAoBL,GAAqBjmB,GAC5DlF,EAAOzE,EAAaqa,IAAW/W,MAAMC,QAAQ8W,GAC9CA,EACCA,EAAuB5V,KAK7B,OA5LJ,SAAyBskB,EAA2BC,EAA4BxoB,EAAqBmoB,EAAqC,MACxI,GAAInoB,EAAc,GAAM,EACtB,MAAM,IAAIwD,MAAM,0BAElB,GAAK+kB,GAAUC,GASR,GAAKA,GAKL,IAAKD,IACVA,EAAQvoB,EAAcwoB,GACV,EACV,MAAM,IAAIhlB,MAAM,+BANlB,IADAglB,EAASxoB,EAAcuoB,GACV,EACX,MAAM,IAAI/kB,MAAM,8BAZG,CACrB,MAAMtD,EAAO2J,KAAKc,KAAK3K,GAA6B,SAAdmoB,EAAuB,EAAI,IAC7DjoB,EAAO,GAAM,GACfqoB,EAAQroB,EACRsoB,EAAStoB,IAETqoB,EAAQvoB,EACRwoB,EAAS,EAEZ,CAWD,MAAMuI,EAAQ/wB,EAAcuoB,EAASC,EACrC,GAAIuI,EAAQ,EACV,MAAM,IAAIvtB,MAAM,0BAElB,MAAO,CAAC+kB,EAAQC,EAAQuI,EAC1B,CA+JWC,CAAgBzI,EAAOC,GAJbhpB,EAAayE,GACvBA,EAAoBpE,WACnBoE,EAAkBvE,OAAS+vB,GACJC,EAEhC,CACH,CAyBM,SAAUuB,GACZlI,EACAqH,EACAlD,EAAgC,CAAA,GAGlC,MAAMhtB,EAAOwwB,GAAkBN,EAAQ,GAAIlD,GAC3ChtB,EAAK,GAAKA,EAAK,GAAK,EAAIA,EAAK,GAAKkwB,EAAQ1wB,OAE1C,MAAMwoB,EAAUa,EAAOmI,cAAc,CACnC/I,UAAW6G,GAAgC9B,EAAQ/E,WACnDhf,OAAQ+jB,EAAQ/jB,QAAU,aAC1B+gB,cAAegD,EAAQhD,cACjBgD,EAAQhD,cACRgD,EAAQiE,KAAOzI,GAAaxoB,GAAQ,EAC1CA,OACAkxB,OAAQlE,EAAQkE,OAAS,GAClBC,gBAAgBC,gBAChBD,gBAAgBE,SAChBF,gBAAgBG,oBAKzB,OAFArB,GAAqBpH,EAAQb,EAASkI,EAASlD,GAExChF,CACT,CAqCOuJ,eAAeC,GAAgBC,EAAazE,EAA8B,IAC/E,MAAM0E,QAAYC,MAAMF,GAClBG,QAAaF,EAAIE,OACjBC,EAA0B,IAC3B7E,UACkChpB,IAAjCgpB,EAAQ8E,sBAAsC,CAACA,qBAAsB,SAE3E,aAAaC,kBAAkBH,EAAMC,EACvC,CAuBON,eAAeS,GAAwBnJ,EAAmBoJ,EAAgBjF,EAA0C,CAAA,GAIzH,OAAO+D,GAAyBlI,QADPqJ,QAAQC,IAAIF,EAAK7uB,KAAIquB,GAAOD,GAAgBC,MACjBzE,EACtD,OCjUaoF,GACXxF,WACAyF,OAAS,EACTjG,cAEA,WAAA/mB,CAAY9F,EAAQ6sB,GAClB9mB,KAAKsnB,WAAartB,EAClB+F,KAAK8mB,cAAgBA,CACtB,CACD,eAAItsB,GACF,OAAOwF,KAAKsnB,WAAWptB,OAAS8F,KAAK8mB,aACtC,CACD,IAAAhS,IAAQrW,GACN,IAAK,MAAMkD,KAASlD,EAClB,GAAInB,MAAMC,QAAQoE,IAAU3H,EAAa2H,GAAQ,CAC/C,MAAM3C,EAAUP,EAChBuB,KAAKsnB,WAAWvoB,IAAIC,EAASgB,KAAK+sB,QAClC/sB,KAAK+sB,QAAU/tB,EAAQ9E,MACxB,MACC8F,KAAKsnB,WAAWtnB,KAAK+sB,UAAYprB,CAGtC,CACD,KAAAqrB,CAAM/W,EAAQ,GACZjW,KAAK+sB,OAAS9W,CACf,EAuBH,SAASgX,GAA2DnG,EAAuBtsB,EAAqBiJ,GAC9G,OAAO,IAAIqpB,GAAkB,IAAIrpB,EAAKqjB,EAAgBtsB,GAAiCssB,EACzF,CAwMA,MAAMoG,GAAoB,CACxB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IA6FI,SAAAC,GACZC,EAAe,EACfC,EAAY,EACZrK,EAAS,EACTsK,EAAqB,GACrBC,EAAuB,EACvBC,GAAS,EACTC,GAAY,GACd,GAAIH,EAAqB,EACvB,MAAM,IAAItvB,MAAM,2CAGlB,GAAIuvB,EAAuB,EACzB,MAAM,IAAIvvB,MAAM,6CAGlB,MAAM0vB,GAASF,EAAS,EAAI,IAAMC,EAAY,EAAI,GAE5CE,GAAeL,EAAqB,IAAMC,EAAuB,EAAIG,GACrEE,EAAYX,GAA0B,EAAGU,EAAa1yB,cACtD4yB,EAAYZ,GAA0B,EAAGU,EAAa1yB,cACtD6yB,EAAYb,GAA0B,EAAGU,EAAa1yB,cACtD8yB,EAAYd,GAA0B,EAAGK,GAAsBC,EAAuBG,EAAQ,GAAK,EAAGvyB,aAEtG6yB,EAAkBV,EAAqB,EAGvCW,EAAQ5pB,KAAKO,MAAMwoB,EAAeC,EAAWrK,GAC7CkL,EAAW7pB,KAAKY,IAAIgpB,GACpBE,EAAW9pB,KAAKsB,IAAIsoB,GAGpBvI,EAAM6H,GAAwBE,EAAY,EAAI,GAEpD,IAAK,IAAIW,EAHKZ,GAAU,EAAI,EAGPY,GAAM1I,IAAO0I,EAAI,CACpC,IAEIC,EAFAxR,EAAIuR,EAAKb,EACTe,EAAItL,EAASnG,EAEbuR,EAAK,GACPE,EAAI,EACJzR,EAAI,EACJwR,EAAajB,GACJgB,EAAKb,GACde,EAAItL,EACJnG,EAAI,EACJwR,EAAahB,GAEbgB,EAAajB,EACmBgB,EAAKb,GAAlCF,EAAYD,IAEL,IAARgB,GAAaA,IAAOb,EAAuB,IAC7Cc,EAAa,EACbxR,EAAI,GAENyR,GAAKtL,EAAS,EACd,IAAK,IAAIuL,EAAK,EAAGA,EAAKP,IAAmBO,EAAI,CAC3C,MAAM5oB,EAAMtB,KAAKsB,IAAI4oB,EAAKlqB,KAAKa,GAAK,EAAIooB,GAClCroB,EAAMZ,KAAKY,IAAIspB,EAAKlqB,KAAKa,GAAK,EAAIooB,GACxCM,EAAU9Y,KAAKnP,EAAM0oB,EAAYC,EAAGrpB,EAAMopB,GACtCD,EAAK,EACPP,EAAQ/Y,KAAK,GAAI,EAAG,GACXsZ,EAAKb,EACdM,EAAQ/Y,KAAK,EAAG,EAAG,GACK,IAAfuZ,EACTR,EAAQ/Y,KAAK,EAAG,EAAG,GAEnB+Y,EAAQ/Y,KAAKnP,EAAMuoB,EAAUC,EAAUlpB,EAAMipB,GAE/CJ,EAAUhZ,KAAMyZ,EAAKjB,EAAqB,EAAIzQ,EAC/C,CACF,CAED,IAAK,IAAIuR,EAAK,EAAGA,EAAKb,EAAuBG,IAASU,EACpD,KAAW,IAAPA,GAAYZ,GAAUY,IAAOb,EAAuBG,EAAQ,GAAKD,GAGrE,IAAK,IAAIc,EAAK,EAAGA,EAAKjB,IAAsBiB,EAC1CR,EAAQjZ,KAAKkZ,GAAmBI,EAAK,GAAK,EAAIG,EACjCP,GAAmBI,EAAK,GAAK,EAAIG,EACjCP,GAAmBI,EAAK,GAAK,EAAIG,GAC9CR,EAAQjZ,KAAKkZ,GAAmBI,EAAK,GAAK,EAAIG,EACjCP,GAAmBI,EAAK,GAAK,EAAIG,EACjCP,GAAmBI,EAAK,GAAK,EAAIG,GAIlD,MAAO,CACLC,SAAUZ,EAAUtG,WACpBmH,OAAQZ,EAAQvG,WAChBoH,SAAUZ,EAAUxG,WACpByG,QAASA,EAAQzG,WAErB,CAQA,SAASqH,GAAcC,EAAmBC,EAAoB,IAC5DA,EAAUA,GAAW,GACrB,MAAMpwB,EAAiB,GACvB,IAAK,IAAI8vB,EAAK,EAAGA,EAAKK,EAAQ10B,OAAQq0B,GAAM,EAAG,CAC7C,MAAMO,EAAYF,EAAQL,GACpBQ,EAAUH,EAAQ9L,MAAMyL,EAAK,EAAGA,EAAK,GAC3CQ,EAAQja,QAAQ+Z,GAChB,IAAK,IAAIG,EAAK,EAAGA,EAAKF,IAAaE,EACjCvwB,EAAKqW,QAAQia,EAEhB,CACD,OAAOtwB,CACT,wFAUE,MAAMmvB,EAAY,CAEhB,EAAK,EAAI,EACT,EAAG,IAAM,EACT,GAAM,EAAI,EACV,EAAG,IAAM,EACT,GAAI,IAAM,EACV,GAAM,EAAI,EAGV,GAAM,EAAI,EACV,GAAK,GAAK,EACV,IAAO,EAAI,EACX,GAAK,GAAK,EACV,IAAM,GAAK,EACX,IAAO,EAAI,EAGX,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,EAGR,EAAK,EAAI,GACV,GAAM,EAAI,GACT,EAAG,IAAM,GACT,EAAG,IAAM,GACV,GAAM,EAAI,GACV,GAAI,IAAM,GAGV,GAAM,EAAI,GACX,IAAO,EAAI,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GACX,IAAO,EAAI,GACX,IAAM,GAAK,GAGV,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GACV,GAAK,GAAK,GAGT,EAAK,EAAK,EACZ,IAAO,EAAK,EACZ,IAAO,EAAI,GACT,EAAK,EAAK,EACZ,IAAO,EAAI,GACT,EAAK,EAAI,GAGX,IAAO,EAAK,EACZ,IAAM,GAAM,EACZ,IAAM,GAAK,GACX,IAAO,EAAK,EACZ,IAAM,GAAK,GACX,IAAO,EAAI,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,IAAM,GAAK,GACX,GAAM,GAAM,EACZ,IAAM,GAAK,GACX,IAAM,GAAM,EAGZ,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAM,EACZ,GAAM,GAAK,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAM,EACZ,GAAM,GAAK,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAM,EACZ,GAAM,GAAK,GAGX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAM,GAAK,GACX,GAAM,GAAM,EAGZ,GAAM,GAAM,EACZ,GAAK,IAAM,GACX,GAAM,GAAK,GACX,GAAM,GAAM,EACZ,GAAK,IAAO,EACZ,GAAK,IAAM,GAGX,EAAK,IAAO,EACZ,EAAK,IAAM,GACX,GAAK,IAAM,GACX,EAAK,IAAO,EACZ,GAAK,IAAM,GACX,GAAK,IAAO,EAGZ,EAAK,EAAK,EACV,EAAK,EAAI,GACT,EAAG,IAAM,GACT,EAAK,EAAK,EACV,EAAG,IAAM,GACT,EAAG,IAAO,GAqINC,EAAUc,GAAc,CAI5B,GAAI,EAAG,EAAG,EAKV,GAAI,EAAG,GAAI,EAGX,EAAG,EAAG,EAAG,EAGT,EAAG,EAAG,EAAG,EAGT,EAAG,GAAI,EAAG,EAGV,EAAG,EAAG,EAAG,EAGT,EAAG,EAAG,EAAG,EAGT,EAAG,EAAG,EAAG,EAGT,EAAG,GAAI,EAAG,EAGV,EAAG,EAAG,EAAG,EAGT,EAAG,GAAI,EAAG,EAGV,GAAI,EAAG,EAAG,IAGNM,EAASN,GAAc,CAIzB,GAAI,IAAM,GAAI,IAKd,GAAI,GAAI,GAAI,IAGZ,EAAG,GAAI,IAAK,IAGZ,EAAG,IAAK,IAAK,GAGb,EAAG,IAAK,IAAK,GAGb,EAAG,IAAK,IAAK,GAGb,EAAG,GAAI,IAAK,IAGZ,EAAG,IAAK,GAAI,IAGZ,EAAG,GAAI,IAAK,IAGZ,EAAG,IAAK,IAAK,GAGb,EAAG,GAAI,IAAK,IAGZ,EAAG,IAAK,IAAK,KACd,CAAC,MAEEO,EAAWtB,EAAU1zB,OAAS,EAE9ButB,EAAS,CACb+G,SAAUvB,GAA0B,EAAGiC,EAAUj0B,cACjDyzB,SAAUzB,GAA0B,EAAIiC,EAAUj0B,cAClDwzB,OAAQxB,GAA0B,EAAGiC,EAAUj0B,cAC/Ck0B,MAAOlC,GAA0B,EAAGiC,EAAU/I,YAC9C4H,QAASd,GAA0B,EAAGiC,EAAW,EAAG/zB,cAGtDssB,EAAO+G,SAAS1Z,KAAK8Y,GACrBnG,EAAOiH,SAAS5Z,KAjOE,CAEhB,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IAGN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IAGN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IAGN,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,IAmGL2S,EAAOgH,OAAO3Z,KAAK+Y,GACnBpG,EAAO0H,MAAMra,KAAKma,GAElB,IAAK,IAAIV,EAAK,EAAGA,EAAKW,IAAYX,EAChC9G,EAAOsG,QAAQjZ,KAAKyZ,GAGtB,OAAOlwB,OAAOmkB,YAAYnkB,OAAOC,QAAQmpB,GAAQ3pB,KAAI,EAAEokB,EAAGrF,KAAO,CAACqF,EAAGrF,EAAEyK,cACzE,yBAcgB,SACZ8H,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACF,GAAIF,GAAoB,EACtB,MAAM,IAAIxxB,MAAM,+BAGlB,MAEM2xB,EAAcD,EAAYD,EAC1B9B,EAAuC,GAAxB6B,EAAmB,GAAU,EAC5C5B,EAAcX,GAA0B,EAAGU,EAAa1yB,cACxD4yB,EAAcZ,GAA0B,EAAGU,EAAa1yB,cACxD6yB,EAAcb,GAA0B,EAAGU,EAAa1yB,cAE9D,SAAS20B,EAAKjQ,EAAWrlB,EAAW6f,GAClC,OAAOwF,GAAKrlB,EAAIqlB,GAAKxF,CACtB,CAED,SAAS0V,EAAKlQ,EAAarlB,GACzB,OAAOqlB,EAAE7hB,KAAI,CAAC+e,EAAG/d,IAAM+d,EAAIviB,EAAEwE,IAC9B,CAED,SAASgxB,EAAUnQ,EAAarlB,GAC9B,OAAOqlB,EAAE7hB,KAAI,CAAC+e,EAAG/d,IAAM+d,EAAIviB,EAAEwE,IAC9B,CAED,SAASixB,EAAUC,EAAmBC,EAAWC,EAAsBC,EAAqBC,EAAeC,GACzG,IAAK,IAAIC,EAAI,EAAGA,GAAKd,EAAkBc,IAAK,CAC1C,MAAMC,EAAQN,IACRpT,EAAIyT,EAAId,EACRgB,EAAwB,GAAfD,EAAQ,IACjBE,GAAShB,EAAe5S,EAAI8S,GAAgBtrB,KAAKa,GACjDiV,EAAI9V,KAAKsB,IAAI8qB,GACbva,EAAI7R,KAAKY,IAAIwrB,GACbC,EAASd,EAAKR,EAAgBY,EAAW7V,GACzCwW,EAAKH,EAAQjB,EACbqB,EAAK1a,EAAIkZ,EACTyB,EAAK1W,EAAIuW,EACf9C,EAAU9Y,KAAK6b,EAAIC,EAAIC,GACvB,MAAM3Q,EAAI2P,EAAKC,EAAU,CAAC,EAAG3V,EAAGjE,GAAIga,GAAaC,GACjDtC,EAAQ/Y,KAAKoL,GACb4N,EAAUhZ,KAAKyb,EAAQH,EAAQC,EAAMxT,EACtC,CACF,CAGD,IAAK,IAAIoT,EAAI,EAAGA,EAxCU,EAwCaA,IAAK,CAC1C,MAAMM,EAA8C,GAArCN,EAAK,EAAyB,IAC7CF,EAAUV,EAAaY,EAAG,CAAC,EAAG,EAAG,GAAI,CAAC,EAAO,EAAG,GAAI,EAAG,GACvDF,EAAUV,EAAaY,EAAG,CAAC,EAAG,EAAG,GAAI,CAACM,EAAO,EAAG,GAAI,EAAG,GACvDR,EAAUT,EAAaW,EAAG,CAAC,EAAG,EAAG,GAAI,CAAC,EAAO,EAAG,GAAI,EAAG,GACvDF,EAAUT,EAAaW,EAAG,CAAC,EAAG,EAAG,GAAI,CAACM,EAAO,EAAG,GAAI,EAAG,EACxD,CAGD,MAAMxC,EAAUd,GAA0B,EAAuB,EAAnBuC,EAAoB,EAA6Br0B,aAE/F,SAAS21B,EAAcC,EAAuBC,GAC5C,IAAK,IAAIV,EAAI,EAAGA,EAAId,IAAoBc,EAEtCvC,EAAQjZ,KACJic,EAAgBT,EAAI,EACpBS,EAAgBT,EAAI,EACpBU,EAAiBV,EAAI,GAGzBvC,EAAQjZ,KACJic,EAAgBT,EAAI,EACpBU,EAAiBV,EAAI,EACrBU,EAAiBV,EAAI,EAE5B,CAED,MAAMW,EAAkBzB,EAAmB,EAU3C,OARAsB,EAAgC,EAAlBG,EAAuC,EAAlBA,GAEnCH,EAAgC,EAAlBG,EAAuC,EAAlBA,GAEnCH,EAAgC,EAAlBG,EAAuC,EAAlBA,GAEnCH,EAAgC,EAAlBG,EAAuC,EAAlBA,GAE5B,CACLzC,SAAUZ,EAAUtG,WACpBmH,OAAUZ,EAAQvG,WAClBoH,SAAUZ,EAAUxG,WACpByG,QAAUA,EAAQzG,WAEtB,qBArqBgB,SAAmB5sB,EAAO,GACxC,MAAMwnB,EAAIxnB,EAAO,EAEXw2B,EAAiB,CACrB,EAAEhP,GAAIA,GAAIA,GACV,EAAEA,GAAIA,GAAIA,GACV,EAAEA,GAAIA,GAAIA,GACV,EAAEA,GAAIA,GAAIA,GACV,EAAEA,GAAIA,GAAIA,GACV,EAAEA,GAAIA,GAAIA,GACV,EAAEA,GAAIA,GAAIA,GACV,EAAEA,GAAIA,GAAIA,IAGNiP,EAAc,CAClB,CAAC,EAAI,EAAI,GACT,EAAE,EAAG,EAAI,GACT,CAAC,EAAI,EAAI,GACT,CAAC,GAAK,EAAG,GACT,CAAC,EAAI,EAAI,GACT,CAAC,EAAI,GAAK,IAGNC,EAAW,CACf,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAIAxD,EAAYX,GAA0B,EADxB,GACwChyB,cACtD4yB,EAAYZ,GAA0B,EAFxB,GAEwChyB,cACtD6yB,EAAYb,GAA0B,EAHxB,GAGyChyB,cACvD8yB,EAAYd,GAA0B,EAAG,GAAO9xB,aAEtD,IAAK,IAAIk2B,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,MAAMC,EAAcpE,GAAkBmE,GACtC,IAAK,IAAIxU,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,MAAM2R,EAAW0C,EAAeI,EAAYzU,IACtC4R,EAAS0C,EAAYE,GACrBE,EAAKH,EAASvU,GAIpB+Q,EAAU9Y,KAAK0Z,GACfX,EAAQ/Y,KAAK2Z,GACbX,EAAUhZ,KAAKyc,EAEhB,CAED,MAAM5zB,EAAS,EAAI0zB,EACnBtD,EAAQjZ,KAAKnX,EAAS,EAAGA,EAAS,EAAGA,EAAS,GAC9CowB,EAAQjZ,KAAKnX,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAC/C,CAED,MAAO,CACL6wB,SAAUZ,EAAUtG,WACpBmH,OAAQZ,EAAQvG,WAChBoH,SAAUZ,EAAUxG,WACpByG,QAASA,EAAQzG,WAErB,yBAqnBM,SACFoJ,EAAS,EACT1N,EAAS,EACTsK,EAAqB,GACrBC,EAAuB,EACvBC,GAAS,EACTC,GAAY,GACd,OAAON,GACHuD,EACAA,EACA1N,EACAsK,EACAC,EACAC,EACAC,EACN,qBAwGM,SACFiD,EAAS,EACTc,EAAY,GACZC,EAAS,EACTnC,EAAc,EACdoC,EAAa,GACf,GAAIF,EAAY,EACd,MAAM,IAAIxzB,MAAM,gCAKlB,MAAM2vB,GAAe6D,EAAY,IAAMC,EAAS,GAE1C7D,EAAYX,GAA0B,EAAGU,EAAa1yB,cACtD4yB,EAAYZ,GAA0B,EAAGU,EAAa1yB,cACtD6yB,EAAYb,GAA0B,EAAGU,EAAa1yB,cACtD8yB,EAAYd,GAA0B,EAAGwE,EAASD,EAAY,EAAGr2B,aAEvE,IAAIw2B,EAAa,EACjB,MAAMC,EAAalB,EAASpB,EACtBuC,EAAiBL,EAAY,EAGnC,IAAK,IAAIM,EAAQ,EAAGA,GAASL,IAAUK,EAAO,CAC5C,MAAMC,EAAczC,EAAcsC,EAAavtB,KAAKe,IAAI0sB,EAAQL,EAAQC,GAExE,IAAK,IAAI5yB,EAAI,EAAGA,GAAK0yB,IAAa1yB,EAAG,CACnC,MAAMkzB,EAAQ,EAAM3tB,KAAKa,GAAKpG,EAAI0yB,EAC5BvB,EAAI8B,EAAc1tB,KAAKY,IAAI+sB,GAC3B1B,EAAIyB,EAAc1tB,KAAKsB,IAAIqsB,GAKjC,GAHApE,EAAU9Y,KAAKmb,EAAG,EAAGK,GACrBzC,EAAQ/Y,KAAK,EAAG,EAAG,GACnBgZ,EAAUhZ,KAAK,EAAKhW,EAAI0yB,EAAYM,EAAQL,GACxCK,EAAQ,GAAKhzB,IAAM0yB,EAAW,CAIhC,MAAM7R,EAAIgS,GAAc7yB,EAAI,GACtBxE,EAAIq3B,EAAa7yB,EACjBoX,EAAIyb,EAAa7yB,EAAI+yB,EACrBI,EAAIN,GAAc7yB,EAAI,GAAK+yB,EAGjC9D,EAAQjZ,KAAK6K,EAAGrlB,EAAG4b,GACnB6X,EAAQjZ,KAAK6K,EAAGzJ,EAAG+b,EACpB,CACF,CAEDN,GAAcH,EAAY,CAC3B,CAED,MAAO,CACLhD,SAAUZ,EAAUtG,WACpBmH,OAAQZ,EAAQvG,WAChBoH,SAAUZ,EAAUxG,WACpByG,QAASA,EAAQzG,WAErB,+BAngCIvE,EAAQ,EACRwI,EAAQ,EACR2G,EAAoB,EACpBC,EAAoB,GACtB,MAAMxE,GAAeuE,EAAoB,IAAMC,EAAoB,GAC7DvE,EAAYX,GAA0B,EAAGU,EAAa1yB,cACtD4yB,EAAUZ,GAA0B,EAAGU,EAAa1yB,cACpD6yB,EAAYb,GAA0B,EAAGU,EAAa1yB,cAE5D,IAAK,IAAIq1B,EAAI,EAAGA,GAAK6B,EAAmB7B,IACtC,IAAK,IAAIL,EAAI,EAAGA,GAAKiC,EAAmBjC,IAAK,CAC3C,MAAM5P,EAAI4P,EAAIiC,EACRrV,EAAIyT,EAAI6B,EACdvE,EAAU9Y,KACNiO,EAAQ1C,EAAY,GAAR0C,EACZ,EACAwI,EAAQ1O,EAAY,GAAR0O,GAChBsC,EAAQ/Y,KAAK,EAAG,EAAG,GACnBgZ,EAAUhZ,KAAKuL,EAAGxD,EACnB,CAGH,MAAMuV,EAAiBF,EAAoB,EACrCnE,EAAUd,GACZ,EAAGiF,EAAoBC,EAAoB,EAAGh3B,aAElD,IAAK,IAAIm1B,EAAI,EAAGA,EAAI6B,EAAmB7B,IACrC,IAAK,IAAIL,EAAI,EAAGA,EAAIiC,EAAmBjC,IAErClC,EAAQjZ,MACHwb,EAAI,GAAK8B,EAAiBnC,GAC1BK,EAAI,GAAK8B,EAAiBnC,GAC1BK,EAAI,GAAK8B,EAAiBnC,EAAI,GAGnClC,EAAQjZ,MACHwb,EAAI,GAAK8B,EAAiBnC,GAC1BK,EAAI,GAAK8B,EAAiBnC,EAAI,GAC9BK,EAAI,GAAK8B,EAAiBnC,EAAI,GAIvC,MAAO,CACLzB,SAAUZ,EAAUtG,WACpBmH,OAAQZ,EAAQvG,WAChBoH,SAAUZ,EAAUxG,WACpByG,QAASA,EAAQzG,WAErB,uBAoBgB,SACZoJ,EAAS,EACT2B,EAAmB,GACnBC,EAAqB,GACrBC,EAAyB,EACzBC,EAAuBnuB,KAAKa,GAC5ButB,EAA0B,EAC1BC,EAAkC,EAAVruB,KAAKa,IAC/B,GAAImtB,GAAoB,GAAKC,GAAsB,EACjD,MAAM,IAAIt0B,MAAM,qDAGlB,MAAM20B,EAAWH,EAAuBD,EAClCK,EAAYF,EAAwBD,EAKpC9E,GAAe0E,EAAmB,IAAMC,EAAqB,GAC7D1E,EAAYX,GAA0B,EAAGU,EAAa1yB,cACtD4yB,EAAYZ,GAA0B,EAAGU,EAAa1yB,cACtD6yB,EAAYb,GAA0B,EAAGU,EAAa1yB,cAG5D,IAAK,IAAIqzB,EAAI,EAAGA,GAAKgE,EAAoBhE,IACvC,IAAK,IAAI2B,EAAI,EAAGA,GAAKoC,EAAkBpC,IAAK,CAE1C,MAAM5P,EAAI4P,EAAIoC,EACRxV,EAAIyR,EAAIgE,EACRN,EAAQY,EAAYvS,EAAIoS,EACxBI,EAAMF,EAAW9V,EAAI0V,EACrBO,EAAWzuB,KAAKsB,IAAIqsB,GACpBe,EAAW1uB,KAAKY,IAAI+sB,GACpBgB,EAAS3uB,KAAKsB,IAAIktB,GAElBI,EAAKF,EAAWC,EAChBE,EAFS7uB,KAAKY,IAAI4tB,GAGlBM,EAAKL,EAAWE,EACtBpF,EAAU9Y,KAAK4b,EAASuC,EAAIvC,EAASwC,EAAIxC,EAASyC,GAClDtF,EAAQ/Y,KAAKme,EAAIC,EAAIC,GACrBrF,EAAUhZ,KAAK,EAAIuL,EAAGxD,EACvB,CAGH,MAAMuW,EAAiBf,EAAmB,EACpCtE,EAAUd,GAA0B,EAAGoF,EAAmBC,EAAqB,EAAGn3B,aACxF,IAAK,IAAI80B,EAAI,EAAGA,EAAIoC,EAAkBpC,IACpC,IAAK,IAAI3B,EAAI,EAAGA,EAAIgE,EAAoBhE,IAEtCP,EAAQjZ,MACHwZ,EAAI,GAAK8E,EAAiBnD,GAC1B3B,EAAI,GAAK8E,EAAiBnD,EAAI,GAC9B3B,EAAI,GAAK8E,EAAiBnD,GAG/BlC,EAAQjZ,MACHwZ,EAAI,GAAK8E,EAAiBnD,GAC1B3B,EAAI,GAAK8E,EAAiBnD,EAAI,GAC9B3B,EAAI,GAAK8E,EAAiBnD,EAAI,GAIvC,MAAO,CACLzB,SAAUZ,EAAUtG,WACpBmH,OAAQZ,EAAQvG,WAChBoH,SAAUZ,EAAUxG,WACpByG,QAASA,EAAQzG,WAErB,sBAquBgB,SACZoJ,EAAS,EACTnB,EAAY,IACZjC,EAAqB,GACrB+F,EAAmB,GACnBC,EAAa,EACbC,EAAqB,EAAVlvB,KAAKa,IAClB,GAAIooB,EAAqB,EACvB,MAAM,IAAItvB,MAAM,2CAGlB,GAAIq1B,EAAmB,EACrB,MAAM,IAAIr1B,MAAM,6CAElB,MAAMw1B,EAAQD,EAAWD,EAEnBG,EAAcnG,EAAqB,EACnCoG,EAAcL,EAAmB,EACjC1F,EAAc8F,EAAcC,EAC5B9F,EAAcX,GAA0B,EAAGU,EAAa1yB,cACxD4yB,EAAcZ,GAA0B,EAAGU,EAAa1yB,cACxD6yB,EAAcb,GAA0B,EAAGU,EAAa1yB,cACxD8yB,EAAcd,GAA0B,EAAG,EAAmB,EAAyB,EAAG9xB,aAEhG,IAAK,IAAI2nB,EAAQ,EAAGA,EAAQ4Q,IAAa5Q,EAAO,CAC9C,MAAMjG,EAAIiG,EAAQuQ,EACZM,EAAa9W,EAAIxY,KAAKa,GAAK,EAC3B0uB,EAAWvvB,KAAKsB,IAAIguB,GACpBtF,EAAaqC,EAASkD,EAAWrE,EACjCsE,EAAKxvB,KAAKY,IAAI0uB,GACdrF,EAAIuF,EAAKtE,EACf,IAAK,IAAIuE,EAAO,EAAGA,EAAOL,IAAeK,EAAM,CAC7C,MAAMzT,EAAIyT,EAAOxG,EACXyG,EAAYT,EAAajT,EAAImT,EAC7BQ,EAAO3vB,KAAKsB,IAAIouB,GAChBE,EAAO5vB,KAAKY,IAAI8uB,GAChB9D,EAAI+D,EAAO3F,EACXiC,EAAI2D,EAAO5F,EACX6F,EAAKF,EAAOJ,EACZO,EAAKF,EAAOL,EAClBhG,EAAU9Y,KAAKmb,EAAG3B,EAAGgC,GACrBzC,EAAQ/Y,KAAKof,EAAIL,EAAIM,GACrBrG,EAAUhZ,KAAKuL,EAAG,EAAIxD,EACvB,CACF,CAED,IAAK,IAAIiG,EAAQ,EAAGA,EAAQuQ,IAAoBvQ,EAC9C,IAAK,IAAIgR,EAAO,EAAGA,EAAOxG,IAAsBwG,EAAM,CACpD,MAAMM,EAAiB,EAAIN,EACrBO,EAAiB,EAAIvR,EAC3BiL,EAAQjZ,KAAK2e,EAAc3Q,EAAiBgR,EAC/BL,EAAcY,EAAiBP,EAC/BL,EAAc3Q,EAAiBsR,GAC5CrG,EAAQjZ,KAAK2e,EAAcY,EAAiBP,EAC/BL,EAAcY,EAAiBD,EAC/BX,EAAc3Q,EAAiBsR,EAC7C,CAGH,MAAO,CACL5F,SAAUZ,EAAUtG,WACpBmH,OAAUZ,EAAQvG,WAClBoH,SAAUZ,EAAUxG,WACpByG,QAAUA,EAAQzG,WAEtB,sDAt9BM,SAA+B5sB,EAAe,EAAG45B,EAAkB,EAAGC,EAAkB,GAE5F,MAAO,CACL/F,SAAU,CACR1H,cAAe,EACfroB,KAAM,CACJ61B,GAAW,GALjB55B,GAAQ,IAKmB65B,GAAW,EAAI75B,EACpC45B,EAAW,EAAI55B,EAAM65B,GAAW,EAAI75B,EACpC45B,GAAW,EAAI55B,EAAM65B,EAAW,EAAI75B,EACpC45B,EAAW,EAAI55B,EAAM65B,EAAW,EAAI75B,IAGxC+zB,OAAQ,CACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GAERC,SAAU,CACR,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,GAELX,QAAS,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAE9B,oCP5GIrwB,YACA82B,WAEA,WAAAz0B,CAAY00B,GACRz0B,KAAKtC,YAAc,IAAItD,YAAYq6B,GACnCz0B,KAAKw0B,WAAa,CACrB,CACD,KAAA/5B,CAAMi6B,GQhCyB,IAAYC,ERiCvC30B,KAAKw0B,aAAiCx0B,KAAKw0B,YQjCJG,ERiCgBD,GQjCuB,GAAKC,EAAY,GAAKA,CRkCvG,CACD,GAAAp4B,CAAIq4B,GACA50B,KAAKw0B,YAAcI,CACtB,CACD,OAAAp1B,CAA8BC,EAA6BjF,GACvD,MAAMmE,EAAO,IAAIc,EAAKO,KAAKtC,YAAasC,KAAKw0B,WAAYh6B,GAEzD,OADAwF,KAAKw0B,YAAc71B,EAAKtE,WACjBsE,CACV,yBMoJC,SACF4kB,EACAb,EACArO,EACAqT,EAA8B,CAAA,GAChCiD,GAAqBpH,EAAQb,EAAS,CAACrO,GAASqT,EAClD,sGD2NM,SAA+CnE,EAAmBkE,EAAgBC,EAAyB,CAAA,GAC/G,MAAMkE,EAASlE,EAAQkE,OAAS,GAE1B5D,cACJA,EAAaC,YACbA,GACET,GAA8BC,EAAQC,GAEpCmN,EAAU,GAChB,IAAIr6B,GAAe,EACfs6B,EAAY,EAChB,IAAK,MAAMhxB,WAACA,EAAU4d,YAAEA,KAAgBsG,EAAe,CACrD,MAAM+M,EAAUjxB,EACVkxB,EAAUD,EAAQ,IAClBjO,cAACA,GAAiBK,GAAqC6N,EAAQrxB,SAGnElF,KAAMw2B,EAAKp2B,OACXA,GACG+pB,GAAiCX,EAAY6M,GAAYhO,GAE1DtsB,EAAc,IAChBA,EAAcy6B,EAAM/6B,OAAS2E,GAG/B,MAAMnE,EAAOgnB,EAAclnB,EACrBL,EAASopB,EAAO2R,aAAa,CACjCtJ,MAAOA,EAAQuJ,eAAeC,OAC9B16B,OACA26B,kBAAkB,IAGd33B,EAAcvD,EAAOm7B,iBAC3B,GAAuB,IAAnBP,EAAQ76B,QAAgBwnB,IAAgBuT,EAAM12B,kBAAoBuoB,EAAe,CACtEO,GAA2B4N,EAAOv3B,GAC1CqB,IAAIk2B,EACV,MACCnM,GAAqBiM,EAAS9M,EAAYnF,MAAMgS,GAAYpT,EAAahkB,GAE3EvD,EAAOo7B,QACPV,EAAQ/f,KAAK3a,GACb26B,GAAaC,EAAQ76B,MACtB,CAED,MAAMs7B,EAA6C,CACjDh7B,cACAwtB,gBACA6M,WAGIY,EAAep3B,OAAOC,QAAQmpB,GAAQiO,MAAK,EAAEtN,KAAe3B,GAAU2B,KAC5E,GAAIqN,EAAc,CAChB,MAAM1H,EAAUrH,GAA6B+O,EAAa,GAAI,WACxDE,EAAcpS,EAAO2R,aAAa,CACtCx6B,KAAMqzB,EAAQ1zB,WACduxB,MAAOuJ,eAAeS,MAAQhK,EAC9ByJ,kBAAkB,IAERhO,GAA2B0G,EAAS4H,EAAYL,kBACxDv2B,IAAIgvB,GACR4H,EAAYJ,QAEZC,EAAqBG,YAAcA,EACnCH,EAAqBK,YAAc9H,aAAmB5yB,YAAc,SAAW,SAC/Eq6B,EAAqBh7B,YAAcuzB,EAAQ7zB,MAC5C,CAED,OAAOs7B,CACT,2BC9GOvJ,eAAsC1I,EAAmB4I,EAAazE,EAA0C,CAAA,GACrH,OAAOgF,GAAwBnJ,EAAQ,CAAC4I,GAAMzE,EAChD,yDAnEM,SACFnE,EACAlP,EACAqT,EAAgC,CAAA,GAClC,OAAO+D,GAAyBlI,EAAQ,CAAClP,GAASqT,EACpD,qMHjPM,SAAoCvJ,GACtC,MAAMiE,EAAU,IAAIlE,GAAYC,GAE1Bhe,EAAU9B,OAAOmkB,YAAYJ,EAAQjiB,QAAQrC,KAAIwI,IACnD,MAAMyZ,EAAOqC,EAAQxB,cAActa,GACnC,MAAO,CAACA,EAAOnI,KAAMokB,GAAWH,EAASrC,EAAK7c,QAAS6c,EAAKrlB,MAAM,KAGhE0jB,EAAW/f,OAAOmkB,YAAYJ,EAAQhE,SAAStgB,KAAIqP,IACrD,MAAM4S,EAAOqC,EAAQ3B,qBAAqBtT,GACpCkU,EAASc,GAAUC,EAASrC,EAAM,GAAG,GAG3C,OAFAsB,EAAOpE,QAAU8C,EAAK9C,QACtBoE,EAAOrE,MAAQ+C,EAAK/C,MACb,CAAC7P,EAAQhP,KAAMkjB,EAAO,KAWjC,MAAO,CACHlhB,UACA21B,SAVaz3B,OAAOmkB,YAAYJ,EAAQ3gB,QAAQ3D,KAAIqP,IACpD,MAAM4S,EAAOqC,EAAQ1B,qBAAqBvT,GACpCkU,EAASc,GAAUC,EAASrC,EAAM,GAAG,GAG3C,OAFAsB,EAAOpE,QAAU8C,EAAK9C,QACtBoE,EAAOrE,MAAQ+C,EAAK/C,MACb,CAAC7P,EAAQhP,KAAMkjB,EAAO,KAM7BjD,WAER,uBFmJM,SAA6B3gB,EAA6BC,EAA2BC,EAAS,GAChG,MAAMO,EAAQV,EAAoBC,EAAWC,EAAaC,GAC1D,MAAO,IACAO,EACH,GAAAa,CAAIN,GACAD,EAAkBC,EAAMP,EAAMA,MACjC,EAET,4GAwBM,SAAU63B,EAAoB14B,EAA2BoB,EAAWf,EAA0BC,EAAS,GACzG,MAAMq4B,EAAwB34B,EAC9B,GAAI24B,EAAsBr7B,KAAM,CAC5B,MAAMA,EAAOwC,EAAS64B,EAAsBr7B,MACtCgE,EAAOa,EAAQ9B,EAAa/C,EAAKC,MACjCqb,GAAStY,EAASq4B,EAAsBr4B,QAAUgB,EAAKJ,kBACzC,iBAATE,EACPE,EAAKsX,GAASxX,EAEdE,EAAKI,IAAIN,EAAMwX,EAEtB,MAAM,GAAI3Y,MAAMC,QAAQF,GAErBoB,EAAKQ,SAAQ,CAACC,EAAeC,KACzB42B,EAAoB14B,EAAS8B,GAAMD,EAAUxB,EAAaC,EAAO,QAElE,CAEH,MAAMs4B,EAAqB54B,EAC3B,IAAK,MAAOgC,EAAKH,KAAab,OAAOC,QAAQG,GAAO,CAChD,MAAMpB,EAAW44B,EAAmBh4B,OAAOoB,GACvChC,GACA04B,EAAoB14B,EAAU6B,EAAUxB,EAAaC,EAE5D,CACJ,CACL,4CDrQ+C1D,EAAiB0D,EAAgBzD,GAC9E,OAAOD,EAAImvB,SAASzrB,EAAQA,EAASzD,EACvC"}
{"version":3,"file":"webgpu-utils.min.js","sources":["../../../src/utils.ts","../../../src/typed-arrays.ts","../../../src/buffer-views.ts","../../node_modules/wgsl_reflect/wgsl_reflect.module.js","../../../src/data-definitions.ts","../../../src/generate-mipmap.ts","../../../src/attribute-utils.ts","../../../src/texture-utils.ts","../../../src/primitives.ts"],"sourcesContent":["export const roundUpToMultipleOf = (v: number, multiple: number) => (((v + multiple - 1) / multiple) | 0) * multiple;\n","import {\n    roundUpToMultipleOf,\n} from './utils.js';\n\nexport type TypedArrayConstructor =\n    | Int8ArrayConstructor\n    | Uint8ArrayConstructor\n    | Int16ArrayConstructor\n    | Uint16ArrayConstructor\n    | Int32ArrayConstructor\n    | Uint32ArrayConstructor\n    | Float32ArrayConstructor\n    | Float64ArrayConstructor;\n\nexport type TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array;\n\nexport class TypedArrayViewGenerator {\n    arrayBuffer: ArrayBuffer;\n    byteOffset: number;\n\n    constructor(sizeInBytes: number) {\n        this.arrayBuffer = new ArrayBuffer(sizeInBytes);\n        this.byteOffset = 0;\n    }\n    align(alignment: number) {\n        this.byteOffset = roundUpToMultipleOf(this.byteOffset, alignment);\n    }\n    pad(numBytes: number) {\n        this.byteOffset += numBytes;\n    }\n    getView<T extends TypedArray>(Ctor: TypedArrayConstructor, numElements: number): T {\n        const view = new Ctor(this.arrayBuffer, this.byteOffset, numElements);\n        this.byteOffset += view.byteLength;\n        return view as T;\n    }\n}\n\nexport function subarray<T extends TypedArray>(arr: TypedArray, offset: number, length: number): T {\n  return arr.subarray(offset, offset + length) as T;\n}\n\n// TODO: fix better?\nexport const isTypedArray = (arr: any) =>\n  arr && typeof arr.length === 'number' && arr.buffer instanceof ArrayBuffer && typeof arr.byteLength === 'number';\n","import {\n    IntrinsicDefinition,\n    StructDefinition,\n    ArrayDefinition,\n    TypeDefinition,\n    VariableDefinition,\n} from './data-definitions.js';\nimport {\n    isTypedArray,\n    TypedArrayConstructor,\n    TypedArray,\n} from './typed-arrays.js';\nimport { roundUpToMultipleOf } from './utils.js';\n\ntype TypeDef = {\n    numElements: number;\n    align: number;\n    size: number;\n    type: string;\n    View: TypedArrayConstructor;\n    pad?: number[];\n};\n\nconst b: Record<string, TypeDef> = {\n  i32: { numElements: 1, align: 4, size: 4, type: 'i32', View: Int32Array },\n  u32: { numElements: 1, align: 4, size: 4, type: 'u32', View: Uint32Array },\n  f32: { numElements: 1, align: 4, size: 4, type: 'f32', View: Float32Array },\n  f16: { numElements: 1, align: 2, size: 2, type: 'u16', View: Uint16Array },\n\n  vec2f: { numElements: 2, align:  8, size:  8, type: 'f32', View: Float32Array },\n  vec2i: { numElements: 2, align:  8, size:  8, type: 'i32', View: Int32Array },\n  vec2u: { numElements: 2, align:  8, size:  8, type: 'u32', View: Uint32Array },\n  vec2h: { numElements: 2, align:  4, size:  4, type: 'u16', View: Uint16Array },\n  vec3i: { numElements: 3, align: 16, size: 12, type: 'i32', View: Int32Array },\n  vec3u: { numElements: 3, align: 16, size: 12, type: 'u32', View: Uint32Array },\n  vec3f: { numElements: 3, align: 16, size: 12, type: 'f32', View: Float32Array },\n  vec3h: { numElements: 3, align:  8, size:  6, type: 'u16', View: Uint16Array },\n  vec4i: { numElements: 4, align: 16, size: 16, type: 'i32', View: Int32Array },\n  vec4u: { numElements: 4, align: 16, size: 16, type: 'u32', View: Uint32Array },\n  vec4f: { numElements: 4, align: 16, size: 16, type: 'f32', View: Float32Array },\n  vec4h: { numElements: 4, align:  8, size:  8, type: 'u16', View: Uint16Array },\n\n  // AlignOf(vecR)\tSizeOf(array<vecR, C>)\n  mat2x2f: { numElements:  4, align:  8, size: 16,              type: 'f32', View: Float32Array },\n  mat2x2h: { numElements:  4, align:  4, size:  8,              type: 'u16', View: Uint16Array },\n  mat3x2f: { numElements:  6, align:  8, size: 24,              type: 'f32', View: Float32Array },\n  mat3x2h: { numElements:  6, align:  4, size: 12,              type: 'u16', View: Uint16Array },\n  mat4x2f: { numElements:  8, align:  8, size: 32,              type: 'f32', View: Float32Array },\n  mat4x2h: { numElements:  8, align:  4, size: 16,              type: 'u16', View: Uint16Array },\n  mat2x3f: { numElements:  8, align: 16, size: 32, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat2x3h: { numElements:  8, align:  8, size: 16, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat3x3f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat3x3h: { numElements: 12, align:  8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat4x3f: { numElements: 16, align: 16, size: 64, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat4x3h: { numElements: 16, align:  8, size: 32, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat2x4f: { numElements:  8, align: 16, size: 32,              type: 'f32', View: Float32Array },\n  mat2x4h: { numElements:  8, align:  8, size: 16,              type: 'u16', View: Uint16Array },\n  mat3x4f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat3x4h: { numElements: 12, align:  8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat4x4f: { numElements: 16, align: 16, size: 64,              type: 'f32', View: Float32Array },\n  mat4x4h: { numElements: 16, align:  8, size: 32,              type: 'u16', View: Uint16Array },\n\n  // Note: At least as of WGSL V1 you can not create a bool for uniform or storage.\n  // You can only create one in an internal struct. But, this code generates\n  // views of structs and it needs to not fail if the struct has a bool\n  bool: { numElements: 0, align: 1, size: 0, type: 'bool', View: Uint32Array },\n};\n\nconst typeInfo: Record<string, TypeDef> = {\n  ...b,\n\n  'vec2<i32>': b.vec2i,\n  'vec2<u32>': b.vec2u,\n  'vec2<f32>': b.vec2f,\n  'vec2<f16>': b.vec2h,\n  'vec3<i32>': b.vec3i,\n  'vec3<u32>': b.vec3u,\n  'vec3<f32>': b.vec3f,\n  'vec3<f16>': b.vec3h,\n  'vec4<i32>': b.vec4i,\n  'vec4<u32>': b.vec4u,\n  'vec4<f32>': b.vec4f,\n  'vec4<f16>': b.vec4h,\n\n  'mat2x2<f32>': b.mat2x2f,\n  'mat2x2<f16>': b.mat2x2h,\n  'mat3x2<f32>': b.mat3x2f,\n  'mat3x2<f16>': b.mat3x2h,\n  'mat4x2<f32>': b.mat4x2f,\n  'mat4x2<f16>': b.mat4x2h,\n  'mat2x3<f32>': b.mat2x3f,\n  'mat2x3<f16>': b.mat2x3h,\n  'mat3x3<f32>': b.mat3x3f,\n  'mat3x3<f16>': b.mat3x3h,\n  'mat4x3<f32>': b.mat4x3f,\n  'mat4x3<f16>': b.mat4x3h,\n  'mat2x4<f32>': b.mat2x4f,\n  'mat2x4<f16>': b.mat2x4h,\n  'mat3x4<f32>': b.mat3x4f,\n  'mat3x4<f16>': b.mat3x4h,\n  'mat4x4<f32>': b.mat4x4f,\n  'mat4x4<f16>': b.mat4x4h,\n};\n\nexport type TypedArrayOrViews = TypedArray | Views | Views[];\nexport interface Views {\n  [x: string]: TypedArrayOrViews;\n}\nexport type ArrayBufferViews = {\n    views: TypedArrayOrViews;\n    arrayBuffer: ArrayBuffer;\n}\n\n// This needs to be fixed! ðŸ˜±\nfunction getSizeOfTypeDef(typeDef: TypeDefinition): number {\n  const asArrayDef = typeDef as ArrayDefinition;\n  const elementType = asArrayDef.elementType;\n  if (elementType) {\n    return asArrayDef.size;\n    /*\n    if (isIntrinsic(elementType)) {\n        const asIntrinsicDef = elementType as IntrinsicDefinition;\n        const { align } = typeInfo[asIntrinsicDef.type];\n        return roundUpToMultipleOf(typeDef.size, align) * asArrayDef.numElements;\n    } else {\n        return asArrayDef.numElements * getSizeOfTypeDef(elementType);\n    }\n    */\n  } else {\n    const asStructDef = typeDef as StructDefinition;\n    const numElements = asArrayDef.numElements || 1;\n    if (asStructDef.fields) {\n        return typeDef.size * numElements;\n    } else {\n        const asIntrinsicDef = typeDef as IntrinsicDefinition;\n        const { align } = typeInfo[asIntrinsicDef.type];\n        return numElements > 1\n           ? roundUpToMultipleOf(typeDef.size, align) * numElements\n           : typeDef.size;\n    }\n  }\n}\n\nfunction range<T>(count: number, fn: (i: number) => T) {\n    return new Array(count).fill(0).map((_, i) => fn(i));\n}\n\n// If numElements is undefined this is NOT an array. If it is defined then it IS an array\n// Sizes for arrays are different than sizes for non-arrays. Example\n// a vec3f non array is Float32Array(3)\n// a vec3f array of 2 is Float32Array(4 * 2)\n// a vec3f array of 1 is Float32Array(4 * 1)\nfunction makeIntrinsicTypedArrayView(typeDef: TypeDefinition, buffer: ArrayBuffer, baseOffset: number, numElements?: number): TypedArray {\n    const { size, type } = typeDef as IntrinsicDefinition;\n    try {\n        const { View, align } = typeInfo[type];\n        const isArray = numElements !== undefined;\n        const sizeInBytes = isArray\n            ? roundUpToMultipleOf(size, align)\n            : size;\n        const baseNumElements = sizeInBytes / View.BYTES_PER_ELEMENT;\n        const effectiveNumElements = isArray\n           ? (numElements === 0\n              ? (buffer.byteLength - baseOffset) / sizeInBytes\n              : numElements)\n           : 1;\n\n        return new View(buffer, baseOffset, baseNumElements * effectiveNumElements);\n    } catch {\n        throw new Error(`unknown type: ${type}`);\n    }\n\n}\n\nfunction isIntrinsic(typeDef: TypeDefinition) {\n    return !(typeDef as StructDefinition).fields &&\n           !(typeDef as ArrayDefinition).elementType;\n}\n\n/**\n * Creates a set of named TypedArray views on an ArrayBuffer. If you don't\n * pass in an ArrayBuffer, one will be created. If you're using an unsized\n * array then you must pass in your own arraybuffer\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct Stuff {\n *    direction: vec3f,\n *    strength: f32,\n *    matrix: mat4x4f,\n * };\n * @group(0) @binding(0) var<uniform> uni: Stuff;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const views = makeTypedArrayViews(devs.uniforms.uni.typeDefinition);\n * ```\n *\n * views would effectively be\n *\n * ```js\n * views = {\n *   direction: Float32Array(arrayBuffer, 0, 3),\n *   strength: Float32Array(arrayBuffer, 3, 4),\n *   matrix: Float32Array(arraybuffer, 4, 20),\n * };\n * ```\n *\n * You can use the views directly or you can use @link {setStructuredView}\n *\n * @param typeDef Definition of the various types of views.\n * @param arrayBuffer Optional ArrayBuffer to use (if one provided one will be created)\n * @param offset Optional offset in existing ArrayBuffer to start the views.\n * @returns A bunch of named TypedArray views and the ArrayBuffer\n */\nexport function makeTypedArrayViews(typeDef: TypeDefinition, arrayBuffer?: ArrayBuffer, offset?: number): ArrayBufferViews {\n    const baseOffset = offset || 0;\n    const buffer = arrayBuffer || new ArrayBuffer(getSizeOfTypeDef(typeDef));\n\n    const makeViews = (typeDef: TypeDefinition, baseOffset: number): TypedArrayOrViews => {\n        const asArrayDef = typeDef as ArrayDefinition;\n        const elementType = asArrayDef.elementType;\n        if (elementType) {\n            // TODO: Should be optional? Per Type? Depth set? Per field?\n            // The issue is, if we have `array<vec4, 1000>` we don't likely\n            // want 1000 `Float32Array(4)` views. We want 1 `Float32Array(1000 * 4)` view.\n            // On the other hand, if we have `array<mat4x4, 10>` the maybe we do want\n            // 10 `Float32Array(16)` views since you might want to do\n            // `mat4.perspective(fov, aspect, near, far, foo.bar.arrayOf10Mat4s[3])`;\n            if (isIntrinsic(elementType)) {\n                return makeIntrinsicTypedArrayView(elementType, buffer, baseOffset, asArrayDef.numElements);\n            } else {\n                const elementSize = getSizeOfTypeDef(elementType);\n                const effectiveNumElements = asArrayDef.numElements === 0\n                   ? (buffer.byteLength - baseOffset) / elementSize\n                   : asArrayDef.numElements;\n                return range(effectiveNumElements, i => makeViews(elementType, baseOffset + elementSize * i)) as Views[];\n            }\n        } else if (typeof typeDef === 'string') {\n            throw Error('unreachable');\n        } else {\n            const fields = (typeDef as StructDefinition).fields;\n            if (fields) {\n                const views: Views = {};\n                for (const [name, {type, offset}] of Object.entries(fields)) {\n                    views[name] = makeViews(type, baseOffset + offset);\n                }\n                return views;\n            } else {\n                return makeIntrinsicTypedArrayView(typeDef, buffer, baseOffset);\n            }\n        }\n    };\n    return { views: makeViews(typeDef, baseOffset), arrayBuffer: buffer };\n}\n\n/**\n * Given a set of TypeArrayViews and matching JavaScript data\n * sets the content of the views.\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct Stuff {\n *    direction: vec3f,\n *    strength: f32,\n *    matrix: mat4x4f,\n * };\n * @group(0) @binding(0) var<uniform> uni: Stuff;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const views = makeTypedArrayViews(devs.uniforms.uni.typeDefinition);\n *\n * setStructuredViews({\n *   direction: [1, 2, 3],\n *   strength: 45,\n *   matrix: [\n *     1, 0, 0, 0,\n *     0, 1, 0, 0,\n *     0, 0, 1, 0,\n *     0, 0, 0, 1,\n *   ],\n * });\n * ```\n *\n * The code above will set the various views, which all point to different\n * locations within the same array buffer.\n *\n * See @link {makeTypedArrayViews}.\n *\n * @param data The new values\n * @param views TypedArray views as returned from {@link makeTypedArrayViews}\n */\nexport function setStructuredView(data: any, views: TypedArrayOrViews): void {\n    if (data === undefined) {\n        return;\n    } else if (isTypedArray(views)) {\n        const view = views as TypedArray;\n        if (view.length === 1 && typeof data === 'number') {\n            view[0] = data;\n        } else {\n            if (Array.isArray(data[0]) || isTypedArray(data[0])) {\n                // complete hack!\n                // there's no type data here so let's guess based on the user's data\n                const dataLen = data[0].length;\n                const stride = dataLen === 3 ? 4 : dataLen;\n                for (let i = 0; i < data.length; ++i) {\n                    const offset = i * stride;\n                    view.set(data[i], offset);\n                }\n            } else {\n                view.set(data as number[]);\n            }\n        }\n    } else if (Array.isArray(views)) {\n        const asArray = views as Views[];\n        (data as any[]).forEach((newValue, ndx) => {\n            setStructuredView(newValue, asArray[ndx]);\n        });\n    } else {\n        const asViews = views as Views;\n        for (const [key, newValue] of Object.entries(data)) {\n            const view = asViews[key];\n            if (view) {\n                setStructuredView(newValue, view);\n            }\n        }\n    }\n}\n\nexport type StructuredView = ArrayBufferViews & {\n    /**\n     * Sets the contents of the TypedArrays based on the data passed in\n     * Note: The data may be sparse\n     *\n     * example:\n     *\n     * ```js\n     * const code = `\n     * struct HSL {\n     *   hue: f32,\n     *   sat: f32,\n     *   lum: f32,\n     * };\n     * struct MyUniforms {\n     *    colors: array<HSL, 4>,\n     *    brightness: f32,\n     *    kernel: array<f32, 9>,\n     * };\n     * @group(0) @binding(0) var<uniform> myUniforms: MyUniforms;\n     * `;\n     * const defs = makeShaderDataDefinitions(code);\n     * const myUniformValues = makeStructuredView(defs.uniforms.myUniforms);\n     *\n     * myUniformValues.set({\n     *   colors: [\n     *     ,\n     *     ,\n     *     { hue: 0.5, sat: 1.0, lum: 0.5 },  // only set the 3rd color\n     *   ],\n     *   brightness: 0.8,\n     *   kernel: [\n     *      1, 0, -1,\n     *      2, 0, -2,\n     *      1, 0, -1,\n     *   ],\n     * });\n     * ```\n     *\n     * @param data\n     */\n    set(data: any): void;\n}\n\n/**\n * Given a VariableDefinition, create matching TypedArray views\n * @param varDef A VariableDefinition as returned from {@link makeShaderDataDefinitions}\n * @param arrayBuffer Optional ArrayBuffer for the views\n * @param offset Optional offset into the ArrayBuffer for the views\n * @returns TypedArray views for the various named fields of the structure as well\n *    as a `set` function to make them easy to set, and the arrayBuffer\n */\nexport function makeStructuredView(varDef: VariableDefinition | StructDefinition, arrayBuffer?: ArrayBuffer, offset = 0): StructuredView {\n    const asVarDef = varDef as VariableDefinition;\n    const typeDef = asVarDef.group === undefined ? varDef as StructDefinition : asVarDef.typeDefinition;\n    const views = makeTypedArrayViews(typeDef, arrayBuffer, offset);\n    return {\n        ...views,\n        set(data: any) {\n            setStructuredView(data, views.views);\n        },\n    };\n}\n\ntype ViewsByCtor = Map<TypedArrayConstructor, TypedArray>;\nconst s_views = new WeakMap<ArrayBuffer, ViewsByCtor>();\n\nfunction getViewsByCtor(arrayBuffer: ArrayBuffer): ViewsByCtor {\n    let viewsByCtor = s_views.get(arrayBuffer);\n    if (!viewsByCtor) {\n        viewsByCtor = new Map();\n        s_views.set(arrayBuffer, viewsByCtor);\n    }\n    return viewsByCtor;\n}\n\nfunction getView<T extends TypedArray>(arrayBuffer: ArrayBuffer, Ctor: TypedArrayConstructor): T {\n    const viewsByCtor = getViewsByCtor(arrayBuffer);\n    let view = viewsByCtor.get(Ctor);\n    if (!view) {\n        view = new Ctor(arrayBuffer);\n        viewsByCtor.set(Ctor, view);\n    }\n    return view as T;\n}\n\n// Is this something like [1,2,3]?\nfunction isArrayLikeOfNumber(data: any) {\n    return isTypedArray(data) || Array.isArray(data) && typeof data[0] === 'number';\n}\n\nfunction setIntrinsicFromArrayLikeOfNumber(typeDef: IntrinsicDefinition, data: any, arrayBuffer: ArrayBuffer, offset: number) {\n    const asIntrinsicDefinition = typeDef as IntrinsicDefinition;\n    const type = typeInfo[asIntrinsicDefinition.type];\n    const view = getView(arrayBuffer, type.View);\n    const index = offset / view.BYTES_PER_ELEMENT;\n    if (typeof data === 'number') {\n        view[index] = data;\n    } else {\n        view.set(data, index);\n    }\n}\n\n/**\n * Sets values on an existing array buffer from a TypeDefinition\n * @param typeDef A type definition provided by @link {makeShaderDataDefinitions}\n * @param data The source data\n * @param arrayBuffer The arrayBuffer who's data to set.\n * @param offset An offset in the arrayBuffer to start at.\n */\nexport function setTypedValues(typeDef: TypeDefinition, data: any, arrayBuffer: ArrayBuffer, offset = 0) {\n    const asArrayDef = typeDef as ArrayDefinition;\n    const elementType = asArrayDef.elementType;\n    if (elementType) {\n        // It's ArrayDefinition\n        if (isIntrinsic(elementType)) {\n            const asIntrinsicDef = elementType as IntrinsicDefinition;\n            if (isArrayLikeOfNumber(data)) {\n                setIntrinsicFromArrayLikeOfNumber(asIntrinsicDef, data, arrayBuffer, offset);\n                return;\n            }\n        }\n        data.forEach((newValue: any, ndx: number) => {\n            setTypedValues(elementType, newValue, arrayBuffer, offset + elementType.size * ndx);\n        });\n        return;\n    }\n\n    const asStructDef = typeDef as StructDefinition;\n    const fields = asStructDef.fields;\n    if (fields) {\n        // It's StructDefinition\n        for (const [key, newValue] of Object.entries(data)) {\n            const fieldDef = fields[key];\n            if (fieldDef) {\n                setTypedValues(fieldDef.type, newValue, arrayBuffer, offset + fieldDef.offset);\n            }\n        }\n    } else {\n        // It's IntrinsicDefinition\n        setIntrinsicFromArrayLikeOfNumber(typeDef as IntrinsicDefinition, data, arrayBuffer, offset);\n    }\n}\n\n/**\n * Same as @link {setTypedValues} except it takes a @link {VariableDefinition}.\n * @param typeDef A variable definition provided by @link {makeShaderDataDefinitions}\n * @param data The source data\n * @param arrayBuffer The arrayBuffer who's data to set.\n * @param offset An offset in the arrayBuffer to start at.\n */\nexport function setStructuredValues(varDef: VariableDefinition, data: any, arrayBuffer: ArrayBuffer, offset = 0) {\n    setTypedValues(varDef.typeDefinition, data, arrayBuffer, offset);\n}\n","class ParseContext {\n    constructor() {\n        this.constants = new Map();\n        this.aliases = new Map();\n        this.structs = new Map();\n    }\n}\n/**\n * @class Node\n * @category AST\n * Base class for AST nodes parsed from a WGSL shader.\n */\nclass Node {\n    constructor() { }\n    get isAstNode() {\n        return true;\n    }\n    get astNodeType() {\n        return \"\";\n    }\n    evaluate(context) {\n        throw new Error(\"Cannot evaluate node\");\n    }\n    evaluateString(context) {\n        return this.evaluate(context).toString();\n    }\n}\n/**\n * @class Statement\n * @extends Node\n * @category AST\n */\nclass Statement extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class Function\n * @extends Statement\n * @category AST\n */\nclass Function extends Statement {\n    constructor(name, args, returnType, body) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.returnType = returnType;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"function\";\n    }\n}\n/**\n * @class StaticAssert\n * @extends Statement\n * @category AST\n */\nclass StaticAssert extends Statement {\n    constructor(expression) {\n        super();\n        this.expression = expression;\n    }\n    get astNodeType() {\n        return \"staticAssert\";\n    }\n}\n/**\n * @class While\n * @extends Statement\n * @category AST\n */\nclass While extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"while\";\n    }\n}\n/**\n * @class Continuing\n * @extends Statement\n * @category AST\n */\nclass Continuing extends Statement {\n    constructor(body) {\n        super();\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"continuing\";\n    }\n}\n/**\n * @class For\n * @extends Statement\n * @category AST\n */\nclass For extends Statement {\n    constructor(init, condition, increment, body) {\n        super();\n        this.init = init;\n        this.condition = condition;\n        this.increment = increment;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"for\";\n    }\n}\n/**\n * @class Var\n * @extends Statement\n * @category AST\n */\nclass Var extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"var\";\n    }\n}\n/**\n * @class Override\n * @extends Statement\n * @category AST\n */\nclass Override extends Statement {\n    constructor(name, type, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"override\";\n    }\n}\n/**\n * @class Let\n * @extends Statement\n * @category AST\n */\nclass Let extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"let\";\n    }\n}\n/**\n * @class Const\n * @extends Statement\n * @category AST\n */\nclass Const extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"const\";\n    }\n    evaluate(context) {\n        return this.value.evaluate(context);\n    }\n}\nvar IncrementOperator;\n(function (IncrementOperator) {\n    IncrementOperator[\"increment\"] = \"++\";\n    IncrementOperator[\"decrement\"] = \"--\";\n})(IncrementOperator || (IncrementOperator = {}));\n(function (IncrementOperator) {\n    function parse(val) {\n        const key = val;\n        if (key == \"parse\")\n            throw new Error(\"Invalid value for IncrementOperator\");\n        return IncrementOperator[key];\n    }\n    IncrementOperator.parse = parse;\n})(IncrementOperator || (IncrementOperator = {}));\n/**\n * @class Increment\n * @extends Statement\n * @category AST\n */\nclass Increment extends Statement {\n    constructor(operator, variable) {\n        super();\n        this.operator = operator;\n        this.variable = variable;\n    }\n    get astNodeType() {\n        return \"increment\";\n    }\n}\nvar AssignOperator;\n(function (AssignOperator) {\n    AssignOperator[\"assign\"] = \"=\";\n    AssignOperator[\"addAssign\"] = \"+=\";\n    AssignOperator[\"subtractAssin\"] = \"-=\";\n    AssignOperator[\"multiplyAssign\"] = \"*=\";\n    AssignOperator[\"divideAssign\"] = \"/=\";\n    AssignOperator[\"moduloAssign\"] = \"%=\";\n    AssignOperator[\"andAssign\"] = \"&=\";\n    AssignOperator[\"orAssign\"] = \"|=\";\n    AssignOperator[\"xorAssign\"] = \"^=\";\n    AssignOperator[\"shiftLeftAssign\"] = \"<<=\";\n    AssignOperator[\"shiftRightAssign\"] = \">>=\";\n})(AssignOperator || (AssignOperator = {}));\n(function (AssignOperator) {\n    function parse(val) {\n        const key = val;\n        if (key == \"parse\")\n            throw new Error(\"Invalid value for AssignOperator\");\n        return AssignOperator[key];\n    }\n    AssignOperator.parse = parse;\n})(AssignOperator || (AssignOperator = {}));\n/**\n * @class Assign\n * @extends Statement\n * @category AST\n */\nclass Assign extends Statement {\n    constructor(operator, variable, value) {\n        super();\n        this.operator = operator;\n        this.variable = variable;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"assign\";\n    }\n}\n/**\n * @class Call\n * @extends Statement\n * @category AST\n */\nclass Call extends Statement {\n    constructor(name, args) {\n        super();\n        this.name = name;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"call\";\n    }\n}\n/**\n * @class Loop\n * @extends Statement\n * @category AST\n */\nclass Loop extends Statement {\n    constructor(body, continuing) {\n        super();\n        this.body = body;\n        this.continuing = continuing;\n    }\n    get astNodeType() {\n        return \"loop\";\n    }\n}\n/**\n * @class Switch\n * @extends Statement\n * @category AST\n */\nclass Switch extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"body\";\n    }\n}\n/**\n * @class If\n * @extends Statement\n * @category AST\n */\nclass If extends Statement {\n    constructor(condition, body, elseif, _else) {\n        super();\n        this.condition = condition;\n        this.body = body;\n        this.elseif = elseif;\n        this.else = _else;\n    }\n    get astNodeType() {\n        return \"if\";\n    }\n}\n/**\n * @class Return\n * @extends Statement\n * @category AST\n */\nclass Return extends Statement {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"return\";\n    }\n}\n/**\n * @class Enable\n * @extends Statement\n * @category AST\n */\nclass Enable extends Statement {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"enable\";\n    }\n}\n/**\n * @class Alias\n * @extends Statement\n * @category AST\n */\nclass Alias extends Statement {\n    constructor(name, type) {\n        super();\n        this.name = name;\n        this.type = type;\n    }\n    get astNodeType() {\n        return \"alias\";\n    }\n}\n/**\n * @class Discard\n * @extends Statement\n * @category AST\n */\nclass Discard extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"discard\";\n    }\n}\n/**\n * @class Break\n * @extends Statement\n * @category AST\n */\nclass Break extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"break\";\n    }\n}\n/**\n * @class Continue\n * @extends Statement\n * @category AST\n */\nclass Continue extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"continue\";\n    }\n}\n/**\n * @class Type\n * @extends Statement\n * @category AST\n */\nclass Type extends Statement {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"type\";\n    }\n    get isStruct() {\n        return false;\n    }\n    get isArray() {\n        return false;\n    }\n}\n/**\n * @class StructType\n * @extends Type\n * @category AST\n */\nclass Struct extends Type {\n    constructor(name, members) {\n        super(name);\n        this.members = members;\n    }\n    get astNodeType() {\n        return \"struct\";\n    }\n    get isStruct() {\n        return true;\n    }\n    /// Return the index of the member with the given name, or -1 if not found.\n    getMemberIndex(name) {\n        for (let i = 0; i < this.members.length; i++) {\n            if (this.members[i].name == name)\n                return i;\n        }\n        return -1;\n    }\n}\n/**\n * @class TemplateType\n * @extends Type\n * @category AST\n */\nclass TemplateType extends Type {\n    constructor(name, format, access) {\n        super(name);\n        this.format = format;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"template\";\n    }\n}\n/**\n * @class PointerType\n * @extends Type\n * @category AST\n */\nclass PointerType extends Type {\n    constructor(name, storage, type, access) {\n        super(name);\n        this.storage = storage;\n        this.type = type;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"pointer\";\n    }\n}\n/**\n * @class ArrayType\n * @extends Type\n * @category AST\n */\nclass ArrayType extends Type {\n    constructor(name, attributes, format, count) {\n        super(name);\n        this.attributes = attributes;\n        this.format = format;\n        this.count = count;\n    }\n    get astNodeType() {\n        return \"array\";\n    }\n    get isArray() {\n        return true;\n    }\n}\n/**\n * @class SamplerType\n * @extends Type\n * @category AST\n */\nclass SamplerType extends Type {\n    constructor(name, format, access) {\n        super(name);\n        this.format = format;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"sampler\";\n    }\n}\n/**\n * @class Expression\n * @extends Node\n * @category AST\n */\nclass Expression extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class StringExpr\n * @extends Expression\n * @category AST\n */\nclass StringExpr extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"stringExpr\";\n    }\n    toString() {\n        return this.value;\n    }\n    evaluateString() {\n        return this.value;\n    }\n}\n/**\n * @class CreateExpr\n * @extends Expression\n * @category AST\n */\nclass CreateExpr extends Expression {\n    constructor(type, args) {\n        super();\n        this.type = type;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"createExpr\";\n    }\n}\n/**\n * @class CallExpr\n * @extends Expression\n * @category AST\n */\nclass CallExpr extends Expression {\n    constructor(name, args) {\n        super();\n        this.name = name;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"callExpr\";\n    }\n    evaluate(context) {\n        switch (this.name) {\n            case \"abs\":\n                return Math.abs(this.args[0].evaluate(context));\n            case \"acos\":\n                return Math.acos(this.args[0].evaluate(context));\n            case \"acosh\":\n                return Math.acosh(this.args[0].evaluate(context));\n            case \"asin\":\n                return Math.asin(this.args[0].evaluate(context));\n            case \"asinh\":\n                return Math.asinh(this.args[0].evaluate(context));\n            case \"atan\":\n                return Math.atan(this.args[0].evaluate(context));\n            case \"atan2\":\n                return Math.atan2(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"atanh\":\n                return Math.atanh(this.args[0].evaluate(context));\n            case \"ceil\":\n                return Math.ceil(this.args[0].evaluate(context));\n            case \"clamp\":\n                return Math.min(Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context)), this.args[2].evaluate(context));\n            case \"cos\":\n                return Math.cos(this.args[0].evaluate(context));\n            //case \"cross\":\n            //TODO: (x[i] * y[j] - x[j] * y[i])\n            case \"degrees\":\n                return (this.args[0].evaluate(context) * 180) / Math.PI;\n            //case \"determinant\":\n            //TODO implement\n            case \"distance\":\n                return Math.sqrt(Math.pow(this.args[0].evaluate(context) - this.args[1].evaluate(context), 2));\n            case \"dot\":\n            //TODO: (x[i] * y[i])\n            case \"exp\":\n                return Math.exp(this.args[0].evaluate(context));\n            case \"exp2\":\n                return Math.pow(2, this.args[0].evaluate(context));\n            //case \"extractBits\":\n            //TODO: implement\n            //case \"firstLeadingBit\":\n            //TODO: implement\n            case \"floor\":\n                return Math.floor(this.args[0].evaluate(context));\n            case \"fma\":\n                return (this.args[0].evaluate(context) * this.args[1].evaluate(context) +\n                    this.args[2].evaluate(context));\n            case \"fract\":\n                return (this.args[0].evaluate(context) -\n                    Math.floor(this.args[0].evaluate(context)));\n            //case \"frexp\":\n            //TODO: implement\n            case \"inverseSqrt\":\n                return 1 / Math.sqrt(this.args[0].evaluate(context));\n            //case \"length\":\n            //TODO: implement\n            case \"log\":\n                return Math.log(this.args[0].evaluate(context));\n            case \"log2\":\n                return Math.log2(this.args[0].evaluate(context));\n            case \"max\":\n                return Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"min\":\n                return Math.min(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"mix\":\n                return (this.args[0].evaluate(context) *\n                    (1 - this.args[2].evaluate(context)) +\n                    this.args[1].evaluate(context) * this.args[2].evaluate(context));\n            case \"modf\":\n                return (this.args[0].evaluate(context) -\n                    Math.floor(this.args[0].evaluate(context)));\n            case \"pow\":\n                return Math.pow(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"radians\":\n                return (this.args[0].evaluate(context) * Math.PI) / 180;\n            case \"round\":\n                return Math.round(this.args[0].evaluate(context));\n            case \"sign\":\n                return Math.sign(this.args[0].evaluate(context));\n            case \"sin\":\n                return Math.sin(this.args[0].evaluate(context));\n            case \"sinh\":\n                return Math.sinh(this.args[0].evaluate(context));\n            case \"saturate\":\n                return Math.min(Math.max(this.args[0].evaluate(context), 0), 1);\n            case \"smoothstep\":\n                return (this.args[0].evaluate(context) *\n                    this.args[0].evaluate(context) *\n                    (3 - 2 * this.args[0].evaluate(context)));\n            case \"sqrt\":\n                return Math.sqrt(this.args[0].evaluate(context));\n            case \"step\":\n                return this.args[0].evaluate(context) < this.args[1].evaluate(context)\n                    ? 0\n                    : 1;\n            case \"tan\":\n                return Math.tan(this.args[0].evaluate(context));\n            case \"tanh\":\n                return Math.tanh(this.args[0].evaluate(context));\n            case \"trunc\":\n                return Math.trunc(this.args[0].evaluate(context));\n            default:\n                throw new Error(\"Non const function: \" + this.name);\n        }\n    }\n}\n/**\n * @class VariableExpr\n * @extends Expression\n * @category AST\n */\nclass VariableExpr extends Expression {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"varExpr\";\n    }\n}\n/**\n * @class ConstExpr\n * @extends Expression\n * @category AST\n */\nclass ConstExpr extends Expression {\n    constructor(name, initializer) {\n        super();\n        this.name = name;\n        this.initializer = initializer;\n    }\n    get astNodeType() {\n        return \"constExpr\";\n    }\n    evaluate(context) {\n        var _a, _b;\n        if (this.initializer instanceof CreateExpr) {\n            // This is a struct constant\n            const property = (_a = this.postfix) === null || _a === void 0 ? void 0 : _a.evaluateString(context);\n            const type = (_b = this.initializer.type) === null || _b === void 0 ? void 0 : _b.name;\n            const struct = context.structs.get(type);\n            const memberIndex = struct === null || struct === void 0 ? void 0 : struct.getMemberIndex(property);\n            if (memberIndex != -1) {\n                const value = this.initializer.args[memberIndex].evaluate(context);\n                return value;\n            }\n            console.log(memberIndex);\n        }\n        return this.initializer.evaluate(context);\n    }\n}\n/**\n * @class LiteralExpr\n * @extends Expression\n * @category AST\n */\nclass LiteralExpr extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"literalExpr\";\n    }\n    evaluate() {\n        return this.value;\n    }\n}\n/**\n * @class BitcastExpr\n * @extends Expression\n * @category AST\n */\nclass BitcastExpr extends Expression {\n    constructor(type, value) {\n        super();\n        this.type = type;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"bitcastExpr\";\n    }\n}\n/**\n * @class TypecastExpr\n * @extends Expression\n * @category AST\n */\nclass TypecastExpr extends Expression {\n    constructor(type, args) {\n        super();\n        this.type = type;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"typecastExpr\";\n    }\n    evaluate(context) {\n        return this.args[0].evaluate(context);\n    }\n}\n/**\n * @class GroupingExpr\n * @extends Expression\n * @category AST\n */\nclass GroupingExpr extends Expression {\n    constructor(contents) {\n        super();\n        this.contents = contents;\n    }\n    get astNodeType() {\n        return \"groupExpr\";\n    }\n    evaluate(context) {\n        return this.contents[0].evaluate(context);\n    }\n}\n/**\n * @class Operator\n * @extends Expression\n * @category AST\n */\nclass Operator extends Expression {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class UnaryOperator\n * @extends Operator\n * @category AST\n * @property {string} operator +, -, !, ~\n */\nclass UnaryOperator extends Operator {\n    constructor(operator, right) {\n        super();\n        this.operator = operator;\n        this.right = right;\n    }\n    get astNodeType() {\n        return \"unaryOp\";\n    }\n    evaluate(context) {\n        switch (this.operator) {\n            case \"+\":\n                return this.right.evaluate(context);\n            case \"-\":\n                return -this.right.evaluate(context);\n            case \"!\":\n                return this.right.evaluate(context) ? 0 : 1;\n            case \"~\":\n                return ~this.right.evaluate(context);\n            default:\n                throw new Error(\"Unknown unary operator: \" + this.operator);\n        }\n    }\n}\n/**\n * @class BinaryOperator\n * @extends Operator\n * @category AST\n * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||\n */\nclass BinaryOperator extends Operator {\n    constructor(operator, left, right) {\n        super();\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n    get astNodeType() {\n        return \"binaryOp\";\n    }\n    evaluate(context) {\n        switch (this.operator) {\n            case \"+\":\n                return this.left.evaluate(context) + this.right.evaluate(context);\n            case \"-\":\n                return this.left.evaluate(context) - this.right.evaluate(context);\n            case \"*\":\n                return this.left.evaluate(context) * this.right.evaluate(context);\n            case \"/\":\n                return this.left.evaluate(context) / this.right.evaluate(context);\n            case \"%\":\n                return this.left.evaluate(context) % this.right.evaluate(context);\n            case \"==\":\n                return this.left.evaluate(context) == this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"!=\":\n                return this.left.evaluate(context) != this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"<\":\n                return this.left.evaluate(context) < this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \">\":\n                return this.left.evaluate(context) > this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"<=\":\n                return this.left.evaluate(context) <= this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \">=\":\n                return this.left.evaluate(context) >= this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"&&\":\n                return this.left.evaluate(context) && this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"||\":\n                return this.left.evaluate(context) || this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            default:\n                throw new Error(`Unknown operator ${this.operator}`);\n        }\n    }\n}\n/**\n * @class SwitchCase\n * @extends Node\n * @category AST\n */\nclass SwitchCase extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class Case\n * @extends SwitchCase\n * @category AST\n */\nclass Case extends SwitchCase {\n    constructor(selector, body) {\n        super();\n        this.selector = selector;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"case\";\n    }\n}\n/**\n * @class Default\n * @extends SwitchCase\n * @category AST\n */\nclass Default extends SwitchCase {\n    constructor(body) {\n        super();\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"default\";\n    }\n}\n/**\n * @class Argument\n * @extends Node\n * @category AST\n */\nclass Argument extends Node {\n    constructor(name, type, attributes) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n    }\n    get astNodeType() {\n        return \"argument\";\n    }\n}\n/**\n * @class ElseIf\n * @extends Node\n * @category AST\n */\nclass ElseIf extends Node {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"elseif\";\n    }\n}\n/**\n * @class Member\n * @extends Node\n * @category AST\n */\nclass Member extends Node {\n    constructor(name, type, attributes) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n    }\n    get astNodeType() {\n        return \"member\";\n    }\n}\n/**\n * @class Attribute\n * @extends Node\n * @category AST\n */\nclass Attribute extends Node {\n    constructor(name, value) {\n        super();\n        this.name = name;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"attribute\";\n    }\n}\n\nvar _a;\nvar TokenClass;\n(function (TokenClass) {\n    TokenClass[TokenClass[\"token\"] = 0] = \"token\";\n    TokenClass[TokenClass[\"keyword\"] = 1] = \"keyword\";\n    TokenClass[TokenClass[\"reserved\"] = 2] = \"reserved\";\n})(TokenClass || (TokenClass = {}));\nclass TokenType {\n    constructor(name, type, rule) {\n        this.name = name;\n        this.type = type;\n        this.rule = rule;\n    }\n    toString() {\n        return this.name;\n    }\n}\n/// Catalog of defined token types, keywords, and reserved words.\nclass TokenTypes {\n}\n_a = TokenTypes;\nTokenTypes.none = new TokenType(\"\", TokenClass.reserved, \"\");\nTokenTypes.eof = new TokenType(\"EOF\", TokenClass.token, \"\");\nTokenTypes.reserved = {\n    asm: new TokenType(\"asm\", TokenClass.reserved, \"asm\"),\n    bf16: new TokenType(\"bf16\", TokenClass.reserved, \"bf16\"),\n    do: new TokenType(\"do\", TokenClass.reserved, \"do\"),\n    enum: new TokenType(\"enum\", TokenClass.reserved, \"enum\"),\n    f16: new TokenType(\"f16\", TokenClass.reserved, \"f16\"),\n    f64: new TokenType(\"f64\", TokenClass.reserved, \"f64\"),\n    handle: new TokenType(\"handle\", TokenClass.reserved, \"handle\"),\n    i8: new TokenType(\"i8\", TokenClass.reserved, \"i8\"),\n    i16: new TokenType(\"i16\", TokenClass.reserved, \"i16\"),\n    i64: new TokenType(\"i64\", TokenClass.reserved, \"i64\"),\n    mat: new TokenType(\"mat\", TokenClass.reserved, \"mat\"),\n    premerge: new TokenType(\"premerge\", TokenClass.reserved, \"premerge\"),\n    regardless: new TokenType(\"regardless\", TokenClass.reserved, \"regardless\"),\n    typedef: new TokenType(\"typedef\", TokenClass.reserved, \"typedef\"),\n    u8: new TokenType(\"u8\", TokenClass.reserved, \"u8\"),\n    u16: new TokenType(\"u16\", TokenClass.reserved, \"u16\"),\n    u64: new TokenType(\"u64\", TokenClass.reserved, \"u64\"),\n    unless: new TokenType(\"unless\", TokenClass.reserved, \"unless\"),\n    using: new TokenType(\"using\", TokenClass.reserved, \"using\"),\n    vec: new TokenType(\"vec\", TokenClass.reserved, \"vec\"),\n    void: new TokenType(\"void\", TokenClass.reserved, \"void\"),\n};\nTokenTypes.keywords = {\n    array: new TokenType(\"array\", TokenClass.keyword, \"array\"),\n    atomic: new TokenType(\"atomic\", TokenClass.keyword, \"atomic\"),\n    bool: new TokenType(\"bool\", TokenClass.keyword, \"bool\"),\n    f32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\n    i32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\n    mat2x2: new TokenType(\"mat2x2\", TokenClass.keyword, \"mat2x2\"),\n    mat2x3: new TokenType(\"mat2x3\", TokenClass.keyword, \"mat2x3\"),\n    mat2x4: new TokenType(\"mat2x4\", TokenClass.keyword, \"mat2x4\"),\n    mat3x2: new TokenType(\"mat3x2\", TokenClass.keyword, \"mat3x2\"),\n    mat3x3: new TokenType(\"mat3x3\", TokenClass.keyword, \"mat3x3\"),\n    mat3x4: new TokenType(\"mat3x4\", TokenClass.keyword, \"mat3x4\"),\n    mat4x2: new TokenType(\"mat4x2\", TokenClass.keyword, \"mat4x2\"),\n    mat4x3: new TokenType(\"mat4x3\", TokenClass.keyword, \"mat4x3\"),\n    mat4x4: new TokenType(\"mat4x4\", TokenClass.keyword, \"mat4x4\"),\n    ptr: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),\n    sampler: new TokenType(\"sampler\", TokenClass.keyword, \"sampler\"),\n    sampler_comparison: new TokenType(\"sampler_comparison\", TokenClass.keyword, \"sampler_comparison\"),\n    struct: new TokenType(\"struct\", TokenClass.keyword, \"struct\"),\n    texture_1d: new TokenType(\"texture_1d\", TokenClass.keyword, \"texture_1d\"),\n    texture_2d: new TokenType(\"texture_2d\", TokenClass.keyword, \"texture_2d\"),\n    texture_2d_array: new TokenType(\"texture_2d_array\", TokenClass.keyword, \"texture_2d_array\"),\n    texture_3d: new TokenType(\"texture_3d\", TokenClass.keyword, \"texture_3d\"),\n    texture_cube: new TokenType(\"texture_cube\", TokenClass.keyword, \"texture_cube\"),\n    texture_cube_array: new TokenType(\"texture_cube_array\", TokenClass.keyword, \"texture_cube_array\"),\n    texture_multisampled_2d: new TokenType(\"texture_multisampled_2d\", TokenClass.keyword, \"texture_multisampled_2d\"),\n    texture_storage_1d: new TokenType(\"texture_storage_1d\", TokenClass.keyword, \"texture_storage_1d\"),\n    texture_storage_2d: new TokenType(\"texture_storage_2d\", TokenClass.keyword, \"texture_storage_2d\"),\n    texture_storage_2d_array: new TokenType(\"texture_storage_2d_array\", TokenClass.keyword, \"texture_storage_2d_array\"),\n    texture_storage_3d: new TokenType(\"texture_storage_3d\", TokenClass.keyword, \"texture_storage_3d\"),\n    texture_depth_2d: new TokenType(\"texture_depth_2d\", TokenClass.keyword, \"texture_depth_2d\"),\n    texture_depth_2d_array: new TokenType(\"texture_depth_2d_array\", TokenClass.keyword, \"texture_depth_2d_array\"),\n    texture_depth_cube: new TokenType(\"texture_depth_cube\", TokenClass.keyword, \"texture_depth_cube\"),\n    texture_depth_cube_array: new TokenType(\"texture_depth_cube_array\", TokenClass.keyword, \"texture_depth_cube_array\"),\n    texture_depth_multisampled_2d: new TokenType(\"texture_depth_multisampled_2d\", TokenClass.keyword, \"texture_depth_multisampled_2d\"),\n    texture_external: new TokenType(\"texture_external\", TokenClass.keyword, \"texture_external\"),\n    u32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\n    vec2: new TokenType(\"vec2\", TokenClass.keyword, \"vec2\"),\n    vec3: new TokenType(\"vec3\", TokenClass.keyword, \"vec3\"),\n    vec4: new TokenType(\"vec4\", TokenClass.keyword, \"vec4\"),\n    bitcast: new TokenType(\"bitcast\", TokenClass.keyword, \"bitcast\"),\n    block: new TokenType(\"block\", TokenClass.keyword, \"block\"),\n    break: new TokenType(\"break\", TokenClass.keyword, \"break\"),\n    case: new TokenType(\"case\", TokenClass.keyword, \"case\"),\n    continue: new TokenType(\"continue\", TokenClass.keyword, \"continue\"),\n    continuing: new TokenType(\"continuing\", TokenClass.keyword, \"continuing\"),\n    default: new TokenType(\"default\", TokenClass.keyword, \"default\"),\n    discard: new TokenType(\"discard\", TokenClass.keyword, \"discard\"),\n    else: new TokenType(\"else\", TokenClass.keyword, \"else\"),\n    enable: new TokenType(\"enable\", TokenClass.keyword, \"enable\"),\n    fallthrough: new TokenType(\"fallthrough\", TokenClass.keyword, \"fallthrough\"),\n    false: new TokenType(\"false\", TokenClass.keyword, \"false\"),\n    fn: new TokenType(\"fn\", TokenClass.keyword, \"fn\"),\n    for: new TokenType(\"for\", TokenClass.keyword, \"for\"),\n    function: new TokenType(\"function\", TokenClass.keyword, \"function\"),\n    if: new TokenType(\"if\", TokenClass.keyword, \"if\"),\n    let: new TokenType(\"let\", TokenClass.keyword, \"let\"),\n    const: new TokenType(\"const\", TokenClass.keyword, \"const\"),\n    loop: new TokenType(\"loop\", TokenClass.keyword, \"loop\"),\n    while: new TokenType(\"while\", TokenClass.keyword, \"while\"),\n    private: new TokenType(\"private\", TokenClass.keyword, \"private\"),\n    read: new TokenType(\"read\", TokenClass.keyword, \"read\"),\n    read_write: new TokenType(\"read_write\", TokenClass.keyword, \"read_write\"),\n    return: new TokenType(\"return\", TokenClass.keyword, \"return\"),\n    storage: new TokenType(\"storage\", TokenClass.keyword, \"storage\"),\n    switch: new TokenType(\"switch\", TokenClass.keyword, \"switch\"),\n    true: new TokenType(\"true\", TokenClass.keyword, \"true\"),\n    alias: new TokenType(\"alias\", TokenClass.keyword, \"alias\"),\n    type: new TokenType(\"type\", TokenClass.keyword, \"type\"),\n    uniform: new TokenType(\"uniform\", TokenClass.keyword, \"uniform\"),\n    var: new TokenType(\"var\", TokenClass.keyword, \"var\"),\n    override: new TokenType(\"override\", TokenClass.keyword, \"override\"),\n    workgroup: new TokenType(\"workgroup\", TokenClass.keyword, \"workgroup\"),\n    write: new TokenType(\"write\", TokenClass.keyword, \"write\"),\n    r8unorm: new TokenType(\"r8unorm\", TokenClass.keyword, \"r8unorm\"),\n    r8snorm: new TokenType(\"r8snorm\", TokenClass.keyword, \"r8snorm\"),\n    r8uint: new TokenType(\"r8uint\", TokenClass.keyword, \"r8uint\"),\n    r8sint: new TokenType(\"r8sint\", TokenClass.keyword, \"r8sint\"),\n    r16uint: new TokenType(\"r16uint\", TokenClass.keyword, \"r16uint\"),\n    r16sint: new TokenType(\"r16sint\", TokenClass.keyword, \"r16sint\"),\n    r16float: new TokenType(\"r16float\", TokenClass.keyword, \"r16float\"),\n    rg8unorm: new TokenType(\"rg8unorm\", TokenClass.keyword, \"rg8unorm\"),\n    rg8snorm: new TokenType(\"rg8snorm\", TokenClass.keyword, \"rg8snorm\"),\n    rg8uint: new TokenType(\"rg8uint\", TokenClass.keyword, \"rg8uint\"),\n    rg8sint: new TokenType(\"rg8sint\", TokenClass.keyword, \"rg8sint\"),\n    r32uint: new TokenType(\"r32uint\", TokenClass.keyword, \"r32uint\"),\n    r32sint: new TokenType(\"r32sint\", TokenClass.keyword, \"r32sint\"),\n    r32float: new TokenType(\"r32float\", TokenClass.keyword, \"r32float\"),\n    rg16uint: new TokenType(\"rg16uint\", TokenClass.keyword, \"rg16uint\"),\n    rg16sint: new TokenType(\"rg16sint\", TokenClass.keyword, \"rg16sint\"),\n    rg16float: new TokenType(\"rg16float\", TokenClass.keyword, \"rg16float\"),\n    rgba8unorm: new TokenType(\"rgba8unorm\", TokenClass.keyword, \"rgba8unorm\"),\n    rgba8unorm_srgb: new TokenType(\"rgba8unorm_srgb\", TokenClass.keyword, \"rgba8unorm_srgb\"),\n    rgba8snorm: new TokenType(\"rgba8snorm\", TokenClass.keyword, \"rgba8snorm\"),\n    rgba8uint: new TokenType(\"rgba8uint\", TokenClass.keyword, \"rgba8uint\"),\n    rgba8sint: new TokenType(\"rgba8sint\", TokenClass.keyword, \"rgba8sint\"),\n    bgra8unorm: new TokenType(\"bgra8unorm\", TokenClass.keyword, \"bgra8unorm\"),\n    bgra8unorm_srgb: new TokenType(\"bgra8unorm_srgb\", TokenClass.keyword, \"bgra8unorm_srgb\"),\n    rgb10a2unorm: new TokenType(\"rgb10a2unorm\", TokenClass.keyword, \"rgb10a2unorm\"),\n    rg11b10float: new TokenType(\"rg11b10float\", TokenClass.keyword, \"rg11b10float\"),\n    rg32uint: new TokenType(\"rg32uint\", TokenClass.keyword, \"rg32uint\"),\n    rg32sint: new TokenType(\"rg32sint\", TokenClass.keyword, \"rg32sint\"),\n    rg32float: new TokenType(\"rg32float\", TokenClass.keyword, \"rg32float\"),\n    rgba16uint: new TokenType(\"rgba16uint\", TokenClass.keyword, \"rgba16uint\"),\n    rgba16sint: new TokenType(\"rgba16sint\", TokenClass.keyword, \"rgba16sint\"),\n    rgba16float: new TokenType(\"rgba16float\", TokenClass.keyword, \"rgba16float\"),\n    rgba32uint: new TokenType(\"rgba32uint\", TokenClass.keyword, \"rgba32uint\"),\n    rgba32sint: new TokenType(\"rgba32sint\", TokenClass.keyword, \"rgba32sint\"),\n    rgba32float: new TokenType(\"rgba32float\", TokenClass.keyword, \"rgba32float\"),\n    static_assert: new TokenType(\"static_assert\", TokenClass.keyword, \"static_assert\"),\n    // WGSL grammar has a few keywords that have different token names than the strings they\n    // represent. Aliasing them here.\n    /*int32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\n        uint32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\n        float32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\n        pointer: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),*/\n};\nTokenTypes.tokens = {\n    decimal_float_literal: new TokenType(\"decimal_float_literal\", TokenClass.token, /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+f?)|([0-9]+f)/),\n    hex_float_literal: new TokenType(\"hex_float_literal\", TokenClass.token, /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+f?))/),\n    int_literal: new TokenType(\"int_literal\", TokenClass.token, /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),\n    uint_literal: new TokenType(\"uint_literal\", TokenClass.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),\n    ident: new TokenType(\"ident\", TokenClass.token, /[a-zA-Z][0-9a-zA-Z_]*/),\n    and: new TokenType(\"and\", TokenClass.token, \"&\"),\n    and_and: new TokenType(\"and_and\", TokenClass.token, \"&&\"),\n    arrow: new TokenType(\"arrow \", TokenClass.token, \"->\"),\n    attr: new TokenType(\"attr\", TokenClass.token, \"@\"),\n    attr_left: new TokenType(\"attr_left\", TokenClass.token, \"[[\"),\n    attr_right: new TokenType(\"attr_right\", TokenClass.token, \"]]\"),\n    forward_slash: new TokenType(\"forward_slash\", TokenClass.token, \"/\"),\n    bang: new TokenType(\"bang\", TokenClass.token, \"!\"),\n    bracket_left: new TokenType(\"bracket_left\", TokenClass.token, \"[\"),\n    bracket_right: new TokenType(\"bracket_right\", TokenClass.token, \"]\"),\n    brace_left: new TokenType(\"brace_left\", TokenClass.token, \"{\"),\n    brace_right: new TokenType(\"brace_right\", TokenClass.token, \"}\"),\n    colon: new TokenType(\"colon\", TokenClass.token, \":\"),\n    comma: new TokenType(\"comma\", TokenClass.token, \",\"),\n    equal: new TokenType(\"equal\", TokenClass.token, \"=\"),\n    equal_equal: new TokenType(\"equal_equal\", TokenClass.token, \"==\"),\n    not_equal: new TokenType(\"not_equal\", TokenClass.token, \"!=\"),\n    greater_than: new TokenType(\"greater_than\", TokenClass.token, \">\"),\n    greater_than_equal: new TokenType(\"greater_than_equal\", TokenClass.token, \">=\"),\n    shift_right: new TokenType(\"shift_right\", TokenClass.token, \">>\"),\n    less_than: new TokenType(\"less_than\", TokenClass.token, \"<\"),\n    less_than_equal: new TokenType(\"less_than_equal\", TokenClass.token, \"<=\"),\n    shift_left: new TokenType(\"shift_left\", TokenClass.token, \"<<\"),\n    modulo: new TokenType(\"modulo\", TokenClass.token, \"%\"),\n    minus: new TokenType(\"minus\", TokenClass.token, \"-\"),\n    minus_minus: new TokenType(\"minus_minus\", TokenClass.token, \"--\"),\n    period: new TokenType(\"period\", TokenClass.token, \".\"),\n    plus: new TokenType(\"plus\", TokenClass.token, \"+\"),\n    plus_plus: new TokenType(\"plus_plus\", TokenClass.token, \"++\"),\n    or: new TokenType(\"or\", TokenClass.token, \"|\"),\n    or_or: new TokenType(\"or_or\", TokenClass.token, \"||\"),\n    paren_left: new TokenType(\"paren_left\", TokenClass.token, \"(\"),\n    paren_right: new TokenType(\"paren_right\", TokenClass.token, \")\"),\n    semicolon: new TokenType(\"semicolon\", TokenClass.token, \";\"),\n    star: new TokenType(\"star\", TokenClass.token, \"*\"),\n    tilde: new TokenType(\"tilde\", TokenClass.token, \"~\"),\n    underscore: new TokenType(\"underscore\", TokenClass.token, \"_\"),\n    xor: new TokenType(\"xor\", TokenClass.token, \"^\"),\n    plus_equal: new TokenType(\"plus_equal\", TokenClass.token, \"+=\"),\n    minus_equal: new TokenType(\"minus_equal\", TokenClass.token, \"-=\"),\n    times_equal: new TokenType(\"times_equal\", TokenClass.token, \"*=\"),\n    division_equal: new TokenType(\"division_equal\", TokenClass.token, \"/=\"),\n    modulo_equal: new TokenType(\"modulo_equal\", TokenClass.token, \"%=\"),\n    and_equal: new TokenType(\"and_equal\", TokenClass.token, \"&=\"),\n    or_equal: new TokenType(\"or_equal\", TokenClass.token, \"|=\"),\n    xor_equal: new TokenType(\"xor_equal\", TokenClass.token, \"^=\"),\n    shift_right_equal: new TokenType(\"shift_right_equal\", TokenClass.token, \">>=\"),\n    shift_left_equal: new TokenType(\"shift_left_equal\", TokenClass.token, \"<<=\"),\n};\nTokenTypes.storage_class = [\n    _a.keywords.function,\n    _a.keywords.private,\n    _a.keywords.workgroup,\n    _a.keywords.uniform,\n    _a.keywords.storage,\n];\nTokenTypes.access_mode = [\n    _a.keywords.read,\n    _a.keywords.write,\n    _a.keywords.read_write,\n];\nTokenTypes.sampler_type = [\n    _a.keywords.sampler,\n    _a.keywords.sampler_comparison,\n];\nTokenTypes.sampled_texture_type = [\n    _a.keywords.texture_1d,\n    _a.keywords.texture_2d,\n    _a.keywords.texture_2d_array,\n    _a.keywords.texture_3d,\n    _a.keywords.texture_cube,\n    _a.keywords.texture_cube_array,\n];\nTokenTypes.multisampled_texture_type = [\n    _a.keywords.texture_multisampled_2d,\n];\nTokenTypes.storage_texture_type = [\n    _a.keywords.texture_storage_1d,\n    _a.keywords.texture_storage_2d,\n    _a.keywords.texture_storage_2d_array,\n    _a.keywords.texture_storage_3d,\n];\nTokenTypes.depth_texture_type = [\n    _a.keywords.texture_depth_2d,\n    _a.keywords.texture_depth_2d_array,\n    _a.keywords.texture_depth_cube,\n    _a.keywords.texture_depth_cube_array,\n    _a.keywords.texture_depth_multisampled_2d,\n];\nTokenTypes.texture_external_type = [_a.keywords.texture_external];\nTokenTypes.any_texture_type = [\n    ..._a.sampled_texture_type,\n    ..._a.multisampled_texture_type,\n    ..._a.storage_texture_type,\n    ..._a.depth_texture_type,\n    ..._a.texture_external_type,\n];\nTokenTypes.texel_format = [\n    _a.keywords.r8unorm,\n    _a.keywords.r8snorm,\n    _a.keywords.r8uint,\n    _a.keywords.r8sint,\n    _a.keywords.r16uint,\n    _a.keywords.r16sint,\n    _a.keywords.r16float,\n    _a.keywords.rg8unorm,\n    _a.keywords.rg8snorm,\n    _a.keywords.rg8uint,\n    _a.keywords.rg8sint,\n    _a.keywords.r32uint,\n    _a.keywords.r32sint,\n    _a.keywords.r32float,\n    _a.keywords.rg16uint,\n    _a.keywords.rg16sint,\n    _a.keywords.rg16float,\n    _a.keywords.rgba8unorm,\n    _a.keywords.rgba8unorm_srgb,\n    _a.keywords.rgba8snorm,\n    _a.keywords.rgba8uint,\n    _a.keywords.rgba8sint,\n    _a.keywords.bgra8unorm,\n    _a.keywords.bgra8unorm_srgb,\n    _a.keywords.rgb10a2unorm,\n    _a.keywords.rg11b10float,\n    _a.keywords.rg32uint,\n    _a.keywords.rg32sint,\n    _a.keywords.rg32float,\n    _a.keywords.rgba16uint,\n    _a.keywords.rgba16sint,\n    _a.keywords.rgba16float,\n    _a.keywords.rgba32uint,\n    _a.keywords.rgba32sint,\n    _a.keywords.rgba32float,\n];\nTokenTypes.const_literal = [\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.decimal_float_literal,\n    _a.tokens.hex_float_literal,\n    _a.keywords.true,\n    _a.keywords.false,\n];\nTokenTypes.literal_or_ident = [\n    _a.tokens.ident,\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.decimal_float_literal,\n    _a.tokens.hex_float_literal,\n];\nTokenTypes.element_count_expression = [\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.ident,\n];\nTokenTypes.template_types = [\n    _a.keywords.vec2,\n    _a.keywords.vec3,\n    _a.keywords.vec4,\n    _a.keywords.mat2x2,\n    _a.keywords.mat2x3,\n    _a.keywords.mat2x4,\n    _a.keywords.mat3x2,\n    _a.keywords.mat3x3,\n    _a.keywords.mat3x4,\n    _a.keywords.mat4x2,\n    _a.keywords.mat4x3,\n    _a.keywords.mat4x4,\n    _a.keywords.atomic,\n    _a.keywords.bitcast,\n    ..._a.any_texture_type,\n];\n// The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\n// The attribute grammar should be ident | block.\nTokenTypes.attribute_name = [_a.tokens.ident, _a.keywords.block];\nTokenTypes.assignment_operators = [\n    _a.tokens.equal,\n    _a.tokens.plus_equal,\n    _a.tokens.minus_equal,\n    _a.tokens.times_equal,\n    _a.tokens.division_equal,\n    _a.tokens.modulo_equal,\n    _a.tokens.and_equal,\n    _a.tokens.or_equal,\n    _a.tokens.xor_equal,\n    _a.tokens.shift_right_equal,\n    _a.tokens.shift_left_equal,\n];\nTokenTypes.increment_operators = [\n    _a.tokens.plus_plus,\n    _a.tokens.minus_minus,\n];\n/// A token parsed by the WgslScanner.\nclass Token {\n    constructor(type, lexeme, line) {\n        this.type = type;\n        this.lexeme = lexeme;\n        this.line = line;\n    }\n    toString() {\n        return this.lexeme;\n    }\n    isTemplateType() {\n        return TokenTypes.template_types.indexOf(this.type) != -1;\n    }\n    isArrayType() {\n        return this.type == TokenTypes.keywords.array;\n    }\n    isArrayOrTemplateType() {\n        return this.isArrayType() || this.isTemplateType();\n    }\n}\n/// Lexical scanner for the WGSL language. This takes an input source text and generates a list\n/// of Token objects, which can then be fed into the WgslParser to generate an AST.\nclass WgslScanner {\n    constructor(source) {\n        this._tokens = [];\n        this._start = 0;\n        this._current = 0;\n        this._line = 1;\n        this._source = source !== null && source !== void 0 ? source : \"\";\n    }\n    /// Scan all tokens from the source.\n    scanTokens() {\n        while (!this._isAtEnd()) {\n            this._start = this._current;\n            if (!this.scanToken())\n                throw `Invalid syntax at line ${this._line}`;\n        }\n        this._tokens.push(new Token(TokenTypes.eof, \"\", this._line));\n        return this._tokens;\n    }\n    /// Scan a single token from the source.\n    scanToken() {\n        // Find the longest consecutive set of characters that match a rule.\n        let lexeme = this._advance();\n        // Skip line-feed, adding to the line counter.\n        if (lexeme == \"\\n\") {\n            this._line++;\n            return true;\n        }\n        // Skip whitespace\n        if (this._isWhitespace(lexeme)) {\n            return true;\n        }\n        if (lexeme == \"/\") {\n            // If it's a // comment, skip everything until the next line-feed.\n            if (this._peekAhead() == \"/\") {\n                while (lexeme != \"\\n\") {\n                    if (this._isAtEnd())\n                        return true;\n                    lexeme = this._advance();\n                }\n                // skip the linefeed\n                this._line++;\n                return true;\n            }\n            else if (this._peekAhead() == \"*\") {\n                // If it's a / * block comment, skip everything until the matching * /,\n                // allowing for nested block comments.\n                this._advance();\n                let commentLevel = 1;\n                while (commentLevel > 0) {\n                    if (this._isAtEnd())\n                        return true;\n                    lexeme = this._advance();\n                    if (lexeme == \"\\n\") {\n                        this._line++;\n                    }\n                    else if (lexeme == \"*\") {\n                        if (this._peekAhead() == \"/\") {\n                            this._advance();\n                            commentLevel--;\n                            if (commentLevel == 0) {\n                                return true;\n                            }\n                        }\n                    }\n                    else if (lexeme == \"/\") {\n                        if (this._peekAhead() == \"*\") {\n                            this._advance();\n                            commentLevel++;\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n        let matchType = TokenTypes.none;\n        for (;;) {\n            let matchedType = this._findType(lexeme);\n            // An exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a\n            // shift_right.\n            // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\n            // and one to close the array).\n            // Another ambiguity is '>='. In the case of vec2<i32>=vec2(1,2),\n            // it's a greather_than and an equal, not a greater_than_equal.\n            // WGSL requires context sensitive parsing to resolve these ambiguities. Both of these cases\n            // are predicated on it the > either closing a template, or being part of an operator.\n            // The solution here is to check if there was a less_than up to some number of tokens\n            // previously, and the token prior to that is a keyword that requires a '<', then it will be\n            // split into two operators; otherwise it's a single operator.\n            const nextLexeme = this._peekAhead();\n            if (lexeme == \">\" && (nextLexeme == \">\" || nextLexeme == \"=\")) {\n                let foundLessThan = false;\n                let ti = this._tokens.length - 1;\n                for (let count = 0; count < 5 && ti >= 0; ++count, --ti) {\n                    if (this._tokens[ti].type === TokenTypes.tokens.less_than) {\n                        if (ti > 0 && this._tokens[ti - 1].isArrayOrTemplateType()) {\n                            foundLessThan = true;\n                        }\n                        break;\n                    }\n                }\n                // If there was a less_than in the recent token history, then this is probably a\n                // greater_than.\n                if (foundLessThan) {\n                    this._addToken(matchedType);\n                    return true;\n                }\n            }\n            // The current lexeme may not match any rule, but some token types may be invalid for\n            // part of the string but valid after a few more characters.\n            // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\n            // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\n            // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\n            // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\n            // hex_float_literal. So that means if we hit an non-matching string, we should look\n            // ahead up to two characters to see if the string starts matching a valid rule again.\n            if (matchedType === TokenTypes.none) {\n                let lookAheadLexeme = lexeme;\n                let lookAhead = 0;\n                const maxLookAhead = 2;\n                for (let li = 0; li < maxLookAhead; ++li) {\n                    lookAheadLexeme += this._peekAhead(li);\n                    matchedType = this._findType(lookAheadLexeme);\n                    if (matchedType !== TokenTypes.none) {\n                        lookAhead = li;\n                        break;\n                    }\n                }\n                if (matchedType === TokenTypes.none) {\n                    if (matchType === TokenTypes.none)\n                        return false;\n                    this._current--;\n                    this._addToken(matchType);\n                    return true;\n                }\n                lexeme = lookAheadLexeme;\n                this._current += lookAhead + 1;\n            }\n            matchType = matchedType;\n            if (this._isAtEnd())\n                break;\n            lexeme += this._advance();\n        }\n        // We got to the end of the input stream. Then the token we've ready so far is it.\n        if (matchType === TokenTypes.none)\n            return false;\n        this._addToken(matchType);\n        return true;\n    }\n    _findType(lexeme) {\n        for (const name in TokenTypes.keywords) {\n            const type = TokenTypes.keywords[name];\n            if (this._match(lexeme, type.rule)) {\n                return type;\n            }\n        }\n        for (const name in TokenTypes.tokens) {\n            const type = TokenTypes.tokens[name];\n            if (this._match(lexeme, type.rule)) {\n                return type;\n            }\n        }\n        return TokenTypes.none;\n    }\n    _match(lexeme, rule) {\n        if (typeof rule === \"string\") {\n            if (rule == lexeme) {\n                return true;\n            }\n        }\n        else {\n            // regex\n            const match = rule.exec(lexeme);\n            if (match && match.index == 0 && match[0] == lexeme)\n                return true;\n        }\n        return false;\n    }\n    _isAtEnd() {\n        return this._current >= this._source.length;\n    }\n    _isWhitespace(c) {\n        return c == \" \" || c == \"\\t\" || c == \"\\r\";\n    }\n    _advance(amount = 0) {\n        let c = this._source[this._current];\n        amount = amount || 0;\n        amount++;\n        this._current += amount;\n        return c;\n    }\n    _peekAhead(offset = 0) {\n        offset = offset || 0;\n        if (this._current + offset >= this._source.length)\n            return \"\\0\";\n        return this._source[this._current + offset];\n    }\n    _addToken(type) {\n        const text = this._source.substring(this._start, this._current);\n        this._tokens.push(new Token(type, text, this._line));\n    }\n}\n\n/**\n * @author Brendan Duncan / https://github.com/brendan-duncan\n */\n/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).\nclass WgslParser {\n    constructor() {\n        this._tokens = [];\n        this._current = 0;\n        this._context = new ParseContext();\n    }\n    parse(tokensOrCode) {\n        this._initialize(tokensOrCode);\n        let statements = [];\n        while (!this._isAtEnd()) {\n            const statement = this._global_decl_or_directive();\n            if (!statement)\n                break;\n            statements.push(statement);\n        }\n        return statements;\n    }\n    _initialize(tokensOrCode) {\n        if (tokensOrCode) {\n            if (typeof tokensOrCode == \"string\") {\n                const scanner = new WgslScanner(tokensOrCode);\n                this._tokens = scanner.scanTokens();\n            }\n            else {\n                this._tokens = tokensOrCode;\n            }\n        }\n        else {\n            this._tokens = [];\n        }\n        this._current = 0;\n    }\n    _error(token, message) {\n        console.error(token, message);\n        return {\n            token,\n            message,\n            toString: function () {\n                return `${message}`;\n            },\n        };\n    }\n    _isAtEnd() {\n        return (this._current >= this._tokens.length ||\n            this._peek().type == TokenTypes.eof);\n    }\n    _match(types) {\n        if (types instanceof TokenType) {\n            if (this._check(types)) {\n                this._advance();\n                return true;\n            }\n            return false;\n        }\n        for (let i = 0, l = types.length; i < l; ++i) {\n            const type = types[i];\n            if (this._check(type)) {\n                this._advance();\n                return true;\n            }\n        }\n        return false;\n    }\n    _consume(types, message) {\n        if (this._check(types))\n            return this._advance();\n        throw this._error(this._peek(), message);\n    }\n    _check(types) {\n        if (this._isAtEnd())\n            return false;\n        const tk = this._peek();\n        if (types instanceof Array) {\n            let t = tk.type;\n            let index = types.indexOf(t);\n            return index != -1;\n        }\n        return tk.type == types;\n    }\n    _advance() {\n        if (!this._isAtEnd())\n            this._current++;\n        return this._previous();\n    }\n    _peek() {\n        return this._tokens[this._current];\n    }\n    _previous() {\n        return this._tokens[this._current - 1];\n    }\n    _global_decl_or_directive() {\n        // semicolon\n        // global_variable_decl semicolon\n        // global_constant_decl semicolon\n        // type_alias semicolon\n        // struct_decl\n        // function_decl\n        // enable_directive\n        // Ignore any stand-alone semicolons\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\n            ;\n        if (this._match(TokenTypes.keywords.alias)) {\n            const type = this._type_alias();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return type;\n        }\n        if (this._match(TokenTypes.keywords.enable)) {\n            const enable = this._enable_directive();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return enable;\n        }\n        // The following statements have an optional attribute*\n        const attrs = this._attribute();\n        if (this._check(TokenTypes.keywords.var)) {\n            const _var = this._global_variable_decl();\n            if (_var != null)\n                _var.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _var;\n        }\n        if (this._check(TokenTypes.keywords.override)) {\n            const _override = this._override_variable_decl();\n            if (_override != null)\n                _override.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _override;\n        }\n        if (this._check(TokenTypes.keywords.let)) {\n            const _let = this._global_let_decl();\n            if (_let != null)\n                _let.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _let;\n        }\n        if (this._check(TokenTypes.keywords.const)) {\n            const _const = this._global_const_decl();\n            if (_const != null)\n                _const.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _const;\n        }\n        if (this._check(TokenTypes.keywords.struct)) {\n            const _struct = this._struct_decl();\n            if (_struct != null)\n                _struct.attributes = attrs;\n            return _struct;\n        }\n        if (this._check(TokenTypes.keywords.fn)) {\n            const _fn = this._function_decl();\n            if (_fn != null)\n                _fn.attributes = attrs;\n            return _fn;\n        }\n        return null;\n    }\n    _function_decl() {\n        // attribute* function_header compound_statement\n        // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\n        if (!this._match(TokenTypes.keywords.fn))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\").toString();\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '(' for function arguments.\");\n        const args = [];\n        if (!this._check(TokenTypes.tokens.paren_right)) {\n            do {\n                if (this._check(TokenTypes.tokens.paren_right))\n                    break;\n                const argAttrs = this._attribute();\n                const name = this._consume(TokenTypes.tokens.ident, \"Expected argument name.\").toString();\n                this._consume(TokenTypes.tokens.colon, \"Expected ':' for argument type.\");\n                const typeAttrs = this._attribute();\n                const type = this._type_decl();\n                if (type != null) {\n                    type.attributes = typeAttrs;\n                    args.push(new Argument(name, type, argAttrs));\n                }\n            } while (this._match(TokenTypes.tokens.comma));\n        }\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' after function arguments.\");\n        let _return = null;\n        if (this._match(TokenTypes.tokens.arrow)) {\n            const attrs = this._attribute();\n            _return = this._type_decl();\n            if (_return != null)\n                _return.attributes = attrs;\n        }\n        const body = this._compound_statement();\n        return new Function(name, args, _return, body);\n    }\n    _compound_statement() {\n        // brace_left statement* brace_right\n        const statements = [];\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for block.\");\n        while (!this._check(TokenTypes.tokens.brace_right)) {\n            const statement = this._statement();\n            if (statement !== null)\n                statements.push(statement);\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for block.\");\n        return statements;\n    }\n    _statement() {\n        // semicolon\n        // return_statement semicolon\n        // if_statement\n        // switch_statement\n        // loop_statement\n        // for_statement\n        // func_call_statement semicolon\n        // variable_statement semicolon\n        // break_statement semicolon\n        // continue_statement semicolon\n        // continuing_statement compound_statement\n        // discard semicolon\n        // assignment_statement semicolon\n        // compound_statement\n        // increment_statement semicolon\n        // decrement_statement semicolon\n        // static_assert_statement semicolon\n        // Ignore any stand-alone semicolons\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\n            ;\n        if (this._check(TokenTypes.keywords.if))\n            return this._if_statement();\n        if (this._check(TokenTypes.keywords.switch))\n            return this._switch_statement();\n        if (this._check(TokenTypes.keywords.loop))\n            return this._loop_statement();\n        if (this._check(TokenTypes.keywords.for))\n            return this._for_statement();\n        if (this._check(TokenTypes.keywords.while))\n            return this._while_statement();\n        if (this._check(TokenTypes.keywords.continuing))\n            return this._continuing_statement();\n        if (this._check(TokenTypes.keywords.static_assert))\n            return this._static_assert_statement();\n        if (this._check(TokenTypes.tokens.brace_left))\n            return this._compound_statement();\n        let result = null;\n        if (this._check(TokenTypes.keywords.return))\n            result = this._return_statement();\n        else if (this._check([\n            TokenTypes.keywords.var,\n            TokenTypes.keywords.let,\n            TokenTypes.keywords.const,\n        ]))\n            result = this._variable_statement();\n        else if (this._match(TokenTypes.keywords.discard))\n            result = new Discard();\n        else if (this._match(TokenTypes.keywords.break))\n            result = new Break();\n        else if (this._match(TokenTypes.keywords.continue))\n            result = new Continue();\n        else\n            result =\n                this._increment_decrement_statement() ||\n                    this._func_call_statement() ||\n                    this._assignment_statement();\n        if (result != null)\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';' after statement.\");\n        return result;\n    }\n    _static_assert_statement() {\n        if (!this._match(TokenTypes.keywords.static_assert))\n            return null;\n        let expression = this._optional_paren_expression();\n        return new StaticAssert(expression);\n    }\n    _while_statement() {\n        if (!this._match(TokenTypes.keywords.while))\n            return null;\n        let condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        return new While(condition, block);\n    }\n    _continuing_statement() {\n        if (!this._match(TokenTypes.keywords.continuing))\n            return null;\n        const block = this._compound_statement();\n        return new Continuing(block);\n    }\n    _for_statement() {\n        // for paren_left for_header paren_right compound_statement\n        if (!this._match(TokenTypes.keywords.for))\n            return null;\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\n        const init = !this._check(TokenTypes.tokens.semicolon)\n            ? this._for_init()\n            : null;\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n        const condition = !this._check(TokenTypes.tokens.semicolon)\n            ? this._short_circuit_or_expression()\n            : null;\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n        const increment = !this._check(TokenTypes.tokens.paren_right)\n            ? this._for_increment()\n            : null;\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        const body = this._compound_statement();\n        return new For(init, condition, increment, body);\n    }\n    _for_init() {\n        // (variable_statement assignment_statement func_call_statement)?\n        return (this._variable_statement() ||\n            this._func_call_statement() ||\n            this._assignment_statement());\n    }\n    _for_increment() {\n        // (assignment_statement func_call_statement increment_statement)?\n        return (this._func_call_statement() ||\n            this._increment_decrement_statement() ||\n            this._assignment_statement());\n    }\n    _variable_statement() {\n        // variable_decl\n        // variable_decl equal short_circuit_or_expression\n        // let (ident variable_ident_decl) equal short_circuit_or_expression\n        // const (ident variable_ident_decl) equal short_circuit_or_expression\n        if (this._check(TokenTypes.keywords.var)) {\n            const _var = this._variable_decl();\n            if (_var === null)\n                throw this._error(this._peek(), \"Variable declaration expected.\");\n            let value = null;\n            if (this._match(TokenTypes.tokens.equal))\n                value = this._short_circuit_or_expression();\n            return new Var(_var.name, _var.type, _var.storage, _var.access, value);\n        }\n        if (this._match(TokenTypes.keywords.let)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for let.\").toString();\n            let type = null;\n            if (this._match(TokenTypes.tokens.colon)) {\n                const typeAttrs = this._attribute();\n                type = this._type_decl();\n                if (type != null)\n                    type.attributes = typeAttrs;\n            }\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for let.\");\n            const value = this._short_circuit_or_expression();\n            return new Let(name, type, null, null, value);\n        }\n        if (this._match(TokenTypes.keywords.const)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for const.\").toString();\n            let type = null;\n            if (this._match(TokenTypes.tokens.colon)) {\n                const typeAttrs = this._attribute();\n                type = this._type_decl();\n                if (type != null)\n                    type.attributes = typeAttrs;\n            }\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for const.\");\n            const value = this._short_circuit_or_expression();\n            return new Const(name, type, null, null, value);\n        }\n        return null;\n    }\n    _increment_decrement_statement() {\n        const savedPos = this._current;\n        const _var = this._unary_expression();\n        if (_var == null)\n            return null;\n        if (!this._check(TokenTypes.increment_operators)) {\n            this._current = savedPos;\n            return null;\n        }\n        const token = this._consume(TokenTypes.increment_operators, \"Expected increment operator\");\n        return new Increment(token.type === TokenTypes.tokens.plus_plus\n            ? IncrementOperator.increment\n            : IncrementOperator.decrement, _var);\n    }\n    _assignment_statement() {\n        // (unary_expression underscore) equal short_circuit_or_expression\n        let _var = null;\n        if (this._check(TokenTypes.tokens.brace_right))\n            return null;\n        let isUnderscore = this._match(TokenTypes.tokens.underscore);\n        if (!isUnderscore)\n            _var = this._unary_expression();\n        if (!isUnderscore && _var == null)\n            return null;\n        const type = this._consume(TokenTypes.assignment_operators, \"Expected assignment operator.\");\n        const value = this._short_circuit_or_expression();\n        return new Assign(AssignOperator.parse(type.lexeme), _var, value);\n    }\n    _func_call_statement() {\n        // ident argument_expression_list\n        if (!this._check(TokenTypes.tokens.ident))\n            return null;\n        const savedPos = this._current;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\");\n        const args = this._argument_expression_list();\n        if (args === null) {\n            this._current = savedPos;\n            return null;\n        }\n        return new Call(name.lexeme, args);\n    }\n    _loop_statement() {\n        // loop brace_left statement* continuing_statement? brace_right\n        if (!this._match(TokenTypes.keywords.loop))\n            return null;\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for loop.\");\n        // statement*\n        const statements = [];\n        let statement = this._statement();\n        while (statement !== null) {\n            if (Array.isArray(statement)) {\n                for (let s of statement) {\n                    statements.push(s);\n                }\n            }\n            else {\n                statements.push(statement);\n            }\n            statement = this._statement();\n        }\n        // continuing_statement: continuing compound_statement\n        let continuing = null;\n        if (this._match(TokenTypes.keywords.continuing))\n            continuing = this._compound_statement();\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for loop.\");\n        return new Loop(statements, continuing);\n    }\n    _switch_statement() {\n        // switch optional_paren_expression brace_left switch_body+ brace_right\n        if (!this._match(TokenTypes.keywords.switch))\n            return null;\n        const condition = this._optional_paren_expression();\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for switch.\");\n        const body = this._switch_body();\n        if (body == null || body.length == 0)\n            throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for switch.\");\n        return new Switch(condition, body);\n    }\n    _switch_body() {\n        // case case_selectors colon brace_left case_body? brace_right\n        // default colon brace_left case_body? brace_right\n        const cases = [];\n        if (this._match(TokenTypes.keywords.case)) {\n            const selector = this._case_selectors();\n            this._match(TokenTypes.tokens.colon); // colon is optional\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch case.\");\n            const body = this._case_body();\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch case.\");\n            cases.push(new Case(selector, body));\n        }\n        if (this._match(TokenTypes.keywords.default)) {\n            this._match(TokenTypes.tokens.colon); // colon is optional\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch default.\");\n            const body = this._case_body();\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch default.\");\n            cases.push(new Default(body));\n        }\n        if (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {\n            const _cases = this._switch_body();\n            cases.push(_cases[0]);\n        }\n        return cases;\n    }\n    _case_selectors() {\n        var _a, _b, _c, _d;\n        // const_literal (comma const_literal)* comma?\n        const selectors = [\n            (_b = (_a = this._shift_expression()) === null || _a === void 0 ? void 0 : _a.evaluate(this._context).toString()) !== null && _b !== void 0 ? _b : \"\",\n        ];\n        while (this._match(TokenTypes.tokens.comma)) {\n            selectors.push((_d = (_c = this._shift_expression()) === null || _c === void 0 ? void 0 : _c.evaluate(this._context).toString()) !== null && _d !== void 0 ? _d : \"\");\n        }\n        return selectors;\n    }\n    _case_body() {\n        // statement case_body?\n        // fallthrough semicolon\n        if (this._match(TokenTypes.keywords.fallthrough)) {\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return [];\n        }\n        let statement = this._statement();\n        if (statement == null)\n            return [];\n        if (!(statement instanceof Array)) {\n            statement = [statement];\n        }\n        const nextStatement = this._case_body();\n        if (nextStatement.length == 0)\n            return statement;\n        return [...statement, nextStatement[0]];\n    }\n    _if_statement() {\n        // if optional_paren_expression compound_statement elseif_statement? else_statement?\n        if (!this._match(TokenTypes.keywords.if))\n            return null;\n        const condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        let elseif = [];\n        if (this._match_elseif()) {\n            elseif = this._elseif_statement(elseif);\n        }\n        let _else = null;\n        if (this._match(TokenTypes.keywords.else))\n            _else = this._compound_statement();\n        return new If(condition, block, elseif, _else);\n    }\n    _match_elseif() {\n        if (this._tokens[this._current].type === TokenTypes.keywords.else &&\n            this._tokens[this._current + 1].type === TokenTypes.keywords.if) {\n            this._advance();\n            this._advance();\n            return true;\n        }\n        return false;\n    }\n    _elseif_statement(elseif = []) {\n        // else_if optional_paren_expression compound_statement elseif_statement?\n        const condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        elseif.push(new ElseIf(condition, block));\n        if (this._match_elseif()) {\n            this._elseif_statement(elseif);\n        }\n        return elseif;\n    }\n    _return_statement() {\n        // return short_circuit_or_expression?\n        if (!this._match(TokenTypes.keywords.return))\n            return null;\n        const value = this._short_circuit_or_expression();\n        return new Return(value);\n    }\n    _short_circuit_or_expression() {\n        // short_circuit_and_expression\n        // short_circuit_or_expression or_or short_circuit_and_expression\n        let expr = this._short_circuit_and_expr();\n        while (this._match(TokenTypes.tokens.or_or)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._short_circuit_and_expr());\n        }\n        return expr;\n    }\n    _short_circuit_and_expr() {\n        // inclusive_or_expression\n        // short_circuit_and_expression and_and inclusive_or_expression\n        let expr = this._inclusive_or_expression();\n        while (this._match(TokenTypes.tokens.and_and)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._inclusive_or_expression());\n        }\n        return expr;\n    }\n    _inclusive_or_expression() {\n        // exclusive_or_expression\n        // inclusive_or_expression or exclusive_or_expression\n        let expr = this._exclusive_or_expression();\n        while (this._match(TokenTypes.tokens.or)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._exclusive_or_expression());\n        }\n        return expr;\n    }\n    _exclusive_or_expression() {\n        // and_expression\n        // exclusive_or_expression xor and_expression\n        let expr = this._and_expression();\n        while (this._match(TokenTypes.tokens.xor)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._and_expression());\n        }\n        return expr;\n    }\n    _and_expression() {\n        // equality_expression\n        // and_expression and equality_expression\n        let expr = this._equality_expression();\n        while (this._match(TokenTypes.tokens.and)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._equality_expression());\n        }\n        return expr;\n    }\n    _equality_expression() {\n        // relational_expression\n        // relational_expression equal_equal relational_expression\n        // relational_expression not_equal relational_expression\n        const expr = this._relational_expression();\n        if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {\n            return new BinaryOperator(this._previous().toString(), expr, this._relational_expression());\n        }\n        return expr;\n    }\n    _relational_expression() {\n        // shift_expression\n        // relational_expression less_than shift_expression\n        // relational_expression greater_than shift_expression\n        // relational_expression less_than_equal shift_expression\n        // relational_expression greater_than_equal shift_expression\n        let expr = this._shift_expression();\n        while (this._match([\n            TokenTypes.tokens.less_than,\n            TokenTypes.tokens.greater_than,\n            TokenTypes.tokens.less_than_equal,\n            TokenTypes.tokens.greater_than_equal,\n        ])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._shift_expression());\n        }\n        return expr;\n    }\n    _shift_expression() {\n        // additive_expression\n        // shift_expression shift_left additive_expression\n        // shift_expression shift_right additive_expression\n        let expr = this._additive_expression();\n        while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._additive_expression());\n        }\n        return expr;\n    }\n    _additive_expression() {\n        // multiplicative_expression\n        // additive_expression plus multiplicative_expression\n        // additive_expression minus multiplicative_expression\n        let expr = this._multiplicative_expression();\n        while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._multiplicative_expression());\n        }\n        return expr;\n    }\n    _multiplicative_expression() {\n        // unary_expression\n        // multiplicative_expression star unary_expression\n        // multiplicative_expression forward_slash unary_expression\n        // multiplicative_expression modulo unary_expression\n        let expr = this._unary_expression();\n        while (this._match([\n            TokenTypes.tokens.star,\n            TokenTypes.tokens.forward_slash,\n            TokenTypes.tokens.modulo,\n        ])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._unary_expression());\n        }\n        return expr;\n    }\n    _unary_expression() {\n        // singular_expression\n        // minus unary_expression\n        // bang unary_expression\n        // tilde unary_expression\n        // star unary_expression\n        // and unary_expression\n        if (this._match([\n            TokenTypes.tokens.minus,\n            TokenTypes.tokens.bang,\n            TokenTypes.tokens.tilde,\n            TokenTypes.tokens.star,\n            TokenTypes.tokens.and,\n        ])) {\n            return new UnaryOperator(this._previous().toString(), this._unary_expression());\n        }\n        return this._singular_expression();\n    }\n    _singular_expression() {\n        // primary_expression postfix_expression ?\n        const expr = this._primary_expression();\n        const p = this._postfix_expression();\n        if (p)\n            expr.postfix = p;\n        return expr;\n    }\n    _postfix_expression() {\n        // bracket_left short_circuit_or_expression bracket_right postfix_expression?\n        if (this._match(TokenTypes.tokens.bracket_left)) {\n            const expr = this._short_circuit_or_expression();\n            this._consume(TokenTypes.tokens.bracket_right, \"Expected ']'.\");\n            const p = this._postfix_expression();\n            if (p)\n                expr.postfix = p;\n            return expr;\n        }\n        // period ident postfix_expression?\n        if (this._match(TokenTypes.tokens.period)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected member name.\");\n            const p = this._postfix_expression();\n            const expr = new StringExpr(name.lexeme);\n            if (p)\n                expr.postfix = p;\n            return expr;\n        }\n        return null;\n    }\n    _getStruct(name) {\n        if (this._context.aliases.has(name)) {\n            const alias = this._context.aliases.get(name).type;\n            return alias;\n        }\n        if (this._context.structs.has(name)) {\n            const struct = this._context.structs.get(name);\n            return struct;\n        }\n        return null;\n    }\n    _primary_expression() {\n        // ident argument_expression_list?\n        if (this._match(TokenTypes.tokens.ident)) {\n            const name = this._previous().toString();\n            if (this._check(TokenTypes.tokens.paren_left)) {\n                const args = this._argument_expression_list();\n                const struct = this._getStruct(name);\n                if (struct != null) {\n                    return new CreateExpr(struct, args);\n                }\n                return new CallExpr(name, args);\n            }\n            if (this._context.constants.has(name)) {\n                const c = this._context.constants.get(name);\n                return new ConstExpr(name, c.value);\n            }\n            return new VariableExpr(name);\n        }\n        // const_literal\n        if (this._match(TokenTypes.const_literal)) {\n            return new LiteralExpr(parseFloat(this._previous().toString()));\n        }\n        // paren_expression\n        if (this._check(TokenTypes.tokens.paren_left)) {\n            return this._paren_expression();\n        }\n        // bitcast less_than type_decl greater_than paren_expression\n        if (this._match(TokenTypes.keywords.bitcast)) {\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<'.\");\n            const type = this._type_decl();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\n            const value = this._paren_expression();\n            return new BitcastExpr(type, value);\n        }\n        // type_decl argument_expression_list\n        const type = this._type_decl();\n        const args = this._argument_expression_list();\n        return new TypecastExpr(type, args);\n    }\n    _argument_expression_list() {\n        // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\n        if (!this._match(TokenTypes.tokens.paren_left))\n            return null;\n        const args = [];\n        do {\n            if (this._check(TokenTypes.tokens.paren_right))\n                break;\n            const arg = this._short_circuit_or_expression();\n            args.push(arg);\n        } while (this._match(TokenTypes.tokens.comma));\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' for agument list\");\n        return args;\n    }\n    _optional_paren_expression() {\n        // [paren_left] short_circuit_or_expression [paren_right]\n        this._match(TokenTypes.tokens.paren_left);\n        const expr = this._short_circuit_or_expression();\n        this._match(TokenTypes.tokens.paren_right);\n        return new GroupingExpr([expr]);\n    }\n    _paren_expression() {\n        // paren_left short_circuit_or_expression paren_right\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        const expr = this._short_circuit_or_expression();\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        return new GroupingExpr([expr]);\n    }\n    _struct_decl() {\n        // attribute* struct ident struct_body_decl\n        if (!this._match(TokenTypes.keywords.struct))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected name for struct.\").toString();\n        // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for struct body.\");\n        const members = [];\n        while (!this._check(TokenTypes.tokens.brace_right)) {\n            // struct_member: attribute* variable_ident_decl\n            const memberAttrs = this._attribute();\n            const memberName = this._consume(TokenTypes.tokens.ident, \"Expected variable name.\").toString();\n            this._consume(TokenTypes.tokens.colon, \"Expected ':' for struct member type.\");\n            const typeAttrs = this._attribute();\n            const memberType = this._type_decl();\n            if (memberType != null)\n                memberType.attributes = typeAttrs;\n            if (!this._check(TokenTypes.tokens.brace_right))\n                this._consume(TokenTypes.tokens.comma, \"Expected ',' for struct member.\");\n            else\n                this._match(TokenTypes.tokens.comma); // trailing comma optional.\n            members.push(new Member(memberName, memberType, memberAttrs));\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' after struct body.\");\n        const structNode = new Struct(name, members);\n        this._context.structs.set(name, structNode);\n        return structNode;\n    }\n    _global_variable_decl() {\n        // attribute* variable_decl (equal const_expression)?\n        const _var = this._variable_decl();\n        if (_var && this._match(TokenTypes.tokens.equal))\n            _var.value = this._const_expression();\n        return _var;\n    }\n    _override_variable_decl() {\n        // attribute* override_decl (equal const_expression)?\n        const _override = this._override_decl();\n        if (_override && this._match(TokenTypes.tokens.equal))\n            _override.value = this._const_expression();\n        return _override;\n    }\n    _global_const_decl() {\n        // attribute* const (ident variable_ident_decl) global_const_initializer?\n        if (!this._match(TokenTypes.keywords.const))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        let value = null;\n        if (this._match(TokenTypes.tokens.equal)) {\n            const valueExpr = this._short_circuit_or_expression();\n            if (valueExpr instanceof CreateExpr) {\n                value = valueExpr;\n            }\n            else if (valueExpr instanceof ConstExpr &&\n                valueExpr.initializer instanceof CreateExpr) {\n                value = valueExpr.initializer;\n            }\n            else {\n                try {\n                    const constValue = valueExpr.evaluate(this._context);\n                    value = new LiteralExpr(constValue);\n                }\n                catch (_a) {\n                    value = valueExpr;\n                }\n            }\n        }\n        const c = new Const(name.toString(), type, \"\", \"\", value);\n        this._context.constants.set(c.name, c);\n        return c;\n    }\n    _global_let_decl() {\n        // attribute* let (ident variable_ident_decl) global_const_initializer?\n        if (!this._match(TokenTypes.keywords.let))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        let value = null;\n        if (this._match(TokenTypes.tokens.equal)) {\n            value = this._const_expression();\n        }\n        return new Let(name.toString(), type, \"\", \"\", value);\n    }\n    _const_expression() {\n        // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\n        // const_literal\n        if (this._match(TokenTypes.const_literal))\n            return new StringExpr(this._previous().toString());\n        const type = this._type_decl();\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        let args = [];\n        while (!this._check(TokenTypes.tokens.paren_right)) {\n            args.push(this._const_expression());\n            if (!this._check(TokenTypes.tokens.comma))\n                break;\n            this._advance();\n        }\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        return new CreateExpr(type, args);\n    }\n    _variable_decl() {\n        // var variable_qualifier? (ident variable_ident_decl)\n        if (!this._match(TokenTypes.keywords.var))\n            return null;\n        // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\n        let storage = \"\";\n        let access = \"\";\n        if (this._match(TokenTypes.tokens.less_than)) {\n            storage = this._consume(TokenTypes.storage_class, \"Expected storage_class.\").toString();\n            if (this._match(TokenTypes.tokens.comma))\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode.\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\n        }\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        return new Var(name.toString(), type, storage, access, null);\n    }\n    _override_decl() {\n        // override (ident variable_ident_decl)\n        if (!this._match(TokenTypes.keywords.override))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        return new Override(name.toString(), type, null);\n    }\n    _enable_directive() {\n        // enable ident semicolon\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n        return new Enable(name.toString());\n    }\n    _type_alias() {\n        // type ident equal type_decl\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n        this._consume(TokenTypes.tokens.equal, \"Expected '=' for type alias.\");\n        let aliasType = this._type_decl();\n        if (aliasType === null) {\n            throw this._error(this._peek(), \"Expected Type for Alias.\");\n        }\n        if (this._context.aliases.has(aliasType.name)) {\n            aliasType = this._context.aliases.get(aliasType.name).type;\n        }\n        const aliasNode = new Alias(name.toString(), aliasType);\n        this._context.aliases.set(aliasNode.name, aliasNode);\n        return aliasNode;\n    }\n    _type_decl() {\n        // ident\n        // bool\n        // float32\n        // int32\n        // uint32\n        // vec2 less_than type_decl greater_than\n        // vec3 less_than type_decl greater_than\n        // vec4 less_than type_decl greater_than\n        // mat2x2 less_than type_decl greater_than\n        // mat2x3 less_than type_decl greater_than\n        // mat2x4 less_than type_decl greater_than\n        // mat3x2 less_than type_decl greater_than\n        // mat3x3 less_than type_decl greater_than\n        // mat3x4 less_than type_decl greater_than\n        // mat4x2 less_than type_decl greater_than\n        // mat4x3 less_than type_decl greater_than\n        // mat4x4 less_than type_decl greater_than\n        // atomic less_than type_decl greater_than\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\n        // array_type_decl\n        // texture_sampler_types\n        if (this._check([\n            TokenTypes.tokens.ident,\n            ...TokenTypes.texel_format,\n            TokenTypes.keywords.bool,\n            TokenTypes.keywords.f32,\n            TokenTypes.keywords.i32,\n            TokenTypes.keywords.u32,\n        ])) {\n            const type = this._advance();\n            const typeName = type.toString();\n            if (this._context.structs.has(typeName)) {\n                return this._context.structs.get(typeName);\n            }\n            if (this._context.aliases.has(typeName)) {\n                return this._context.aliases.get(typeName).type;\n            }\n            return new Type(type.toString());\n        }\n        // texture_sampler_types\n        let type = this._texture_sampler_types();\n        if (type)\n            return type;\n        if (this._check(TokenTypes.template_types)) {\n            let type = this._advance().toString();\n            let format = null;\n            let access = null;\n            if (this._match(TokenTypes.tokens.less_than)) {\n                format = this._type_decl();\n                access = null;\n                if (this._match(TokenTypes.tokens.comma))\n                    access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for type.\");\n            }\n            return new TemplateType(type, format, access);\n        }\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\n        if (this._match(TokenTypes.keywords.ptr)) {\n            let pointer = this._previous().toString();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for pointer.\");\n            const storage = this._consume(TokenTypes.storage_class, \"Expected storage_class for pointer\");\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' for pointer.\");\n            const decl = this._type_decl();\n            let access = null;\n            if (this._match(TokenTypes.tokens.comma))\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for pointer.\");\n            return new PointerType(pointer, storage.toString(), decl, access);\n        }\n        // The following type_decl's have an optional attribyte_list*\n        const attrs = this._attribute();\n        // attribute* array\n        // attribute* array less_than type_decl (comma element_count_expression)? greater_than\n        if (this._match(TokenTypes.keywords.array)) {\n            let format = null;\n            let countInt = -1;\n            const array = this._previous();\n            if (this._match(TokenTypes.tokens.less_than)) {\n                format = this._type_decl();\n                if (this._context.aliases.has(format.name)) {\n                    format = this._context.aliases.get(format.name).type;\n                }\n                let count = \"\";\n                if (this._match(TokenTypes.tokens.comma)) {\n                    let c = this._shift_expression();\n                    count = c.evaluate(this._context).toString();\n                }\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for array.\");\n                countInt = count ? parseInt(count) : 0;\n            }\n            return new ArrayType(array.toString(), attrs, format, countInt);\n        }\n        return null;\n    }\n    _texture_sampler_types() {\n        // sampler_type\n        if (this._match(TokenTypes.sampler_type))\n            return new SamplerType(this._previous().toString(), null, null);\n        // depth_texture_type\n        if (this._match(TokenTypes.depth_texture_type))\n            return new SamplerType(this._previous().toString(), null, null);\n        // sampled_texture_type less_than type_decl greater_than\n        // multisampled_texture_type less_than type_decl greater_than\n        if (this._match(TokenTypes.sampled_texture_type) ||\n            this._match(TokenTypes.multisampled_texture_type)) {\n            const sampler = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\n            const format = this._type_decl();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\n            return new SamplerType(sampler.toString(), format, null);\n        }\n        // storage_texture_type less_than texel_format comma access_mode greater_than\n        if (this._match(TokenTypes.storage_texture_type)) {\n            const sampler = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\n            const format = this._consume(TokenTypes.texel_format, \"Invalid texel format.\").toString();\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' after texel format.\");\n            const access = this._consume(TokenTypes.access_mode, \"Expected access mode for storage texture type.\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\n            return new SamplerType(sampler.toString(), format, access);\n        }\n        return null;\n    }\n    _attribute() {\n        // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\n        // attr ident\n        let attributes = [];\n        while (this._match(TokenTypes.tokens.attr)) {\n            const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\n            const attr = new Attribute(name.toString(), null);\n            if (this._match(TokenTypes.tokens.paren_left)) {\n                // literal_or_ident\n                attr.value = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                if (this._check(TokenTypes.tokens.comma)) {\n                    this._advance();\n                    do {\n                        const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                        if (!(attr.value instanceof Array)) {\n                            attr.value = [attr.value];\n                        }\n                        attr.value.push(v);\n                    } while (this._match(TokenTypes.tokens.comma));\n                }\n                this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n            }\n            attributes.push(attr);\n        }\n        // Deprecated:\n        // attr_left (attribute comma)* attribute attr_right\n        while (this._match(TokenTypes.tokens.attr_left)) {\n            if (!this._check(TokenTypes.tokens.attr_right)) {\n                do {\n                    const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\n                    const attr = new Attribute(name.toString(), null);\n                    if (this._match(TokenTypes.tokens.paren_left)) {\n                        // literal_or_ident\n                        attr.value = [\n                            this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString(),\n                        ];\n                        if (this._check(TokenTypes.tokens.comma)) {\n                            this._advance();\n                            do {\n                                const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                                attr.value.push(v);\n                            } while (this._match(TokenTypes.tokens.comma));\n                        }\n                        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n                    }\n                    attributes.push(attr);\n                } while (this._match(TokenTypes.tokens.comma));\n            }\n            // Consume ]]\n            this._consume(TokenTypes.tokens.attr_right, \"Expected ']]' after attribute declarations\");\n        }\n        if (attributes.length == 0)\n            return null;\n        return attributes;\n    }\n}\n\n/**\n * @author Brendan Duncan / https://github.com/brendan-duncan\n */\nclass TypeInfo {\n    constructor(name, attributes) {\n        this.name = name;\n        this.attributes = attributes;\n        this.size = 0;\n    }\n    get isArray() {\n        return false;\n    }\n    get isStruct() {\n        return false;\n    }\n    get isTemplate() {\n        return false;\n    }\n}\nclass MemberInfo {\n    constructor(name, type, attributes) {\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n        this.offset = 0;\n        this.size = 0;\n    }\n    get isArray() {\n        return this.type.isArray;\n    }\n    get isStruct() {\n        return this.type.isStruct;\n    }\n    get isTemplate() {\n        return this.type.isTemplate;\n    }\n    get align() {\n        return this.type.isStruct ? this.type.align : 0;\n    }\n    get members() {\n        return this.type.isStruct ? this.type.members : null;\n    }\n    get format() {\n        return this.type.isArray\n            ? this.type.format\n            : this.type.isTemplate\n                ? this.type.format\n                : null;\n    }\n    get count() {\n        return this.type.isArray ? this.type.count : 0;\n    }\n    get stride() {\n        return this.type.isArray ? this.type.stride : this.size;\n    }\n}\nclass StructInfo extends TypeInfo {\n    constructor(name, attributes) {\n        super(name, attributes);\n        this.members = [];\n        this.align = 0;\n    }\n    get isStruct() {\n        return true;\n    }\n}\nclass ArrayInfo extends TypeInfo {\n    constructor(name, attributes) {\n        super(name, attributes);\n        this.count = 0;\n        this.stride = 0;\n    }\n    get isArray() {\n        return true;\n    }\n}\nclass TemplateInfo extends TypeInfo {\n    constructor(name, format, attributes, access) {\n        super(name, attributes);\n        this.format = format;\n        this.access = access;\n    }\n    get isTemplate() {\n        return true;\n    }\n}\nvar ResourceType;\n(function (ResourceType) {\n    ResourceType[ResourceType[\"Uniform\"] = 0] = \"Uniform\";\n    ResourceType[ResourceType[\"Storage\"] = 1] = \"Storage\";\n    ResourceType[ResourceType[\"Texture\"] = 2] = \"Texture\";\n    ResourceType[ResourceType[\"Sampler\"] = 3] = \"Sampler\";\n    ResourceType[ResourceType[\"StorageTexture\"] = 4] = \"StorageTexture\";\n})(ResourceType || (ResourceType = {}));\nclass VariableInfo {\n    constructor(name, type, group, binding, attributes, resourceType, access) {\n        this.name = name;\n        this.type = type;\n        this.group = group;\n        this.binding = binding;\n        this.attributes = attributes;\n        this.resourceType = resourceType;\n        this.access = access;\n    }\n    get isArray() {\n        return this.type.isArray;\n    }\n    get isStruct() {\n        return this.type.isStruct;\n    }\n    get isTemplate() {\n        return this.type.isTemplate;\n    }\n    get size() {\n        return this.type.size;\n    }\n    get align() {\n        return this.type.isStruct ? this.type.align : 0;\n    }\n    get members() {\n        return this.type.isStruct ? this.type.members : null;\n    }\n    get format() {\n        return this.type.isArray\n            ? this.type.format\n            : this.type.isTemplate\n                ? this.type.format\n                : null;\n    }\n    get count() {\n        return this.type.isArray ? this.type.count : 0;\n    }\n    get stride() {\n        return this.type.isArray ? this.type.stride : this.size;\n    }\n}\nclass AliasInfo {\n    constructor(name, type) {\n        this.name = name;\n        this.type = type;\n    }\n}\nclass _TypeSize {\n    constructor(align, size) {\n        this.align = align;\n        this.size = size;\n    }\n}\nclass InputInfo {\n    constructor(name, type, locationType, location) {\n        this.name = name;\n        this.type = type;\n        this.locationType = locationType;\n        this.location = location;\n        this.interpolation = null;\n    }\n}\nclass OutputInfo {\n    constructor(name, type, locationType, location) {\n        this.name = name;\n        this.type = type;\n        this.locationType = locationType;\n        this.location = location;\n    }\n}\nclass FunctionInfo {\n    constructor(name, stage = null) {\n        this.stage = null;\n        this.inputs = [];\n        this.outputs = [];\n        this.name = name;\n        this.stage = stage;\n    }\n}\nclass EntryFunctions {\n    constructor() {\n        this.vertex = [];\n        this.fragment = [];\n        this.compute = [];\n    }\n}\nclass OverrideInfo {\n    constructor(name, type, attributes, id) {\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n        this.id = id;\n    }\n}\nclass WgslReflect {\n    constructor(code) {\n        /// All top-level uniform vars in the shader.\n        this.uniforms = [];\n        /// All top-level storage vars in the shader.\n        this.storage = [];\n        /// All top-level texture vars in the shader;\n        this.textures = [];\n        // All top-level sampler vars in the shader.\n        this.samplers = [];\n        /// All top-level type aliases in the shader.\n        this.aliases = [];\n        /// All top-level overrides in the shader.\n        this.overrides = [];\n        /// All top-level structs in the shader.\n        this.structs = [];\n        /// All entry functions in the shader: vertex, fragment, and/or compute.\n        this.entry = new EntryFunctions();\n        this._types = new Map();\n        if (code) {\n            this.update(code);\n        }\n    }\n    _isStorageTexture(type) {\n        return (type.name == \"texture_storage_1d\" ||\n            type.name == \"texture_storage_2d\" ||\n            type.name == \"texture_storage_2d_array\" ||\n            type.name == \"texture_storage_3d\");\n    }\n    update(code) {\n        const parser = new WgslParser();\n        const ast = parser.parse(code);\n        for (const node of ast) {\n            if (node instanceof Struct) {\n                const info = this._getTypeInfo(node, null);\n                if (info instanceof StructInfo) {\n                    this.structs.push(info);\n                }\n                continue;\n            }\n            if (node instanceof Alias) {\n                this.aliases.push(this._getAliasInfo(node));\n                continue;\n            }\n            if (node instanceof Override) {\n                const v = node;\n                const id = this._getAttributeNum(v.attributes, \"id\", 0);\n                const type = v.type != null ? this._getTypeInfo(v.type, v.attributes) : null;\n                this.overrides.push(new OverrideInfo(v.name, type, v.attributes, id));\n                continue;\n            }\n            if (this._isUniformVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Uniform, v.access);\n                this.uniforms.push(varInfo);\n                continue;\n            }\n            if (this._isStorageVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const isStorageTexture = this._isStorageTexture(type);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Storage, v.access);\n                this.storage.push(varInfo);\n                continue;\n            }\n            if (this._isTextureVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const isStorageTexture = this._isStorageTexture(type);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Texture, v.access);\n                if (isStorageTexture) {\n                    this.storage.push(varInfo);\n                }\n                else {\n                    this.textures.push(varInfo);\n                }\n                continue;\n            }\n            if (this._isSamplerVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Sampler, v.access);\n                this.samplers.push(varInfo);\n                continue;\n            }\n            if (node instanceof Function) {\n                const vertexStage = this._getAttribute(node, \"vertex\");\n                const fragmentStage = this._getAttribute(node, \"fragment\");\n                const computeStage = this._getAttribute(node, \"compute\");\n                const stage = vertexStage || fragmentStage || computeStage;\n                if (stage) {\n                    const fn = new FunctionInfo(node.name, stage.name);\n                    fn.inputs = this._getInputs(node.args);\n                    fn.outputs = this._getOutputs(node.returnType);\n                    this.entry[stage.name].push(fn);\n                }\n                continue;\n            }\n        }\n    }\n    getBindGroups() {\n        const groups = [];\n        function _makeRoom(group, binding) {\n            if (group >= groups.length)\n                groups.length = group + 1;\n            if (groups[group] === undefined)\n                groups[group] = [];\n            if (binding >= groups[group].length)\n                groups[group].length = binding + 1;\n        }\n        for (const u of this.uniforms) {\n            _makeRoom(u.group, u.binding);\n            const group = groups[u.group];\n            group[u.binding] = u;\n        }\n        for (const u of this.storage) {\n            _makeRoom(u.group, u.binding);\n            const group = groups[u.group];\n            group[u.binding] = u;\n        }\n        for (const t of this.textures) {\n            _makeRoom(t.group, t.binding);\n            const group = groups[t.group];\n            group[t.binding] = t;\n        }\n        for (const t of this.samplers) {\n            _makeRoom(t.group, t.binding);\n            const group = groups[t.group];\n            group[t.binding] = t;\n        }\n        return groups;\n    }\n    _getOutputs(type, outputs = undefined) {\n        if (outputs === undefined)\n            outputs = [];\n        if (type instanceof Struct) {\n            this._getStructOutputs(type, outputs);\n        }\n        else {\n            const output = this._getOutputInfo(type);\n            if (output !== null)\n                outputs.push(output);\n        }\n        return outputs;\n    }\n    _getStructOutputs(struct, outputs) {\n        for (const m of struct.members) {\n            if (m.type instanceof Struct) {\n                this._getStructOutputs(m.type, outputs);\n            }\n            else {\n                const location = this._getAttribute(m, \"location\") || this._getAttribute(m, \"builtin\");\n                if (location !== null) {\n                    const typeInfo = this._getTypeInfo(m.type, m.type.attributes);\n                    const locationValue = this._parseInt(location.value);\n                    const info = new OutputInfo(m.name, typeInfo, location.name, locationValue);\n                    outputs.push(info);\n                }\n            }\n        }\n    }\n    _getOutputInfo(type) {\n        const location = this._getAttribute(type, \"location\") ||\n            this._getAttribute(type, \"builtin\");\n        if (location !== null) {\n            const typeInfo = this._getTypeInfo(type, type.attributes);\n            const locationValue = this._parseInt(location.value);\n            const info = new OutputInfo(\"\", typeInfo, location.name, locationValue);\n            return info;\n        }\n        return null;\n    }\n    _getInputs(args, inputs = undefined) {\n        if (inputs === undefined)\n            inputs = [];\n        for (const arg of args) {\n            if (arg.type instanceof Struct) {\n                this._getStructInputs(arg.type, inputs);\n            }\n            else {\n                const input = this._getInputInfo(arg);\n                if (input !== null)\n                    inputs.push(input);\n            }\n        }\n        return inputs;\n    }\n    _getStructInputs(struct, inputs) {\n        for (const m of struct.members) {\n            if (m.type instanceof Struct) {\n                this._getStructInputs(m.type, inputs);\n            }\n            else {\n                const input = this._getInputInfo(m);\n                if (input !== null)\n                    inputs.push(input);\n            }\n        }\n    }\n    _getInputInfo(node) {\n        const location = this._getAttribute(node, \"location\") ||\n            this._getAttribute(node, \"builtin\");\n        if (location !== null) {\n            const interpolation = this._getAttribute(node, \"interpolation\");\n            const type = this._getTypeInfo(node.type, node.attributes);\n            const locationValue = this._parseInt(location.value);\n            const info = new InputInfo(node.name, type, location.name, locationValue);\n            if (interpolation !== null) {\n                info.interpolation = this._parseString(interpolation.value);\n            }\n            return info;\n        }\n        return null;\n    }\n    _parseString(s) {\n        if (s instanceof Array) {\n            s = s[0];\n        }\n        return s;\n    }\n    _parseInt(s) {\n        if (s instanceof Array) {\n            s = s[0];\n        }\n        const n = parseInt(s);\n        return isNaN(n) ? s : n;\n    }\n    _getAlias(name) {\n        for (const a of this.aliases) {\n            if (a.name == name)\n                return a.type;\n        }\n        return null;\n    }\n    _getAliasInfo(node) {\n        return new AliasInfo(node.name, this._getTypeInfo(node.type, null));\n    }\n    _getTypeInfo(type, attributes) {\n        if (this._types.has(type)) {\n            return this._types.get(type);\n        }\n        if (type instanceof ArrayType) {\n            const a = type;\n            const t = this._getTypeInfo(a.format, a.attributes);\n            const info = new ArrayInfo(a.name, attributes);\n            info.format = t;\n            info.count = a.count;\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        if (type instanceof Struct) {\n            const s = type;\n            const info = new StructInfo(s.name, attributes);\n            for (const m of s.members) {\n                const t = this._getTypeInfo(m.type, m.attributes);\n                info.members.push(new MemberInfo(m.name, t, m.attributes));\n            }\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        if (type instanceof SamplerType) {\n            const s = type;\n            const formatIsType = s.format instanceof Type;\n            const format = s.format\n                ? formatIsType\n                    ? this._getTypeInfo(s.format, null)\n                    : new TypeInfo(s.format, null)\n                : null;\n            const info = new TemplateInfo(s.name, format, attributes, s.access);\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        if (type instanceof TemplateType) {\n            const t = type;\n            const format = t.format ? this._getTypeInfo(t.format, null) : null;\n            const info = new TemplateInfo(t.name, format, attributes, t.access);\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        const info = new TypeInfo(type.name, attributes);\n        this._types.set(type, info);\n        this._updateTypeInfo(info);\n        return info;\n    }\n    _updateTypeInfo(type) {\n        var _a, _b;\n        const typeSize = this._getTypeSize(type);\n        type.size = (_a = typeSize === null || typeSize === void 0 ? void 0 : typeSize.size) !== null && _a !== void 0 ? _a : 0;\n        if (type instanceof ArrayInfo) {\n            const formatInfo = this._getTypeSize(type[\"format\"]);\n            type.stride = (_b = formatInfo === null || formatInfo === void 0 ? void 0 : formatInfo.size) !== null && _b !== void 0 ? _b : 0;\n            this._updateTypeInfo(type[\"format\"]);\n        }\n        if (type instanceof StructInfo) {\n            this._updateStructInfo(type);\n        }\n    }\n    _updateStructInfo(struct) {\n        var _a;\n        let offset = 0;\n        let lastSize = 0;\n        let lastOffset = 0;\n        let structAlign = 0;\n        for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\n            const member = struct.members[mi];\n            const sizeInfo = this._getTypeSize(member);\n            if (!sizeInfo)\n                continue;\n            (_a = this._getAlias(member.type.name)) !== null && _a !== void 0 ? _a : member.type;\n            const align = sizeInfo.align;\n            const size = sizeInfo.size;\n            offset = this._roundUp(align, offset + lastSize);\n            lastSize = size;\n            lastOffset = offset;\n            structAlign = Math.max(structAlign, align);\n            member.offset = offset;\n            member.size = size;\n            this._updateTypeInfo(member.type);\n        }\n        struct.size = this._roundUp(structAlign, lastOffset + lastSize);\n        struct.align = structAlign;\n    }\n    _getTypeSize(type) {\n        var _a;\n        if (type === null || type === undefined)\n            return null;\n        const explicitSize = this._getAttributeNum(type.attributes, \"size\", 0);\n        const explicitAlign = this._getAttributeNum(type.attributes, \"align\", 0);\n        if (type instanceof MemberInfo)\n            type = type.type;\n        if (type instanceof TypeInfo) {\n            const alias = this._getAlias(type.name);\n            if (alias !== null) {\n                type = alias;\n            }\n        }\n        {\n            const info = WgslReflect._typeInfo[type.name];\n            if (info !== undefined) {\n                const divisor = type[\"format\"] === \"f16\" ? 2 : 1;\n                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\n            }\n        }\n        {\n            const info = WgslReflect._typeInfo[type.name.substring(0, type.name.length - 1)];\n            if (info) {\n                const divisor = type.name[type.name.length - 1] === \"h\" ? 2 : 1;\n                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\n            }\n        }\n        if (type instanceof ArrayInfo) {\n            let arrayType = type;\n            let align = 8;\n            let size = 8;\n            // Type                 AlignOf(T)          Sizeof(T)\n            // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\n            // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\n            //\n            // @stride(Q)\n            // array<E, N>          AlignOf(E)          N * Q\n            //\n            // @stride(Q)\n            // array<E>             AlignOf(E)          Nruntime * Q\n            //const E = type.format.name;\n            const E = this._getTypeSize(arrayType.format);\n            if (E !== null) {\n                size = E.size;\n                align = E.align;\n            }\n            const N = arrayType.count;\n            const stride = this._getAttributeNum((_a = type === null || type === void 0 ? void 0 : type.attributes) !== null && _a !== void 0 ? _a : null, \"stride\", this._roundUp(align, size));\n            size = N * stride;\n            if (explicitSize)\n                size = explicitSize;\n            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));\n        }\n        if (type instanceof StructInfo) {\n            let align = 0;\n            let size = 0;\n            // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\n            //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\n            //                          Where L is the last member of the structure\n            let offset = 0;\n            let lastSize = 0;\n            let lastOffset = 0;\n            for (const m of type.members) {\n                const mi = this._getTypeSize(m.type);\n                if (mi !== null) {\n                    align = Math.max(mi.align, align);\n                    offset = this._roundUp(mi.align, offset + lastSize);\n                    lastSize = mi.size;\n                    lastOffset = offset;\n                }\n            }\n            size = this._roundUp(align, lastOffset + lastSize);\n            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));\n        }\n        return null;\n    }\n    _isUniformVar(node) {\n        return node instanceof Var && node.storage == \"uniform\";\n    }\n    _isStorageVar(node) {\n        return node instanceof Var && node.storage == \"storage\";\n    }\n    _isTextureVar(node) {\n        return (node instanceof Var &&\n            node.type !== null &&\n            WgslReflect._textureTypes.indexOf(node.type.name) != -1);\n    }\n    _isSamplerVar(node) {\n        return (node instanceof Var &&\n            node.type !== null &&\n            WgslReflect._samplerTypes.indexOf(node.type.name) != -1);\n    }\n    _getAttribute(node, name) {\n        const obj = node;\n        if (!obj || !obj[\"attributes\"])\n            return null;\n        const attrs = obj[\"attributes\"];\n        for (let a of attrs) {\n            if (a.name == name)\n                return a;\n        }\n        return null;\n    }\n    _getAttributeNum(attributes, name, defaultValue) {\n        if (attributes === null)\n            return defaultValue;\n        for (let a of attributes) {\n            if (a.name == name) {\n                let v = a !== null && a.value !== null ? a.value : defaultValue;\n                if (v instanceof Array) {\n                    v = v[0];\n                }\n                if (typeof v === \"number\") {\n                    return v;\n                }\n                if (typeof v === \"string\") {\n                    return parseInt(v);\n                }\n                return defaultValue;\n            }\n        }\n        return defaultValue;\n    }\n    _roundUp(k, n) {\n        return Math.ceil(n / k) * k;\n    }\n}\n// Type                 AlignOf(T)          Sizeof(T)\n// i32, u32, or f32     4                   4\n// atomic<T>            4                   4\n// vec2<T>              8                   8\n// vec3<T>              16                  12\n// vec4<T>              16                  16\n// mat2x2<f32>          8                   16\n// mat3x2<f32>          8                   24\n// mat4x2<f32>          8                   32\n// mat2x3<f32>          16                  32\n// mat3x3<f32>          16                  48\n// mat4x3<f32>          16                  64\n// mat2x4<f32>          16                  32\n// mat3x4<f32>          16                  48\n// mat4x4<f32>          16                  64\nWgslReflect._typeInfo = {\n    f16: { align: 2, size: 2 },\n    i32: { align: 4, size: 4 },\n    u32: { align: 4, size: 4 },\n    f32: { align: 4, size: 4 },\n    atomic: { align: 4, size: 4 },\n    vec2: { align: 8, size: 8 },\n    vec3: { align: 16, size: 12 },\n    vec4: { align: 16, size: 16 },\n    mat2x2: { align: 8, size: 16 },\n    mat3x2: { align: 8, size: 24 },\n    mat4x2: { align: 8, size: 32 },\n    mat2x3: { align: 16, size: 32 },\n    mat3x3: { align: 16, size: 48 },\n    mat4x3: { align: 16, size: 64 },\n    mat2x4: { align: 16, size: 32 },\n    mat3x4: { align: 16, size: 48 },\n    mat4x4: { align: 16, size: 64 },\n};\nWgslReflect._textureTypes = TokenTypes.any_texture_type.map((t) => {\n    return t.name;\n});\nWgslReflect._samplerTypes = TokenTypes.sampler_type.map((t) => {\n    return t.name;\n});\n\nexport { Alias, AliasInfo, Argument, ArrayInfo, ArrayType, Assign, AssignOperator, Attribute, BinaryOperator, BitcastExpr, Break, Call, CallExpr, Case, Const, ConstExpr, Continue, Continuing, CreateExpr, Default, Discard, ElseIf, Enable, EntryFunctions, Expression, For, Function, FunctionInfo, GroupingExpr, If, Increment, IncrementOperator, InputInfo, Let, LiteralExpr, Loop, Member, MemberInfo, Node, Operator, OutputInfo, Override, OverrideInfo, ParseContext, PointerType, ResourceType, Return, SamplerType, Statement, StaticAssert, StringExpr, Struct, StructInfo, Switch, SwitchCase, TemplateInfo, TemplateType, Token, TokenClass, TokenType, TokenTypes, Type, TypeInfo, TypecastExpr, UnaryOperator, Var, VariableExpr, VariableInfo, WgslParser, WgslReflect, WgslScanner, While };\n//# sourceMappingURL=wgsl_reflect.module.js.map\n","import {\n    WgslReflect,\n    ArrayInfo,\n    StructInfo,\n    TemplateInfo,\n    TypeInfo,\n    VariableInfo,\n} from 'wgsl_reflect';\n\nexport type FieldDefinition = {\n    offset: number;\n    type: TypeDefinition;\n};\n\nexport type FieldDefinitions = {\n    [x: string]: FieldDefinition;\n};\n\nexport type TypeDefinition = {\n    size: number;\n};\n\n// These 3 types are wonky. Maybe we should make them inherit from a common\n// type with a `type` field. I wanted this to be a plain object though, not an object\n// with a constructor. In any case, right now, the way you tell them apart is\n// If it's got `elementType` then it's an ArrayDefinition\n// If it's got `fields` then it's a StructDefinition\n// else it's an IntrinsicDefinition\nexport type StructDefinition = TypeDefinition & {\n    fields: FieldDefinitions;\n    size: number;\n};\n\nexport type IntrinsicDefinition = TypeDefinition & {\n    type: string;\n    numElements?: number;\n};\n\nexport type ArrayDefinition = TypeDefinition & {\n    elementType: TypeDefinition,\n    numElements: number,\n};\n\n/**\n * @group(x) @binding(y) var<...> definition\n */\nexport interface VariableDefinition {\n    binding: number;\n    group: number;\n    size: number;\n    typeDefinition: TypeDefinition;\n}\n\nexport type StructDefinitions = {\n    [x: string]: StructDefinition;\n};\n\nexport type VariableDefinitions = {\n    [x: string]: VariableDefinition;\n};\n\ntype ShaderDataDefinitions = {\n    uniforms: VariableDefinitions,\n    storages: VariableDefinitions,\n    structs: StructDefinitions,\n};\n\nfunction getNamedVariables(reflect: WgslReflect, variables: VariableInfo[]): VariableDefinitions {\n    return Object.fromEntries(variables.map(v => {\n        const typeDefinition = addType(reflect, v.type, 0);\n        return [\n            v.name,\n            {\n                typeDefinition,\n                group: v.group,\n                binding: v.binding,\n                size: typeDefinition.size,\n            },\n        ];\n    })) as VariableDefinitions;\n}\n\nfunction makeStructDefinition(reflect: WgslReflect, structInfo: StructInfo, offset: number) {\n    // StructDefinition\n    const fields: FieldDefinitions = Object.fromEntries(structInfo.members.map(m => {\n        return [\n            m.name,\n            {\n                offset: m.offset,\n                type: addType(reflect, m.type, 0),\n            },\n        ];\n    }));\n    return {\n        fields,\n        size: structInfo.size,\n        offset,\n    };\n}\n\n/**\n * Given a WGSL shader, returns data definitions for structures,\n * uniforms, and storage buffers\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct MyStruct {\n *    color: vec4f,\n *    brightness: f32,\n *    kernel: array<f32, 9>,\n * };\n * @group(0) @binding(0) var<uniform> myUniforms: MyUniforms;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const myUniformValues = makeStructuredView(defs.uniforms.myUniforms);\n *\n * myUniformValues.set({\n *   color: [1, 0, 1, 1],\n *   brightness: 0.8,\n *   kernel: [\n *      1, 0, -1,\n *      2, 0, -2,\n *      1, 0, -1,\n *   ],\n * });\n * device.queue.writeBuffer(uniformBuffer, 0, myUniformValues.arrayBuffer);\n * ```\n *\n * @param code WGSL shader. Note: it is not required for this to be a complete shader\n * @returns definitions of the structures by name. Useful for passing to {@link makeStructuredView}\n */\nexport function makeShaderDataDefinitions(code: string): ShaderDataDefinitions {\n    const reflect = new WgslReflect(code);\n\n    const structs = Object.fromEntries(reflect.structs.map(structInfo => {\n        return [structInfo.name, makeStructDefinition(reflect, structInfo, 0)];\n    }));\n\n    const uniforms = getNamedVariables(reflect, reflect.uniforms);\n    const storages = getNamedVariables(reflect, reflect.storage);\n\n    return {\n        structs,\n        storages,\n        uniforms,\n    };\n}\n\nfunction assert(cond: boolean, msg = '') {\n    if (!cond) {\n        throw new Error(msg);\n    }\n}\n\n/*\n write down what I want for a given type\n\n    struct VSUniforms {\n        foo: u32,\n    };\n    @group(4) @binding(1) var<uniform> uni1: f32;\n    @group(3) @binding(2) var<uniform> uni2: array<f32, 5>;\n    @group(2) @binding(3) var<uniform> uni3: VSUniforms;\n    @group(1) @binding(4) var<uniform> uni4: array<VSUniforms, 6>;\n\n    uni1: {\n        type: 'f32',\n        numElements: undefined\n    },\n    uni2: {\n        type: 'array',\n        elementType: 'f32'\n        numElements: 5,\n    },\n    uni3: {\n        type: 'struct',\n        fields: {\n            foo: {\n                type: 'f32',\n                numElements: undefined\n            }\n        },\n    },\n    uni4: {\n        type: 'array',\n        elementType:\n        fields: {\n            foo: {\n                type: 'f32',\n                numElements: undefined\n            }\n        },\n        fields: {\n            foo: {\n                type: 'f32',\n                numElements: undefined\n            }\n        },\n        ...\n    ]\n\n    */\n\n\n\nfunction addType(reflect: WgslReflect, typeInfo: TypeInfo, offset: number):\n  StructDefinition |\n  IntrinsicDefinition |\n  ArrayDefinition {\n    if (typeInfo.isArray) {\n        assert(!typeInfo.isStruct, 'struct array is invalid');\n        assert(!typeInfo.isStruct, 'template array is invalid');\n        const arrayInfo = typeInfo as ArrayInfo;\n        // ArrayDefinition\n        return {\n            size: arrayInfo.size,\n            elementType: addType(reflect, arrayInfo.format, offset),\n            numElements: arrayInfo.count,\n        };\n    } else if (typeInfo.isStruct) {\n        assert(!typeInfo.isTemplate, 'template struct is invalid');\n        const structInfo = typeInfo as StructInfo;\n        return makeStructDefinition(reflect, structInfo, offset);\n    } else {\n        // template is like vec4<f32> or mat4x4<f16>\n        const asTemplateInfo = typeInfo as TemplateInfo;\n        const type = typeInfo.isTemplate\n           ? `${asTemplateInfo.name}<${asTemplateInfo.format!.name}>`\n           : typeInfo.name;\n        // IntrinsicDefinition\n        return {\n            size: typeInfo.size,\n            type,\n        };\n    }\n}\n\n","import {\n  isTypedArray,\n} from './typed-arrays.js';\n\nfunction getViewDimensionForTexture(texture: GPUTexture): GPUTextureViewDimension {\n   switch (texture.dimension) {\n      case '1d':\n         return '1d';\n      case '3d':\n         return '3d';\n      default: // to shut up TS\n      case '2d':\n         return texture.depthOrArrayLayers > 1 ? '2d-array' : '2d';\n   }\n}\n\nfunction normalizeGPUExtent3Dict(size: GPUExtent3DDict) {\n  return [size.width, size.height || 1, size.depthOrArrayLayers || 1];\n}\n\n/**\n * Converts a `GPUExtent3D` into an array of numbers\n *\n * `GPUExtent3D` has two forms `[width, height?, depth?]` or\n * `{width: number, height?: number, depthOrArrayLayers?: number}`\n *\n * You pass one of those in here and it returns an array of 3 numbers\n * so that your code doesn't have to deal with multiple forms.\n *\n * @param size\n * @returns an array of 3 numbers, [width, height, depthOrArrayLayers]\n */\nexport function normalizeGPUExtent3D(size: GPUExtent3D): number[] {\n  return (Array.isArray(size) || isTypedArray(size))\n    ? [...(size as Iterable<number>), 1, 1].slice(0, 3)\n    : normalizeGPUExtent3Dict(size as GPUExtent3DDict);\n}\n\n/**\n * Given a GPUExtent3D returns the number of mip levels needed\n *\n * @param size\n * @returns number of mip levels needed for the given size\n */\nexport function numMipLevels(size: GPUExtent3D, dimension?: GPUTextureDimension) {\n   const sizes = normalizeGPUExtent3D(size);\n   const maxSize = Math.max(...sizes.slice(0, dimension === '3d' ? 3 : 2));\n   return 1 + Math.log2(maxSize) | 0;\n}\n\n// Use a WeakMap so the device can be destroyed and/or lost\nconst byDevice = new WeakMap();\n\n/**\n * Generates mip levels from level 0 to the last mip for an existing texture\n *\n * The texture must have been created with TEXTURE_BINDING and\n * RENDER_ATTACHMENT and been created with mip levels\n *\n * @param device\n * @param texture\n */\nexport function generateMipmap(device: GPUDevice, texture: GPUTexture) {\n  let perDeviceInfo = byDevice.get(device);\n  if (!perDeviceInfo) {\n    perDeviceInfo = {\n      pipelineByFormat: {},\n      moduleByView: {},\n    };\n    byDevice.set(device, perDeviceInfo);\n  }\n  let {\n    sampler,\n  } = perDeviceInfo;\n  const {\n    pipelineByFormat,\n    moduleByView,\n  } = perDeviceInfo;\n  const view = getViewDimensionForTexture(texture);\n  let module = moduleByView[view];\n  if (!module) {\n    module = device.createShaderModule({\n      label: `mip level generation for ${view}`,\n      code: `\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n        }\n      `,\n    });\n    moduleByView[view] = module;\n  }\n\n  if (!sampler) {\n    sampler = device.createSampler({\n      minFilter: 'linear',\n    });\n    perDeviceInfo.sampler = sampler;\n  }\n\n  const id = `${texture.format}`;\n\n  if (!pipelineByFormat[id]) {\n    pipelineByFormat[id] = device.createRenderPipeline({\n      label: `mip level generator pipeline for ${view}`,\n      layout: 'auto',\n      vertex: {\n        module,\n        entryPoint: 'vs',\n      },\n      fragment: {\n        module,\n        entryPoint: 'fs',\n        targets: [{ format: texture.format }],\n      },\n    });\n  }\n  const pipeline = pipelineByFormat[id];\n\n  const encoder = device.createCommandEncoder({\n    label: 'mip gen encoder',\n  });\n\n  for (let baseMipLevel = 1; baseMipLevel < texture.mipLevelCount; ++baseMipLevel) {\n    for (let baseArrayLayer = 0; baseArrayLayer < texture.depthOrArrayLayers; ++baseArrayLayer) {\n      const bindGroup = device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          { binding: 0, resource: sampler },\n          {\n            binding: 1,\n            resource: texture.createView({\n              dimension: '2d',\n              baseMipLevel: baseMipLevel - 1,\n              mipLevelCount: 1,\n              baseArrayLayer,\n              arrayLayerCount: 1,\n            }),\n          },\n        ],\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        label: 'mip gen renderPass',\n        colorAttachments: [\n          {\n            view: texture.createView({\n               baseMipLevel,\n               mipLevelCount: 1,\n               baseArrayLayer,\n               arrayLayerCount: 1,\n            }),\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const pass = encoder.beginRenderPass(renderPassDescriptor);\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.draw(3);\n      pass.end();\n    }\n  }\n\n  const commandBuffer = encoder.finish();\n  device.queue.submit([commandBuffer]);\n}","import {\n  TypedArray,\n  TypedArrayConstructor,\n  isTypedArray,\n} from './typed-arrays.js';\n\nconst kTypedArrayToAttribFormat = new Map<TypedArrayConstructor, {formats: [string, string], defaultForType: number}>([\n  [ Int8Array,    { formats: ['sint8',   'snorm8' ], defaultForType: 1 } ],\n  [ Uint8Array,   { formats: ['uint8',   'unorm8' ], defaultForType: 1 } ],\n  [ Int16Array,   { formats: ['sint16',  'snorm16'], defaultForType: 1 } ],\n  [ Uint16Array,  { formats: ['uint16',  'unorm16'], defaultForType: 1 } ],\n  [ Int32Array,   { formats: ['sint32',  'snorm32'], defaultForType: 0 } ],\n  [ Uint32Array,  { formats: ['uint32',  'unorm32'], defaultForType: 0 } ],\n  [ Float32Array, { formats: ['float32', 'float32'], defaultForType: 0 } ],\n  // TODO: Add Float16Array\n]);\n\nconst kVertexFormatPrefixToType = new Map<string, TypedArrayConstructor>(\n  [...kTypedArrayToAttribFormat.entries()].map(([Type, {formats: [s1, s2]}]) => [[s1, Type], [s2, Type]] as [[string, TypedArrayConstructor], [string, TypedArrayConstructor]]).flat()\n);\n\n/**\n * See {@link Arrays} for details\n */\nexport type FullArraySpec = {\n  data: number | number[] | TypedArray,\n  type?: TypedArrayConstructor,\n  numComponents?: number,\n  shaderLocation?: number,\n  normalize?: boolean,\n};\n\nexport type ArrayUnion = number | number[] | TypedArray | FullArraySpec;\n\n/**\n * Named Arrays\n *\n * A set of named arrays are passed to various functions like\n * {@link createBufferLayoutsFromArrays} and {@link createBuffersAndAttributesFromArrays}\n *\n * Each array can be 1 of 4 things. A native JavaScript array, a TypedArray, a number, a {@link FullArraySpec}\n *\n * If it's a native array then, if the name of the array is `indices` the data will be converted\n * to a `Uint32Array`, otherwise a `Float32Array`.  Use a TypedArray or a {@link FullArraySpec} to choose a different type.\n * The {@link FullArraySpec} `type` is only used if it's not already a TypedArray\n *\n * If it's a native array or a TypedArray or if `numComponents` in a {@link FullArraySpec} is not\n * specified it will be guessed. If the name contains 'coord', 'texture' or 'uv' then numComponents will be 2.\n * If the name contains 'color' or 'colour' then numComponents will be 4. Otherwise it's 3.\n *\n * For attribute formats, guesses are made based on type and number of components. The guess is\n * based on this table where (d) is the default for that type if `normalize` is not specified\n *\n * | Type          |     ..      | normalize   |\n * | ------------  | ----------- | ----------- |\n * | Int8Array     | sint8       | snorm8 (d)  |\n * | Uint8Array    | uint8       | unorm8 (d)  |\n * | Int16Array    | sint16      | snorm16 (d) |\n * | Uint16Array   | uint16      | unorm16 (d) |\n * | Int32Array    | sint32 (d)  | snorm32     |\n * | Uint32Array   | uint32 (d)  | unorm32     |\n * | Float32Array  | float32 (d) | float32     |\n *\n */\nexport type Arrays = { [key: string]: ArrayUnion };\nexport type ArraysOptions = {\n  interleave?: boolean,\n  stepMode?: GPUVertexStepMode,\n  usage?: GPUBufferUsageFlags,\n  shaderLocation?: number,\n};\n\n/**\n * Returned by {@link createBuffersAndAttributesFromArrays}\n */\nexport type BuffersAndAttributes = {\n  numElements: number,\n  bufferLayouts: GPUVertexBufferLayout[],\n  buffers: GPUBuffer[],\n  indexBuffer?: GPUBuffer,\n  indexFormat?: GPUIndexFormat,\n};\n\nfunction isIndices(name: string) {\n  return name === \"indices\";\n}\n\nfunction makeTypedArrayFromArrayUnion(array: ArrayUnion, name: string): TypedArray {\n  if (isTypedArray(array)) {\n    return array as TypedArray;\n  }\n\n  let asFullSpec = array as FullArraySpec;\n  if (isTypedArray(asFullSpec.data)) {\n    return asFullSpec.data as TypedArray;\n  }\n\n  if (Array.isArray(array) || typeof array === 'number') {\n    asFullSpec = {\n      data: array,\n    };\n  }\n\n  let Type = asFullSpec.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint32Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(asFullSpec.data as any); // ugh!\n}\n\nfunction getArray(array: ArrayUnion): number[] | TypedArray {\n  const arr = (array as TypedArray).length ? array : (array as FullArraySpec).data;\n  return arr as TypedArray;\n}\n\nconst kNameToNumComponents = [\n  { re: /coord|texture|uv/i, numComponents: 2 },\n  { re: /color|colour/i, numComponents: 4 },\n];\n\nfunction guessNumComponentsFromNameImpl(name: string) {\n  for (const {re, numComponents} of kNameToNumComponents) {\n    if (re.test(name)) {\n      return numComponents;\n    }\n  }\n  return 3;\n}\n\nfunction guessNumComponentsFromName(name: string, length: number) {\n  const numComponents = guessNumComponentsFromNameImpl(name);\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n  return numComponents;\n}\n\nfunction getNumComponents(array: ArrayUnion , arrayName: string) {\n  return (array as FullArraySpec).numComponents || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nconst kVertexFormatRE = /(\\w+)(?:x(\\d))$/;\nfunction numComponentsAndTypeFromVertexFormat(format: GPUVertexFormat) {\n  const m = kVertexFormatRE.exec(format);\n  const [prefix, numComponents] = m ? [m[1], parseInt(m[2])] : [format, 1];\n  return {\n    Type: kVertexFormatPrefixToType.get(prefix),\n    numComponents,\n  };\n}\n\nfunction createTypedArrayOfSameType(typedArray: TypedArray, arrayBuffer: ArrayBuffer) {\n  const Ctor = Object.getPrototypeOf(typedArray).constructor;\n  return new Ctor(arrayBuffer);\n}\n\ntype TypedArrayWithOffsetAndStride = {\n  data: TypedArray,\n  offset: number, /** In elements not bytes */\n  stride: number, /** In elements not bytes */\n};\n\n/**\n * Given a set of named arrays, generates an array `GPUBufferLayout`s\n *\n * Examples:\n *\n * ```js\n *   const arrays = {\n *     position: [1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1],\n *     normal: [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1],\n *     texcoord: [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],\n *   };\n *\n *   const { bufferLayouts, typedArrays } = createBufferLayoutsFromArrays(arrays);\n * ```\n *\n * results in `bufferLayouts` being\n *\n * ```js\n * [\n *   {\n *     stepMode: 'vertex',\n *     arrayStride: 32,\n *     attributes: [\n *       { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *       { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *       { shaderLocation: 2, offset: 24, format: 'float32x2' },\n *     ],\n *   },\n * ]\n * ```\n *\n * and `typedArrays` being\n *\n * ```\n * [\n *   someFloat32Array0,\n *   someFloat32Array1,\n *   someFloat32Array2,\n * ]\n * ```\n *\n * See {@link Arrays} for details on the various types of arrays.\n *\n * Note: If typed arrays are passed in the same typed arrays will come out (copies will not be made)\n */\nexport function createBufferLayoutsFromArrays(arrays: Arrays, options: ArraysOptions = {}) {\n  const interleave = options.interleave === undefined ? true : options.interleave;\n  const stepMode = options.stepMode || 'vertex';\n  const shaderLocations: number[] = options.shaderLocation\n     ? (Array.isArray(options.shaderLocation) ? options.shaderLocation : [options.shaderLocation])\n     : [0];\n  let currentOffset = 0;\n  const bufferLayouts: GPUVertexBufferLayout[] = [];\n  const attributes: GPUVertexAttribute[] = [];\n  const typedArrays: TypedArrayWithOffsetAndStride[] = [];\n  Object.keys(arrays)\n    .filter(arrayName => !isIndices(arrayName))\n    .forEach(arrayName => {\n      const array = arrays[arrayName];\n      const data = makeTypedArrayFromArrayUnion(array, arrayName);\n      const totalNumComponents = getNumComponents(array, arrayName);\n      // if totalNumComponents > 4 then we clearly need to split this into multiple\n      // attributes\n      // (a) <= 4 doesn't mean don't split and\n      // (b) how to split? We could divide by 4 and if it's not even then divide by 3\n      //     as a guess?\n      //     5 is error? or 1x4 + 1x1?\n      //     6 is 2x3\n      //     7 is error? or 1x4 + 1x3?\n      //     8 is 2x4\n      //     9 is 3x3\n      //    10 is error? or 2x4 + 1x2?\n      //    11 is error? or 2x4 + 1x3?\n      //    12 is 3x4 or 4x3?\n      //    13 is error? or 3x4 + 1x1 or 4x3 + 1x1?\n      //    14 is error? or 3x4 + 1x2 or 4x3 + 1x2?\n      //    15 is error? or 3x4 + 1x3 or 4x3 + 1x3?\n      //    16 is 4x4\n      const by4 = totalNumComponents / 4;\n      const by3 = totalNumComponents / 3;\n      const step = by4 % 1 === 0 ? 4 : (by3 % 1 === 0 ? 3 : 4);\n      for (let component = 0; component < totalNumComponents; component += step) {\n        const numComponents = Math.min(step, totalNumComponents - component);\n        const offset = currentOffset;\n        currentOffset += numComponents * data.BYTES_PER_ELEMENT;\n        const { defaultForType, formats } = kTypedArrayToAttribFormat.get(Object.getPrototypeOf(data).constructor)!;\n        const normalize = (array as FullArraySpec).normalize;\n        const formatNdx = typeof normalize === 'undefined' ? defaultForType : (normalize ? 1 : 0);\n        const format = `${formats[formatNdx]}${numComponents > 1 ? `x${numComponents}` : ''}` as GPUVertexFormat;\n\n        // TODO: cleanup with generator?\n        const shaderLocation = shaderLocations.shift()!;\n        if (shaderLocations.length === 0) {\n          shaderLocations.push(shaderLocation + 1);\n        }\n        attributes.push({\n          offset,\n          format,\n          shaderLocation,\n        });\n        typedArrays.push({\n          data,\n          offset: component,\n          stride: totalNumComponents,\n        });\n      }\n      if (!interleave) {\n        bufferLayouts.push({\n          stepMode,\n          arrayStride: currentOffset,\n          attributes: attributes.slice(),\n        });\n        currentOffset = 0;\n        attributes.length = 0;\n      }\n    });\n  if (attributes.length) {\n    bufferLayouts.push({\n      stepMode,\n      arrayStride: currentOffset,\n      attributes: attributes,\n    });\n  }\n  return {\n    bufferLayouts,\n    typedArrays,\n  };\n}\n\nfunction getTypedArrayWithOffsetAndStride(ta: TypedArray | TypedArrayWithOffsetAndStride, numComponents: number) {\n  return (isTypedArray(ta)\n    ? { data: ta, offset: 0, stride: numComponents }\n    : ta) as TypedArrayWithOffsetAndStride;\n}\n\n/**\n * Given an array of `GPUVertexAttribute`s and a corresponding array\n * of TypedArrays, interleaves the contents of the typed arrays\n * into the given ArrayBuffer\n *\n * example:\n *\n * ```js\n * const attributes: GPUVertexAttribute[] = [\n *   { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *   { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *   { shaderLocation: 2, offset: 24, format: 'float32x2' },\n * ];\n * const typedArrays = [\n *   new Float32Array([1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1]),\n *   new Float32Array([1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1]),\n *   new Float32Array([1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1]),\n * ];\n * const arrayStride = (3 + 3 + 2) * 4;  // pos + nrm + uv\n * const arrayBuffer = new ArrayBuffer(arrayStride * 24)\n * interleaveVertexData(attributes, typedArrays, arrayStride, arrayBuffer)\n * ```\n *\n * results in the contents of `arrayBuffer` to be the 3 TypedArrays interleaved\n *\n * See {@link Arrays} for details on the various types of arrays.\n *\n * Note: You can generate `attributes` and `typedArrays` above by calling\n * {@link createBufferLayoutsFromArrays}\n */\nexport function interleaveVertexData(\n    attributes: GPUVertexAttribute[],\n    typedArrays: (TypedArray | TypedArrayWithOffsetAndStride)[],\n    arrayStride: number,\n    arrayBuffer: ArrayBuffer,\n) {\n  const views = new Map<TypedArrayConstructor, TypedArray>();\n  const getView = (typedArray: TypedArray) => {\n    const Ctor = Object.getPrototypeOf(typedArray).constructor;\n    const view = views.get(Ctor);\n    if (view) {\n      return view;\n    }\n    const newView = new Ctor(arrayBuffer);\n    views.set(Ctor, newView);\n    return newView;\n  };\n\n  attributes.forEach((attribute, ndx) => {\n    const { offset, format } = attribute;\n    const { numComponents } = numComponentsAndTypeFromVertexFormat(format);\n    const {\n      data,\n      offset: srcOffset,\n      stride,\n    } = getTypedArrayWithOffsetAndStride(typedArrays[ndx], numComponents);\n\n    const view = getView(data);\n    for (let i = 0; i < data.length; i += stride) {\n      const ndx = i / stride;\n      const dstOffset = (offset + ndx * arrayStride) / view.BYTES_PER_ELEMENT;\n      const srcOff = i + srcOffset;\n      const s = data.subarray(srcOff, srcOff + numComponents);\n      view.set(s, dstOffset);\n    }\n  });\n}\n\n/**\n * Given arrays, create buffers, fills the buffers with data if provided, optionally\n * interleaves the data (the default).\n *\n * Example:\n *\n * ```js\n *  const {\n *    buffers,\n *    bufferLayouts,\n *    indexBuffer,\n *    indexFormat,\n *    numElements,\n *  } = createBuffersAndAttributesFromArrays(device, {\n *    position: [1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1],\n *    normal: [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1],\n *    texcoord: [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],\n *    indices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23],\n *  });\n * ```\n *\n * Where `bufferLayouts` will be\n *\n * ```js\n * [\n *   {\n *     stepMode: 'vertex',\n *     arrayStride: 32,\n *     attributes: [\n *       { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *       { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *       { shaderLocation: 2, offset: 24, format: 'float32x2' },\n *     ],\n *   },\n * ]\n * ```\n *\n * * `buffers` will have one `GPUBuffer` of usage `GPUBufferUsage.VERTEX`\n * * `indexBuffer` will be `GPUBuffer` of usage `GPUBufferUsage.INDEX`\n * * `indexFormat` will be `uint32` (use a full spec or a typedarray of `Uint16Array` if you want 16bit indices)\n * * `numElements` will be 36 (this is either the number entries in the array named `indices` or if no\n *    indices are provided then it's the length of the first array divided by numComponents. See {@link Arrays})\n *\n * See {@link Arrays} for details on the various types of arrays.\n * Also see the cube and instancing examples.\n */\nexport function createBuffersAndAttributesFromArrays(device: GPUDevice, arrays: Arrays, options: ArraysOptions = {}) {\n  const usage = (options.usage || 0);\n\n  const {\n    bufferLayouts,\n    typedArrays,\n  } = createBufferLayoutsFromArrays(arrays, options);\n\n  const buffers = [];\n  let numElements = -1;\n  let bufferNdx = 0;\n  for (const {attributes, arrayStride} of bufferLayouts) {\n    const attribs = attributes as GPUVertexAttribute[];\n    const attrib0 = attribs[0];\n    const {numComponents} = numComponentsAndTypeFromVertexFormat(attrib0.format);\n\n    const {\n      data: data0,\n      stride,\n     } = getTypedArrayWithOffsetAndStride(typedArrays[bufferNdx], numComponents);\n\n    if (numElements < 0) {\n      numElements = data0.length / stride;\n    }\n\n    const size = arrayStride * numElements;\n    const buffer = device.createBuffer({\n      usage: usage | GPUBufferUsage.VERTEX,\n      size,\n      mappedAtCreation: true,\n    });\n\n    const arrayBuffer = buffer.getMappedRange();\n    if (attribs.length === 1 && arrayStride === data0.BYTES_PER_ELEMENT * numComponents) {\n      const view = createTypedArrayOfSameType(data0, arrayBuffer);\n      view.set(data0);\n    } else {\n      interleaveVertexData(attribs, typedArrays.slice(bufferNdx), arrayStride, arrayBuffer);\n    }\n    buffer.unmap();\n    buffers.push(buffer);\n    bufferNdx += attribs.length;\n  }\n\n  const buffersAndAttributes: BuffersAndAttributes = {\n    numElements,\n    bufferLayouts,\n    buffers,\n  };\n\n  const indicesEntry = Object.entries(arrays).find(([arrayName]) => isIndices(arrayName));\n  if (indicesEntry) {\n    const indices = makeTypedArrayFromArrayUnion(indicesEntry[1], 'indices');\n    const indexBuffer = device.createBuffer({\n      size: indices.byteLength,\n      usage: GPUBufferUsage.INDEX | usage,\n      mappedAtCreation: true,\n    });\n    const dst = createTypedArrayOfSameType(indices, indexBuffer.getMappedRange());\n    dst.set(indices);\n    indexBuffer.unmap();\n\n    buffersAndAttributes.indexBuffer = indexBuffer;\n    buffersAndAttributes.indexFormat = indices instanceof Uint16Array ? 'uint16' : 'uint32';\n    buffersAndAttributes.numElements = indices.length;\n  }\n\n  return buffersAndAttributes;\n}\n","import {\n  TypedArray,\n  TypedArrayConstructor,\n  isTypedArray,\n} from './typed-arrays.js';\nimport {\n  generateMipmap,\n  numMipLevels,\n} from './generate-mipmap.js';\n\nexport type CopyTextureOptions = {\n  flipY?: boolean,\n  premultipliedAlpha?: boolean,\n  colorSpace?: PredefinedColorSpace;\n  dimension?: GPUTextureViewDimension;\n  baseArrayLayer?: number;\n};\n\nexport type TextureData = {\n  data: TypedArray | number[],\n};\nexport type TextureCreationData = TextureData & {\n  width?: number,\n  height?: number,\n};\n\nexport type TextureRawDataSource = TextureCreationData | TypedArray | number[];\nexport type TextureSource = GPUImageCopyExternalImage['source'] | TextureRawDataSource;\n\nfunction isTextureData(source: TextureSource) {\n  const src = source as TextureData;\n  return isTypedArray(src.data) || Array.isArray(src.data);\n}\n\nfunction isTextureRawDataSource(source: TextureSource) {\n  return isTypedArray(source) || Array.isArray(source) || isTextureData(source);\n}\n\nfunction toTypedArray(v: TypedArray | number[], format: GPUTextureFormat): TypedArray {\n  if (isTypedArray(v)) {\n    return v as TypedArray;\n  }\n  const { Type } = getTextureFormatInfo(format);\n  return new Type(v);\n}\n\nfunction guessDimensions(width: number | undefined, height: number | undefined, numElements: number, dimension: GPUTextureViewDimension = '2d'): number[] {\n  if (numElements % 1 !== 0) {\n    throw new Error(\"can't guess dimensions\");\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (dimension === 'cube' ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width!;\n    if (height % 1) {\n      throw new Error(\"can't guess dimensions\");\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw new Error(\"can't guess dimensions\");\n    }\n  }\n  const depth = numElements / width! / height;\n  if (depth % 1) {\n    throw new Error(\"can't guess dimensions\");\n  }\n  return [width!, height, depth];\n}\n\nfunction textureViewDimensionToDimension(viewDimension: GPUTextureViewDimension | undefined) {\n  switch (viewDimension) {\n    case '1d': return '1d';\n    case '3d': return '3d';\n    default: return '2d';\n  }\n}\n\nconst kFormatToTypedArray: {[key: string]: TypedArrayConstructor} = {\n  '8snorm': Int8Array,\n  '8unorm': Uint8Array,\n  '8sint': Int8Array,\n  '8uint': Uint8Array,\n  '16snorm': Int16Array,\n  '16unorm': Uint16Array,\n  '16sint': Int16Array,\n  '16uint': Uint16Array,\n  '32snorm': Int32Array,\n  '32unorm': Uint32Array,\n  '32sint': Int32Array,\n  '32uint': Uint32Array,\n  '16float': Uint16Array,  // TODO: change to Float16Array\n  '32float': Float32Array,\n};\n\nconst kTextureFormatRE = /([a-z]+)(\\d+)([a-z]+)/;\n\nfunction getTextureFormatInfo(format: GPUTextureFormat) {\n  // this is a hack! It will only work for common formats\n  const [, channels, bits, typeName] = kTextureFormatRE.exec(format)!;\n  // TODO: if the regex fails, use table for other formats?\n  const numChannels = channels.length;\n  const bytesPerChannel = parseInt(bits) / 8;\n  const bytesPerElement = numChannels * bytesPerChannel;\n  const Type = kFormatToTypedArray[`${bits}${typeName}`];\n\n  return {\n    channels,\n    numChannels,\n    bytesPerChannel,\n    bytesPerElement,\n    Type,\n  };\n}\n\n\n/**\n * Gets the size of a mipLevel. Returns an array of 3 numbers [width, height, depthOrArrayLayers]\n */\nexport function getSizeForMipFromTexture(texture: GPUTexture, mipLevel: number) {\n  return [\n    texture.width,\n    texture.height,\n    texture.depthOrArrayLayers,\n  ].map(v => Math.max(1, Math.floor(v / 2 ** mipLevel)));\n}\n\n/**\n * Uploads Data to a texture\n */\nfunction uploadDataToTexture(\n  device: GPUDevice,\n  texture: GPUTexture,\n  source: TextureRawDataSource,\n  options: { origin?: GPUOrigin3D },\n) {\n  const data = toTypedArray((source as TextureData).data || source, texture.format);\n  const mipLevel = 0;\n  const size = getSizeForMipFromTexture(texture, mipLevel);\n  const { bytesPerElement } = getTextureFormatInfo(texture.format);\n  const origin = options.origin || [0, 0, 0];\n  device.queue.writeTexture(\n    { texture, origin },\n    data,\n    { bytesPerRow: bytesPerElement * size[0], rowsPerImage: size[1] },\n    size,\n  );\n}\n/**\n * Copies a an array of \"sources\" (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * to a texture and then optionally generates mip levels\n */\nexport function copySourcesToTexture(\n    device: GPUDevice,\n    texture: GPUTexture,\n    sources: TextureSource[],\n    options: CopyTextureOptions = {},\n) {\n  sources.forEach((source, layer) => {\n    const origin = [0, 0, layer + (options.baseArrayLayer || 0)];\n    if (isTextureRawDataSource(source)) {\n      uploadDataToTexture(device, texture, source as TextureRawDataSource, { origin });\n    } else {\n      const s = source as GPUImageCopyExternalImage['source'];\n      const {flipY, premultipliedAlpha, colorSpace} = options;\n      device.queue.copyExternalImageToTexture(\n        { source: s, flipY, },\n        { texture, premultipliedAlpha, colorSpace, origin },\n        getSizeFromSource(s, options),\n      );\n    }\n  });\n\n  if (texture.mipLevelCount > 1) {\n    generateMipmap(device, texture);\n  }\n}\n\n\n/**\n * Copies a \"source\" (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * to a texture and then optionally generates mip levels\n */\nexport function copySourceToTexture(\n    device: GPUDevice,\n    texture: GPUTexture,\n    source: TextureSource,\n    options: CopyTextureOptions = {}) {\n  copySourcesToTexture(device, texture, [source], options);\n}\n\n/**\n * @property mips if true and mipLevelCount is not set then wll automatically generate\n *    the correct number of mip levels.\n * @property format Defaults to \"rgba8unorm\"\n * @property mipLeveLCount Defaults to 1 or the number of mips needed for a full mipmap if `mips` is true\n */\nexport type CreateTextureOptions = CopyTextureOptions & {\n  mips?: boolean,\n  usage?: GPUTextureUsageFlags,\n  format?: GPUTextureFormat,\n  mipLevelCount?: number,\n};\n\n/**\n * Gets the size from a source. This is to smooth out the fact that different\n * sources have a different way to get their size.\n */\nexport function getSizeFromSource(source: TextureSource, options: CreateTextureOptions) {\n  if (source instanceof HTMLVideoElement) {\n    return [source.videoWidth, source.videoHeight, 1];\n  } else {\n    const maybeHasWidthAndHeight = source as { width: number, height: number };\n    const { width, height } = maybeHasWidthAndHeight;\n    if (width > 0 && height > 0 && !isTextureRawDataSource(source)) {\n      // this should cover Canvas, Image, ImageData, ImageBitmap, TextureCreationData\n      return [width, height, 1];\n    }\n    const format = options.format || 'rgba8unorm';\n    const { bytesPerElement, bytesPerChannel } = getTextureFormatInfo(format);\n    const data = isTypedArray(source) || Array.isArray(source)\n       ? source\n       : (source as TextureData).data;\n    const numBytes = isTypedArray(data)\n        ? (data as TypedArray).byteLength\n        : ((data as number[]).length * bytesPerChannel);\n    const numElements = numBytes / bytesPerElement;\n    return guessDimensions(width, height, numElements);\n  }\n}\n\n/**\n * Create a texture from an array of sources (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * and optionally create mip levels. If you set `mips: true` and don't set a mipLevelCount\n * then it will automatically make the correct number of mip levels.\n *\n * Example:\n *\n * ```js\n * const texture = createTextureFromSource(\n *     device,\n *     [\n *        someCanvasOrVideoOrImageImageBitmap0,\n *        someCanvasOrVideoOrImageImageBitmap1,\n *     ],\n *     {\n *       usage: GPUTextureUsage.TEXTURE_BINDING |\n *              GPUTextureUsage.RENDER_ATTACHMENT |\n *              GPUTextureUsage.COPY_DST,\n *       mips: true,\n *     }\n * );\n * ```\n */\nexport function createTextureFromSources(\n    device: GPUDevice,\n    sources: TextureSource[],\n    options: CreateTextureOptions = {}) {\n  // NOTE: We assume all the sizes are the same. If they are not you'll get\n  // an error.\n  const size = getSizeFromSource(sources[0], options);\n  size[2] = size[2] > 1 ? size[2] : sources.length;\n\n  const texture = device.createTexture({\n    dimension: textureViewDimensionToDimension(options.dimension),\n    format: options.format || 'rgba8unorm',\n    mipLevelCount: options.mipLevelCount\n        ? options.mipLevelCount\n        : options.mips ? numMipLevels(size) : 1,\n    size,\n    usage: (options.usage ?? 0) |\n           GPUTextureUsage.TEXTURE_BINDING |\n           GPUTextureUsage.COPY_DST |\n           GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  copySourcesToTexture(device, texture, sources, options);\n\n  return texture;\n}\n\n/**\n * Create a texture from a source (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * and optionally create mip levels. If you set `mips: true` and don't set a mipLevelCount\n * then it will automatically make the correct number of mip levels.\n *\n * Example:\n *\n * ```js\n * const texture = createTextureFromSource(\n *     device,\n *     someCanvasOrVideoOrImageImageBitmap,\n *     {\n *       usage: GPUTextureUsage.TEXTURE_BINDING |\n *              GPUTextureUsage.RENDER_ATTACHMENT |\n *              GPUTextureUsage.COPY_DST,\n *       mips: true,\n *     }\n * );\n * ```\n */\nexport function createTextureFromSource(\n    device: GPUDevice,\n    source: TextureSource,\n    options: CreateTextureOptions = {}) {\n  return createTextureFromSources(device, [source], options);\n}\n\nexport type CreateTextureFromBitmapOptions = CreateTextureOptions & ImageBitmapOptions;\n\n/**\n * Load an ImageBitmap\n * @param url\n * @param options\n * @returns the loaded ImageBitmap\n */\nexport async function loadImageBitmap(url: string, options: ImageBitmapOptions = {}) {\n  const res = await fetch(url);\n  const blob = await res.blob();\n  const opt: ImageBitmapOptions = {\n    ...options,\n    ...(options.colorSpaceConversion !== undefined && {colorSpaceConversion: 'none'}),\n  };\n  return await createImageBitmap(blob, opt);\n}\n\n/**\n * Load images and create a texture from them, optionally generating mip levels\n *\n * Assumes all the urls reference images of the same size.\n *\n * Example:\n *\n * ```js\n * const texture = await createTextureFromImage(\n *   device,\n *   [\n *     'https://someimage1.url',\n *     'https://someimage2.url',\n *   ],\n *   {\n *     mips: true,\n *     flipY: true,\n *   },\n * );\n * ```\n */\nexport async function createTextureFromImages(device: GPUDevice, urls: string[], options: CreateTextureFromBitmapOptions = {}) {\n  // TODO: start once we've loaded one?\n  // We need at least 1 to know the size of the texture to create\n  const imgBitmaps = await Promise.all(urls.map(url => loadImageBitmap(url)));\n  return createTextureFromSources(device, imgBitmaps, options);\n}\n\n/**\n * Load an image and create a texture from it, optionally generating mip levels\n *\n * Example:\n *\n * ```js\n * const texture = await createTextureFromImage(device, 'https://someimage.url', {\n *   mips: true,\n *   flipY: true,\n * });\n * ```\n */\nexport async function createTextureFromImage(device: GPUDevice, url: string, options: CreateTextureFromBitmapOptions = {}) {\n  return createTextureFromImages(device, [url], options);\n}\n","/*\n * Copyright 2023 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport { isTypedArray, TypedArray, TypedArrayConstructor } from './typed-arrays.js';\nimport { Arrays } from './attribute-utils.js';\n\n/**\n * A class to provide `push` on a typed array.\n *\n * example:\n *\n * ```js\n * const positions = new TypedArrayWrapper(new Float32Array(300), 3);\n * positions.push(1, 2, 3); // add a position\n * positions.push([4, 5, 6]);  // add a position\n * positions.push(new Float32Array(6)); // add 2 positions\n * const data = positions.typedArray;\n * ```\n */\nexport class TypedArrayWrapper<T extends TypedArray> {\n  typedArray: T;\n  cursor = 0;\n  numComponents: number;\n\n  constructor(arr: T, numComponents: number) {\n    this.typedArray = arr;\n    this.numComponents = numComponents;\n  }\n  get numElements() {\n    return this.typedArray.length / this.numComponents;\n  }\n  push(...data: (number | Iterable<number>)[]) {\n    for (const value of data) {\n      if (Array.isArray(value) || isTypedArray(value)) {\n        const asArray = data as number[];\n        this.typedArray.set(asArray, this.cursor);\n        this.cursor += asArray.length;\n      } else {\n        this.typedArray[this.cursor++] = value as number;\n      }\n    }\n  }\n  reset(index = 0) {\n    this.cursor = index;\n  }\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2, Float32Array);\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param numComponents number of components\n * @param numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param Type A constructor for the type. Default = `Float32Array`.\n */\nfunction createAugmentedTypedArray<T extends TypedArrayConstructor>(numComponents: number, numElements: number, Type: T) {\n  return new TypedArrayWrapper(new Type(numComponents * numElements) as InstanceType<T>, numComponents);\n}\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param size the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param xOffset the amount to offset the quad in X\n * @param yOffset the amount to offset the quad in Y\n * @return the created XY Quad vertices\n */\nexport function createXYQuadVertices(size: number = 2, xOffset: number = 0, yOffset: number = 0) {\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  } as Arrays;\n}\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param width Width of the plane. Default = 1\n * @param depth Depth of the plane. Default = 1\n * @param subdivisionsWidth Number of steps across the plane. Default = 1\n * @param subdivisionsDepth Number of steps down the plane. Default = 1\n * @return The created plane vertices.\n */\nexport function createPlaneVertices(\n    width = 1,\n    depth = 1,\n    subdivisionsWidth = 1,\n    subdivisionsDepth = 1) {\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param radius radius of the sphere.\n * @param subdivisionsAxis number of steps around the sphere.\n * @param subdivisionsHeight number of vertically on the sphere.\n * @param startLatitudeInRadians where to start the\n *     top of the sphere.\n * @param endLatitudeInRadians Where to end the\n *     bottom of the sphere.\n * @param startLongitudeInRadians where to start\n *     wrapping the sphere.\n * @param endLongitudeInRadians where to end\n *     wrapping the sphere.\n * @return The created sphere vertices.\n */\nexport function createSphereVertices(\n    radius = 1,\n    subdivisionsAxis = 24,\n    subdivisionsHeight = 12,\n    startLatitudeInRadians = 0,\n    endLatitudeInRadians = Math.PI,\n    startLongitudeInRadians = 0,\n    endLongitudeInRadians = Math.PI * 2) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  const latRange = endLatitudeInRadians - startLatitudeInRadians;\n  const longRange = endLongitudeInRadians - startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + startLongitudeInRadians;\n      const phi = latRange * v + startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param size width, height and depth of the cube.\n * @return The created vertices.\n */\nexport function createCubeVertices(size = 1) {\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2 , numVertices, Float32Array);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param bottomRadius Bottom radius of truncated cone.\n * @param topRadius Top radius of truncated cone.\n * @param height Height of truncated cone.\n * @param radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param topCap Create top cap. Default = true.\n * @param bottomCap Create bottom cap. Default = true.\n * @return The created cone vertices.\n */\nexport function createTruncatedConeVertices(\n    bottomRadius = 1,\n    topRadius = 0,\n    height = 1,\n    radialSubdivisions = 24,\n    verticalSubdivisions = 1,\n    topCap = true,\n    bottomCap = true) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Expands RLE data\n * @param rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param padding value to add each entry with.\n * @return the expanded rleData\n */\nfunction expandRLEData(rleData: number[], padding: number[] = []) {\n  padding = padding || [];\n  const data: number[] = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push(...padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push(...element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return The created vertices.\n */\nexport function create3DFVertices() {\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts, Float32Array),\n    texcoord: createAugmentedTypedArray(2,  numVerts, Float32Array),\n    normal: createAugmentedTypedArray(3, numVerts, Float32Array),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return Object.fromEntries(Object.entries(arrays).map(([k, v]) => [k, v.typedArray]));\n}\n\n/**\n * Creates crescent vertices.\n *\n * @param verticalRadius The vertical radius of the crescent.\n * @param outerRadius The outer radius of the crescent.\n * @param innerRadius The inner radius of the crescent.\n * @param thickness The thickness of the crescent.\n * @param subdivisionsDown number of steps around the crescent.\n * @param startOffset Where to start arc. Default 0.\n * @param endOffset Where to end arg. Default 1.\n * @return The created vertices.\n */\nexport function createCrescentVertices(\n    verticalRadius: 2,\n    outerRadius: 1,\n    innerRadius: 0,\n    thickness: 1,\n    subdivisionsDown: 12,\n    startOffset: 0,\n    endOffset: 1) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals     = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords   = createAugmentedTypedArray(2, numVertices, Float32Array);\n\n  function lerp(a: number, b: number, s: number) {\n    return a + (b - a) * s;\n  }\n\n  function vAdd(a: number[], b: number[]) {\n    return a.map((v, i) => v + b[i]);\n  }\n\n  function vMultiply(a: number[], b: number[]) {\n    return a.map((v, i) => v * b[i]);\n  }\n\n  function createArc(arcRadius: number, x: number, normalMult: number[], normalAdd: number[], uMult: number, uAdd: number) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = vAdd(vMultiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset: number, rightArcOffset: number) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions.typedArray,\n    normal:   normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices:  indices.typedArray,\n  };\n}\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param radius Radius of cylinder.\n  * @param height Height of cylinder.\n  * @param radialSubdivisions The number of subdivisions around the cylinder.\n  * @param verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param topCap Create top cap. Default = true.\n  * @param bottomCap Create bottom cap. Default = true.\n  * @return The created vertices.\n  */\nexport function createCylinderVertices(\n    radius = 1,\n    height = 1,\n    radialSubdivisions = 24,\n    verticalSubdivisions = 1,\n    topCap = true,\n    bottomCap = true) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates vertices for a torus\n *\n * @param radius radius of center of torus circle.\n * @param thickness radius of torus ring.\n * @param radialSubdivisions The number of subdivisions around the torus.\n * @param bodySubdivisions The number of subdivisions around the body torus.\n * @param startAngle start angle in radians. Default = 0.\n * @param endAngle end angle in radians. Default = Math.PI * 2.\n * @return The created vertices.\n */\nexport function createTorusVertices(\n    radius = 1,\n    thickness = 0.24,\n    radialSubdivisions = 24,\n    bodySubdivisions = 12,\n    startAngle = 0,\n    endAngle = Math.PI * 2) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals     = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords   = createAugmentedTypedArray(2, numVertices, Float32Array);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal:   normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices:  indices.typedArray,\n  };\n}\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param radius Radius of the ground plane.\n * @param divisions Number of triangles in the ground plane (at least 3).\n * @param stacks Number of radial divisions (default=1).\n * @param innerRadius Default 0.\n * @param stackPower Power to raise stack size to for decreasing width.\n * @return The created vertices.\n */\nexport function createDiscVertices(\n    radius = 1,\n    divisions = 24,\n    stacks = 1,\n    innerRadius = 0,\n    stackPower = 1) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n"],"names":["roundUpToMultipleOf","v","multiple","isTypedArray","arr","length","buffer","ArrayBuffer","byteLength","b","i32","numElements","align","size","type","View","Int32Array","u32","Uint32Array","f32","Float32Array","f16","Uint16Array","vec2f","vec2i","vec2u","vec2h","vec3i","vec3u","vec3f","vec3h","vec4i","vec4u","vec4f","vec4h","mat2x2f","mat2x2h","mat3x2f","mat3x2h","mat4x2f","mat4x2h","mat2x3f","pad","mat2x3h","mat3x3f","mat3x3h","mat4x3f","mat4x3h","mat2x4f","mat2x4h","mat3x4f","mat3x4h","mat4x4f","mat4x4h","bool","typeInfo","getSizeOfTypeDef","typeDef","asArrayDef","elementType","asStructDef","fields","asIntrinsicDef","makeIntrinsicTypedArrayView","baseOffset","isArray","undefined","sizeInBytes","baseNumElements","BYTES_PER_ELEMENT","Error","isIntrinsic","makeTypedArrayViews","arrayBuffer","offset","makeViews","elementSize","effectiveNumElements","fn","i","Array","fill","map","_","views","name","Object","entries","setStructuredView","data","view","dataLen","stride","set","asArray","forEach","newValue","ndx","asViews","key","s_views","WeakMap","getView","Ctor","viewsByCtor","get","Map","getViewsByCtor","setIntrinsicFromArrayLikeOfNumber","index","setTypedValues","isArrayLikeOfNumber","fieldDef","ParseContext","constructor","this","constants","aliases","structs","Node","isAstNode","astNodeType","evaluate","context","evaluateString","toString","Statement","super","Function","args","returnType","body","StaticAssert","expression","While","condition","Continuing","For","init","increment","Var","storage","access","value","Override","Let","Const","IncrementOperator","AssignOperator","_a","TokenClass","ResourceType","parse","val","Increment","operator","variable","Assign","Call","Loop","continuing","Switch","If","elseif","_else","else","Return","Enable","Alias","Discard","Break","Continue","Type","isStruct","Struct","members","getMemberIndex","TemplateType","format","PointerType","ArrayType","attributes","count","SamplerType","Expression","StringExpr","CreateExpr","CallExpr","Math","abs","acos","acosh","asin","asinh","atan","atan2","atanh","ceil","min","max","cos","PI","sqrt","pow","exp","floor","log","log2","round","sign","sin","sinh","tan","tanh","trunc","VariableExpr","ConstExpr","initializer","_b","property","postfix","struct","memberIndex","console","LiteralExpr","BitcastExpr","TypecastExpr","GroupingExpr","contents","Operator","UnaryOperator","right","BinaryOperator","left","SwitchCase","Case","selector","Default","Argument","ElseIf","Member","Attribute","TokenType","rule","TokenTypes","none","reserved","eof","token","asm","bf16","do","enum","f64","handle","i8","i16","i64","mat","premerge","regardless","typedef","u8","u16","u64","unless","using","vec","void","keywords","array","keyword","atomic","mat2x2","mat2x3","mat2x4","mat3x2","mat3x3","mat3x4","mat4x2","mat4x3","mat4x4","ptr","sampler","sampler_comparison","texture_1d","texture_2d","texture_2d_array","texture_3d","texture_cube","texture_cube_array","texture_multisampled_2d","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","texture_depth_multisampled_2d","texture_external","vec2","vec3","vec4","bitcast","block","break","case","continue","default","discard","enable","fallthrough","false","for","function","if","let","const","loop","while","private","read","read_write","return","switch","true","alias","uniform","var","override","workgroup","write","r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8unorm_srgb","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","bgra8unorm_srgb","rgb10a2unorm","rg11b10float","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","static_assert","tokens","decimal_float_literal","hex_float_literal","int_literal","uint_literal","ident","and","and_and","arrow","attr","attr_left","attr_right","forward_slash","bang","bracket_left","bracket_right","brace_left","brace_right","colon","comma","equal","equal_equal","not_equal","greater_than","greater_than_equal","shift_right","less_than","less_than_equal","shift_left","modulo","minus","minus_minus","period","plus","plus_plus","or","or_or","paren_left","paren_right","semicolon","star","tilde","underscore","xor","plus_equal","minus_equal","times_equal","division_equal","modulo_equal","and_equal","or_equal","xor_equal","shift_right_equal","shift_left_equal","storage_class","access_mode","sampler_type","sampled_texture_type","multisampled_texture_type","storage_texture_type","depth_texture_type","texture_external_type","any_texture_type","texel_format","const_literal","literal_or_ident","element_count_expression","template_types","attribute_name","assignment_operators","increment_operators","Token","lexeme","line","isTemplateType","indexOf","isArrayType","isArrayOrTemplateType","WgslScanner","source","_tokens","_start","_current","_line","_source","scanTokens","_isAtEnd","scanToken","push","_advance","_isWhitespace","_peekAhead","commentLevel","matchType","matchedType","_findType","nextLexeme","foundLessThan","ti","_addToken","lookAheadLexeme","lookAhead","maxLookAhead","li","_match","match","exec","c","amount","text","substring","WgslParser","_context","tokensOrCode","_initialize","statements","statement","_global_decl_or_directive","scanner","_error","message","error","_peek","types","_check","l","_consume","tk","t","_previous","_type_alias","_enable_directive","attrs","_attribute","_var","_global_variable_decl","_override","_override_variable_decl","_let","_global_let_decl","_const","_global_const_decl","_struct","_struct_decl","_fn","_function_decl","argAttrs","typeAttrs","_type_decl","_return","_compound_statement","_statement","_if_statement","_switch_statement","_loop_statement","_for_statement","_while_statement","_continuing_statement","_static_assert_statement","result","_return_statement","_variable_statement","_increment_decrement_statement","_func_call_statement","_assignment_statement","_optional_paren_expression","_for_init","_short_circuit_or_expression","_for_increment","_variable_decl","savedPos","_unary_expression","decrement","isUnderscore","_argument_expression_list","s","_switch_body","cases","_case_selectors","_case_body","_cases","_c","_d","selectors","_shift_expression","nextStatement","_match_elseif","_elseif_statement","expr","_short_circuit_and_expr","_inclusive_or_expression","_exclusive_or_expression","_and_expression","_equality_expression","_relational_expression","_additive_expression","_multiplicative_expression","_singular_expression","_primary_expression","p","_postfix_expression","_getStruct","has","parseFloat","_paren_expression","arg","memberAttrs","memberName","memberType","structNode","_const_expression","_override_decl","valueExpr","constValue","aliasType","aliasNode","typeName","_texture_sampler_types","pointer","decl","countInt","parseInt","TypeInfo","isTemplate","MemberInfo","StructInfo","ArrayInfo","TemplateInfo","VariableInfo","group","binding","resourceType","AliasInfo","_TypeSize","InputInfo","locationType","location","interpolation","OutputInfo","FunctionInfo","stage","inputs","outputs","EntryFunctions","vertex","fragment","compute","OverrideInfo","id","WgslReflect","code","uniforms","textures","samplers","overrides","entry","_types","update","_isStorageTexture","ast","node","info","_getTypeInfo","_getAliasInfo","_getAttributeNum","_isUniformVar","g","varInfo","Uniform","_isStorageVar","isStorageTexture","StorageTexture","Storage","_isTextureVar","Texture","_isSamplerVar","Sampler","vertexStage","_getAttribute","fragmentStage","computeStage","_getInputs","_getOutputs","getBindGroups","groups","_makeRoom","u","_getStructOutputs","output","_getOutputInfo","m","locationValue","_parseInt","_getStructInputs","input","_getInputInfo","_parseString","n","isNaN","_getAlias","a","_updateTypeInfo","formatIsType","typeSize","_getTypeSize","formatInfo","_updateStructInfo","lastSize","lastOffset","structAlign","mi","ml","member","sizeInfo","_roundUp","explicitSize","explicitAlign","_typeInfo","divisor","arrayType","E","_textureTypes","_samplerTypes","obj","defaultValue","k","getNamedVariables","reflect","variables","fromEntries","typeDefinition","addType","makeStructDefinition","structInfo","assert","cond","msg","arrayInfo","asTemplateInfo","normalizeGPUExtent3D","slice","width","height","depthOrArrayLayers","normalizeGPUExtent3Dict","numMipLevels","dimension","sizes","maxSize","byDevice","generateMipmap","device","texture","perDeviceInfo","pipelineByFormat","moduleByView","getViewDimensionForTexture","module","createShaderModule","label","createSampler","minFilter","createRenderPipeline","layout","entryPoint","targets","pipeline","encoder","createCommandEncoder","baseMipLevel","mipLevelCount","baseArrayLayer","bindGroup","createBindGroup","getBindGroupLayout","resource","createView","arrayLayerCount","renderPassDescriptor","colorAttachments","loadOp","storeOp","pass","beginRenderPass","setPipeline","setBindGroup","draw","end","commandBuffer","finish","queue","submit","kTypedArrayToAttribFormat","Int8Array","formats","defaultForType","Uint8Array","Int16Array","kVertexFormatPrefixToType","s1","s2","flat","isIndices","makeTypedArrayFromArrayUnion","asFullSpec","kNameToNumComponents","re","numComponents","guessNumComponentsFromName","test","guessNumComponentsFromNameImpl","kVertexFormatRE","numComponentsAndTypeFromVertexFormat","prefix","createTypedArrayOfSameType","typedArray","getPrototypeOf","createBufferLayoutsFromArrays","arrays","options","interleave","stepMode","shaderLocations","shaderLocation","currentOffset","bufferLayouts","typedArrays","keys","filter","arrayName","totalNumComponents","getArray","getNumComponents","step","component","normalize","shift","arrayStride","getTypedArrayWithOffsetAndStride","ta","interleaveVertexData","attribute","srcOffset","newView","dstOffset","srcOff","subarray","isTextureRawDataSource","src","isTextureData","textureViewDimensionToDimension","viewDimension","kFormatToTypedArray","kTextureFormatRE","getTextureFormatInfo","channels","bits","numChannels","bytesPerChannel","bytesPerElement","getSizeForMipFromTexture","mipLevel","uploadDataToTexture","toTypedArray","origin","writeTexture","bytesPerRow","rowsPerImage","copySourcesToTexture","sources","layer","flipY","premultipliedAlpha","colorSpace","copyExternalImageToTexture","getSizeFromSource","HTMLVideoElement","videoWidth","videoHeight","maybeHasWidthAndHeight","depth","guessDimensions","createTextureFromSources","createTexture","mips","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","RENDER_ATTACHMENT","async","loadImageBitmap","url","res","fetch","blob","opt","colorSpaceConversion","createImageBitmap","createTextureFromImages","urls","Promise","all","TypedArrayWrapper","cursor","reset","createAugmentedTypedArray","CUBE_FACE_INDICES","createTruncatedConeVertices","bottomRadius","topRadius","radialSubdivisions","verticalSubdivisions","topCap","bottomCap","extra","numVertices","positions","normals","texcoords","indices","vertsAroundEdge","slant","cosSlant","sinSlant","yy","ringRadius","y","ii","position","normal","texcoord","expandRLEData","rleData","padding","runLength","element","jj","colors","numVerts","color","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","offsetRange","lerp","vAdd","vMultiply","createArc","arcRadius","x","normalMult","normalAdd","uMult","uAdd","z","uBack","xBack","angle","radius","px","py","pz","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","cornerVertices","faceNormals","uvCoords","f","faceIndices","uv","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","theta","d","subdivisionsWidth","subdivisionsDepth","numVertsAcross","subdivisionsAxis","subdivisionsHeight","startLatitudeInRadians","endLatitudeInRadians","startLongitudeInRadians","endLongitudeInRadians","latRange","longRange","phi","sinTheta","cosTheta","sinPhi","ux","uy","uz","numVertsAround","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ny","ring","ringAngle","xSin","zCos","nx","nz","nextRingIndex","nextSliceIndex","xOffset","yOffset","byteOffset","alignment","numBytes","buffers","bufferNdx","attribs","attrib0","data0","createBuffer","GPUBufferUsage","VERTEX","mappedAtCreation","getMappedRange","unmap","buffersAndAttributes","indicesEntry","find","indexBuffer","INDEX","indexFormat","storages","varDef","asVarDef"],"mappings":"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","x_google_ignoreList":[3]}
{"version":3,"file":"webgpu-utils.min.js","sources":["../../../src/utils.ts","../../../src/typed-arrays.ts","../../../src/buffer-views.ts","../../node_modules/wgsl_reflect/wgsl_reflect.module.js","../../../src/data-definitions.ts","../../../src/generate-mipmap.ts","../../../src/attribute-utils.ts","../../../src/texture-utils.ts","../../../src/primitives.ts"],"sourcesContent":["export const roundUpToMultipleOf = (v: number, multiple: number) => (((v + multiple - 1) / multiple) | 0) * multiple;\n\nexport function keysOf<T extends string>(obj: { [k in T]: unknown }): readonly T[] {\n  return (Object.keys(obj) as unknown[]) as T[];\n}\n\nexport function range<T>(count: number, fn: (i: number) => T) {\n    return new Array(count).fill(0).map((_, i) => fn(i));\n}\n","import {\n    roundUpToMultipleOf,\n} from './utils.js';\n\nexport type TypedArrayConstructor =\n    | Int8ArrayConstructor\n    | Uint8ArrayConstructor\n    | Int16ArrayConstructor\n    | Uint16ArrayConstructor\n    | Int32ArrayConstructor\n    | Uint32ArrayConstructor\n    | Float32ArrayConstructor\n    | Float64ArrayConstructor;\n\nexport type TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array;\n\nexport class TypedArrayViewGenerator {\n    arrayBuffer: ArrayBuffer;\n    byteOffset: number;\n\n    constructor(sizeInBytes: number) {\n        this.arrayBuffer = new ArrayBuffer(sizeInBytes);\n        this.byteOffset = 0;\n    }\n    align(alignment: number) {\n        this.byteOffset = roundUpToMultipleOf(this.byteOffset, alignment);\n    }\n    pad(numBytes: number) {\n        this.byteOffset += numBytes;\n    }\n    getView<T extends TypedArray>(Ctor: TypedArrayConstructor, numElements: number): T {\n        const view = new Ctor(this.arrayBuffer, this.byteOffset, numElements);\n        this.byteOffset += view.byteLength;\n        return view as T;\n    }\n}\n\nexport function subarray<T extends TypedArray>(arr: TypedArray, offset: number, length: number): T {\n  return arr.subarray(offset, offset + length) as T;\n}\n\n// TODO: fix better?\nexport const isTypedArray = (arr: any) =>\n  arr && typeof arr.length === 'number' && arr.buffer instanceof ArrayBuffer && typeof arr.byteLength === 'number';\n","import {\n    IntrinsicDefinition,\n    StructDefinition,\n    ArrayDefinition,\n    TypeDefinition,\n    VariableDefinition,\n} from './data-definitions.js';\nimport {\n    isTypedArray,\n    TypedArrayConstructor,\n    TypedArray,\n} from './typed-arrays.js';\nimport { roundUpToMultipleOf, keysOf, range } from './utils.js';\n\ntype TypeDef = {\n    numElements: number;\n    align: number;\n    size: number;\n    type: string;\n    View: TypedArrayConstructor;\n    flatten?: boolean,\n    pad?: readonly number[];\n};\n\nconst b: { readonly [K: string]: TypeDef } = {\n  i32: { numElements: 1, align: 4, size: 4, type: 'i32', View: Int32Array },\n  u32: { numElements: 1, align: 4, size: 4, type: 'u32', View: Uint32Array },\n  f32: { numElements: 1, align: 4, size: 4, type: 'f32', View: Float32Array },\n  f16: { numElements: 1, align: 2, size: 2, type: 'u16', View: Uint16Array },\n\n  vec2f: { numElements: 2, align:  8, size:  8, type: 'f32', View: Float32Array },\n  vec2i: { numElements: 2, align:  8, size:  8, type: 'i32', View: Int32Array },\n  vec2u: { numElements: 2, align:  8, size:  8, type: 'u32', View: Uint32Array },\n  vec2h: { numElements: 2, align:  4, size:  4, type: 'u16', View: Uint16Array },\n  vec3i: { numElements: 3, align: 16, size: 12, type: 'i32', View: Int32Array },\n  vec3u: { numElements: 3, align: 16, size: 12, type: 'u32', View: Uint32Array },\n  vec3f: { numElements: 3, align: 16, size: 12, type: 'f32', View: Float32Array },\n  vec3h: { numElements: 3, align:  8, size:  6, type: 'u16', View: Uint16Array },\n  vec4i: { numElements: 4, align: 16, size: 16, type: 'i32', View: Int32Array },\n  vec4u: { numElements: 4, align: 16, size: 16, type: 'u32', View: Uint32Array },\n  vec4f: { numElements: 4, align: 16, size: 16, type: 'f32', View: Float32Array },\n  vec4h: { numElements: 4, align:  8, size:  8, type: 'u16', View: Uint16Array },\n\n  // AlignOf(vecR)\tSizeOf(array<vecR, C>)\n  mat2x2f: { numElements:  4, align:  8, size: 16,              type: 'f32', View: Float32Array },\n  mat2x2h: { numElements:  4, align:  4, size:  8,              type: 'u16', View: Uint16Array },\n  mat3x2f: { numElements:  6, align:  8, size: 24,              type: 'f32', View: Float32Array },\n  mat3x2h: { numElements:  6, align:  4, size: 12,              type: 'u16', View: Uint16Array },\n  mat4x2f: { numElements:  8, align:  8, size: 32,              type: 'f32', View: Float32Array },\n  mat4x2h: { numElements:  8, align:  4, size: 16,              type: 'u16', View: Uint16Array },\n  mat2x3f: { numElements:  8, align: 16, size: 32, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat2x3h: { numElements:  8, align:  8, size: 16, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat3x3f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat3x3h: { numElements: 12, align:  8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat4x3f: { numElements: 16, align: 16, size: 64, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat4x3h: { numElements: 16, align:  8, size: 32, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat2x4f: { numElements:  8, align: 16, size: 32,              type: 'f32', View: Float32Array },\n  mat2x4h: { numElements:  8, align:  8, size: 16,              type: 'u16', View: Uint16Array },\n  mat3x4f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat3x4h: { numElements: 12, align:  8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat4x4f: { numElements: 16, align: 16, size: 64,              type: 'f32', View: Float32Array },\n  mat4x4h: { numElements: 16, align:  8, size: 32,              type: 'u16', View: Uint16Array },\n\n  // Note: At least as of WGSL V1 you can not create a bool for uniform or storage.\n  // You can only create one in an internal struct. But, this code generates\n  // views of structs and it needs to not fail if the struct has a bool\n  bool: { numElements: 0, align: 1, size: 0, type: 'bool', View: Uint32Array },\n} as const;\n\nconst typeInfo: { readonly [K: string]: TypeDef } = {\n  ...b,\n\n  'vec2<i32>': b.vec2i,\n  'vec2<u32>': b.vec2u,\n  'vec2<f32>': b.vec2f,\n  'vec2<f16>': b.vec2h,\n  'vec3<i32>': b.vec3i,\n  'vec3<u32>': b.vec3u,\n  'vec3<f32>': b.vec3f,\n  'vec3<f16>': b.vec3h,\n  'vec4<i32>': b.vec4i,\n  'vec4<u32>': b.vec4u,\n  'vec4<f32>': b.vec4f,\n  'vec4<f16>': b.vec4h,\n\n  'mat2x2<f32>': b.mat2x2f,\n  'mat2x2<f16>': b.mat2x2h,\n  'mat3x2<f32>': b.mat3x2f,\n  'mat3x2<f16>': b.mat3x2h,\n  'mat4x2<f32>': b.mat4x2f,\n  'mat4x2<f16>': b.mat4x2h,\n  'mat2x3<f32>': b.mat2x3f,\n  'mat2x3<f16>': b.mat2x3h,\n  'mat3x3<f32>': b.mat3x3f,\n  'mat3x3<f16>': b.mat3x3h,\n  'mat4x3<f32>': b.mat4x3f,\n  'mat4x3<f16>': b.mat4x3h,\n  'mat2x4<f32>': b.mat2x4f,\n  'mat2x4<f16>': b.mat2x4h,\n  'mat3x4<f32>': b.mat3x4f,\n  'mat3x4<f16>': b.mat3x4h,\n  'mat4x4<f32>': b.mat4x4f,\n  'mat4x4<f16>': b.mat4x4h,\n} as const;\nexport type kType = Extract<keyof typeof typeInfo, string>;\nexport const kTypes: readonly kType[] = keysOf(typeInfo);\n\n/**\n * Set which intrinsic types to make views for.\n *\n * Example:\n *\n * Given a an array of intrinsics like this\n * `array<vec3, 200>`\n *\n * The default is to create a single `Float32Array(4 * 200)`\n * because creating 200 `Float32Array` views is not usually\n * what you want.\n *\n * If you do want individual views then you'd call\n * `setIntrinsicsToView(['vec3f`])` and now you get\n * an array of 200 `Float32Array`s.\n *\n * Note: `setIntrinsicsToView` always sets ALL types. The list you\n * pass it is the types you want views created for, all other types\n * will be reset to do the default. In other words\n *\n * ```js\n * setIntrinsicsToView(['vec3f`])\n * setIntrinsicsToView(['vec2f`])\n * ```\n *\n * Only `vec2f` will have views created. `vec3f` has been reset to the default by\n * the second call\n *\n * You can pass in `true` as the 2nd parameter to make it set which types\n * to flatten and all others will be set to have views created. For example\n * to expand all types would be `setIntrinsicsToView([], true)`. To expand\n * all except `f32` would be `setIntrinsicsToView(['f32'], true)`.\n *\n * To reset all types to the default call it with no arguments\n *\n * @param types array of types to make views for\n * @param flatten whether to flatten or expand the specified types.\n */\nexport function setIntrinsicsToView(types: readonly kType[] = [], flatten?: boolean) {\n    // we need to track what we've viewed because for example `vec3f` references\n    // the same info as `vec3<f32>` so we'd set one and reset the other.\n    const visited = new Set();\n    for (const type of kTypes) {\n        const info = typeInfo[type];\n        if (!visited.has(info)) {\n            visited.add(info);\n            info.flatten = types.includes(type) ? flatten : !flatten;\n        }\n    }\n}\nsetIntrinsicsToView();\n\nexport type TypedArrayOrViews = TypedArray | Views | Views[];\nexport interface Views {\n    [x: string]: TypedArrayOrViews;\n}\nexport type ArrayBufferViews = {\n    views: TypedArrayOrViews;\n    arrayBuffer: ArrayBuffer;\n}\n\n// This needs to be fixed! ðŸ˜±\nfunction getSizeOfTypeDef(typeDef: TypeDefinition): number {\n    const asArrayDef = typeDef as ArrayDefinition;\n    const elementType = asArrayDef.elementType;\n    if (elementType) {\n        return asArrayDef.size;\n        /*\n        if (isIntrinsic(elementType)) {\n            const asIntrinsicDef = elementType as IntrinsicDefinition;\n            const { align } = typeInfo[asIntrinsicDef.type];\n            return roundUpToMultipleOf(typeDef.size, align) * asArrayDef.numElements;\n        } else {\n            return asArrayDef.numElements * getSizeOfTypeDef(elementType);\n        }\n        */\n    } else {\n        const asStructDef = typeDef as StructDefinition;\n        const numElements = asArrayDef.numElements || 1;\n        if (asStructDef.fields) {\n            return typeDef.size * numElements;\n        } else {\n            const asIntrinsicDef = typeDef as IntrinsicDefinition;\n            const { align } = typeInfo[asIntrinsicDef.type];\n            return numElements > 1\n                ? roundUpToMultipleOf(typeDef.size, align) * numElements\n                : typeDef.size;\n        }\n    }\n}\n\n// If numElements is undefined this is NOT an array. If it is defined then it IS an array\n// Sizes for arrays are different than sizes for non-arrays. Example\n// a vec3f non array is Float32Array(3)\n// a vec3f array of 2 is Float32Array(4 * 2)\n// a vec3f array of 1 is Float32Array(4 * 1)\nfunction makeIntrinsicTypedArrayView(typeDef: TypeDefinition, buffer: ArrayBuffer, baseOffset: number, numElements?: number): TypedArray {\n    const { size, type } = typeDef as IntrinsicDefinition;\n    try {\n        const { View, align } = typeInfo[type];\n        const isArray = numElements !== undefined;\n        const sizeInBytes = isArray\n            ? roundUpToMultipleOf(size, align)\n            : size;\n        const baseNumElements = sizeInBytes / View.BYTES_PER_ELEMENT;\n        const effectiveNumElements = isArray\n           ? (numElements === 0\n              ? (buffer.byteLength - baseOffset) / sizeInBytes\n              : numElements)\n           : 1;\n\n        return new View(buffer, baseOffset, baseNumElements * effectiveNumElements);\n    } catch {\n        throw new Error(`unknown type: ${type}`);\n    }\n\n}\n\nfunction isIntrinsic(typeDef: TypeDefinition) {\n    return !(typeDef as StructDefinition).fields &&\n           !(typeDef as ArrayDefinition).elementType;\n}\n\n/**\n * Creates a set of named TypedArray views on an ArrayBuffer. If you don't\n * pass in an ArrayBuffer, one will be created. If you're using an unsized\n * array then you must pass in your own arraybuffer\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct Stuff {\n *    direction: vec3f,\n *    strength: f32,\n *    matrix: mat4x4f,\n * };\n * @group(0) @binding(0) var<uniform> uni: Stuff;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const views = makeTypedArrayViews(devs.uniforms.uni.typeDefinition);\n * ```\n *\n * views would effectively be\n *\n * ```js\n * views = {\n *   direction: Float32Array(arrayBuffer, 0, 3),\n *   strength: Float32Array(arrayBuffer, 3, 4),\n *   matrix: Float32Array(arraybuffer, 4, 20),\n * };\n * ```\n *\n * You can use the views directly or you can use @link {setStructuredView}\n *\n * @param typeDef Definition of the various types of views.\n * @param arrayBuffer Optional ArrayBuffer to use (if one provided one will be created)\n * @param offset Optional offset in existing ArrayBuffer to start the views.\n * @returns A bunch of named TypedArray views and the ArrayBuffer\n */\nexport function makeTypedArrayViews(typeDef: TypeDefinition, arrayBuffer?: ArrayBuffer, offset?: number): ArrayBufferViews {\n    const baseOffset = offset || 0;\n    const buffer = arrayBuffer || new ArrayBuffer(getSizeOfTypeDef(typeDef));\n\n    const makeViews = (typeDef: TypeDefinition, baseOffset: number): TypedArrayOrViews => {\n        const asArrayDef = typeDef as ArrayDefinition;\n        const elementType = asArrayDef.elementType;\n        if (elementType) {\n            // TODO: Should be optional? Per Type? Depth set? Per field?\n            // The issue is, if we have `array<vec4, 1000>` we don't likely\n            // want 1000 `Float32Array(4)` views. We want 1 `Float32Array(1000 * 4)` view.\n            // On the other hand, if we have `array<mat4x4, 10>` the maybe we do want\n            // 10 `Float32Array(16)` views since you might want to do\n            // `mat4.perspective(fov, aspect, near, far, foo.bar.arrayOf10Mat4s[3])`;\n            if (isIntrinsic(elementType) && typeInfo[(elementType as IntrinsicDefinition).type].flatten) {\n                return makeIntrinsicTypedArrayView(elementType, buffer, baseOffset, asArrayDef.numElements);\n            } else {\n                const {size} = getSizeAndAlignmentOfUnsizedArrayElementOfTypeDef(typeDef);\n                const effectiveNumElements = asArrayDef.numElements === 0\n                   ? (buffer.byteLength - baseOffset) / size\n                   : asArrayDef.numElements;\n                return range(effectiveNumElements, i => makeViews(elementType, baseOffset + size * i)) as Views[];\n            }\n        } else if (typeof typeDef === 'string') {\n            throw Error('unreachable');\n        } else {\n            const fields = (typeDef as StructDefinition).fields;\n            if (fields) {\n                const views: Views = {};\n                for (const [name, {type, offset}] of Object.entries(fields)) {\n                    views[name] = makeViews(type, baseOffset + offset);\n                }\n                return views;\n            } else {\n                return makeIntrinsicTypedArrayView(typeDef, buffer, baseOffset);\n            }\n        }\n    };\n    return { views: makeViews(typeDef, baseOffset), arrayBuffer: buffer };\n}\n\n/**\n * Given a set of TypeArrayViews and matching JavaScript data\n * sets the content of the views.\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct Stuff {\n *    direction: vec3f,\n *    strength: f32,\n *    matrix: mat4x4f,\n * };\n * @group(0) @binding(0) var<uniform> uni: Stuff;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const views = makeTypedArrayViews(devs.uniforms.uni.typeDefinition);\n *\n * setStructuredViews({\n *   direction: [1, 2, 3],\n *   strength: 45,\n *   matrix: [\n *     1, 0, 0, 0,\n *     0, 1, 0, 0,\n *     0, 0, 1, 0,\n *     0, 0, 0, 1,\n *   ],\n * });\n * ```\n *\n * The code above will set the various views, which all point to different\n * locations within the same array buffer.\n *\n * See @link {makeTypedArrayViews}.\n *\n * @param data The new values\n * @param views TypedArray views as returned from {@link makeTypedArrayViews}\n */\nexport function setStructuredView(data: any, views: TypedArrayOrViews): void {\n    if (data === undefined) {\n        return;\n    } else if (isTypedArray(views)) {\n        const view = views as TypedArray;\n        if (view.length === 1 && typeof data === 'number') {\n            view[0] = data;\n        } else {\n            if (Array.isArray(data[0]) || isTypedArray(data[0])) {\n                // complete hack!\n                // there's no type data here so let's guess based on the user's data\n                const dataLen = data[0].length;\n                const stride = dataLen === 3 ? 4 : dataLen;\n                for (let i = 0; i < data.length; ++i) {\n                    const offset = i * stride;\n                    view.set(data[i], offset);\n                }\n            } else {\n                view.set(data as number[]);\n            }\n        }\n    } else if (Array.isArray(views)) {\n        const asArray = views as Views[];\n        (data as any[]).forEach((newValue, ndx) => {\n            setStructuredView(newValue, asArray[ndx]);\n        });\n    } else {\n        const asViews = views as Views;\n        for (const [key, newValue] of Object.entries(data)) {\n            const view = asViews[key];\n            if (view) {\n                setStructuredView(newValue, view);\n            }\n        }\n    }\n}\n\nexport type StructuredView = ArrayBufferViews & {\n    /**\n     * Sets the contents of the TypedArrays based on the data passed in\n     * Note: The data may be sparse\n     *\n     * example:\n     *\n     * ```js\n     * const code = `\n     * struct HSL {\n     *   hue: f32,\n     *   sat: f32,\n     *   lum: f32,\n     * };\n     * struct MyUniforms {\n     *    colors: array<HSL, 4>,\n     *    brightness: f32,\n     *    kernel: array<f32, 9>,\n     * };\n     * @group(0) @binding(0) var<uniform> myUniforms: MyUniforms;\n     * `;\n     * const defs = makeShaderDataDefinitions(code);\n     * const myUniformValues = makeStructuredView(defs.uniforms.myUniforms);\n     *\n     * myUniformValues.set({\n     *   colors: [\n     *     ,\n     *     ,\n     *     { hue: 0.5, sat: 1.0, lum: 0.5 },  // only set the 3rd color\n     *   ],\n     *   brightness: 0.8,\n     *   kernel: [\n     *      1, 0, -1,\n     *      2, 0, -2,\n     *      1, 0, -1,\n     *   ],\n     * });\n     * ```\n     *\n     * @param data\n     */\n    set(data: any): void;\n}\n\n/**\n * Given a VariableDefinition, create matching TypedArray views\n * @param varDef A VariableDefinition as returned from {@link makeShaderDataDefinitions}\n * @param arrayBuffer Optional ArrayBuffer for the views\n * @param offset Optional offset into the ArrayBuffer for the views\n * @returns TypedArray views for the various named fields of the structure as well\n *    as a `set` function to make them easy to set, and the arrayBuffer\n */\nexport function makeStructuredView(varDef: VariableDefinition | StructDefinition, arrayBuffer?: ArrayBuffer, offset = 0): StructuredView {\n    const asVarDef = varDef as VariableDefinition;\n    const typeDef = asVarDef.group === undefined ? varDef as StructDefinition : asVarDef.typeDefinition;\n    const views = makeTypedArrayViews(typeDef, arrayBuffer, offset);\n    return {\n        ...views,\n        set(data: any) {\n            setStructuredView(data, views.views);\n        },\n    };\n}\n\ntype ViewsByCtor = Map<TypedArrayConstructor, TypedArray>;\nconst s_views = new WeakMap<ArrayBuffer, ViewsByCtor>();\n\nfunction getViewsByCtor(arrayBuffer: ArrayBuffer): ViewsByCtor {\n    let viewsByCtor = s_views.get(arrayBuffer);\n    if (!viewsByCtor) {\n        viewsByCtor = new Map();\n        s_views.set(arrayBuffer, viewsByCtor);\n    }\n    return viewsByCtor;\n}\n\nfunction getView<T extends TypedArray>(arrayBuffer: ArrayBuffer, Ctor: TypedArrayConstructor): T {\n    const viewsByCtor = getViewsByCtor(arrayBuffer);\n    let view = viewsByCtor.get(Ctor);\n    if (!view) {\n        view = new Ctor(arrayBuffer);\n        viewsByCtor.set(Ctor, view);\n    }\n    return view as T;\n}\n\n// Is this something like [1,2,3]?\nfunction isArrayLikeOfNumber(data: any) {\n    return isTypedArray(data) || Array.isArray(data) && typeof data[0] === 'number';\n}\n\nfunction setIntrinsicFromArrayLikeOfNumber(typeDef: IntrinsicDefinition, data: any, arrayBuffer: ArrayBuffer, offset: number) {\n    const asIntrinsicDefinition = typeDef as IntrinsicDefinition;\n    const type = typeInfo[asIntrinsicDefinition.type];\n    const view = getView(arrayBuffer, type.View);\n    const index = offset / view.BYTES_PER_ELEMENT;\n    if (typeof data === 'number') {\n        view[index] = data;\n    } else {\n        view.set(data, index);\n    }\n}\n\n/**\n * Sets values on an existing array buffer from a TypeDefinition\n * @param typeDef A type definition provided by @link {makeShaderDataDefinitions}\n * @param data The source data\n * @param arrayBuffer The arrayBuffer who's data to set.\n * @param offset An offset in the arrayBuffer to start at.\n */\nexport function setTypedValues(typeDef: TypeDefinition, data: any, arrayBuffer: ArrayBuffer, offset = 0) {\n    const asArrayDef = typeDef as ArrayDefinition;\n    const elementType = asArrayDef.elementType;\n    if (elementType) {\n        // It's ArrayDefinition\n        if (isIntrinsic(elementType)) {\n            const asIntrinsicDef = elementType as IntrinsicDefinition;\n            if (isArrayLikeOfNumber(data)) {\n                setIntrinsicFromArrayLikeOfNumber(asIntrinsicDef, data, arrayBuffer, offset);\n                return;\n            }\n        }\n        data.forEach((newValue: any, ndx: number) => {\n            setTypedValues(elementType, newValue, arrayBuffer, offset + elementType.size * ndx);\n        });\n        return;\n    }\n\n    const asStructDef = typeDef as StructDefinition;\n    const fields = asStructDef.fields;\n    if (fields) {\n        // It's StructDefinition\n        for (const [key, newValue] of Object.entries(data)) {\n            const fieldDef = fields[key];\n            if (fieldDef) {\n                setTypedValues(fieldDef.type, newValue, arrayBuffer, offset + fieldDef.offset);\n            }\n        }\n    } else {\n        // It's IntrinsicDefinition\n        setIntrinsicFromArrayLikeOfNumber(typeDef as IntrinsicDefinition, data, arrayBuffer, offset);\n    }\n}\n\n/**\n * Same as @link {setTypedValues} except it takes a @link {VariableDefinition}.\n * @param varDef A variable definition provided by @link {makeShaderDataDefinitions}\n * @param data The source data\n * @param arrayBuffer The arrayBuffer who's data to set.\n * @param offset An offset in the arrayBuffer to start at.\n */\nexport function setStructuredValues(varDef: VariableDefinition, data: any, arrayBuffer: ArrayBuffer, offset = 0) {\n    setTypedValues(varDef.typeDefinition, data, arrayBuffer, offset);\n}\n\nfunction getAlignmentOfTypeDef(typeDef: TypeDefinition): number {\n    const asArrayDef = typeDef as ArrayDefinition;\n    const elementType = asArrayDef.elementType;\n    if (elementType) {\n        return getAlignmentOfTypeDef(elementType);\n    }\n\n    const asStructDef = typeDef as StructDefinition;\n    const fields = asStructDef.fields;\n    if (fields) {\n        return Object.values(fields).reduce((max, {type}) => Math.max(max, getAlignmentOfTypeDef(type)), 0);\n    }\n\n    const { type } = typeDef as IntrinsicDefinition;\n    const { align } = typeInfo[type];\n    return align;\n}\n\ntype ElementInfo = {\n    unalignedSize: number,\n    align: number,\n    size: number,\n};\n\nfunction getSizeAndAlignmentOfUnsizedArrayElementOfTypeDef(typeDef: TypeDefinition): ElementInfo {\n    const asArrayDef = typeDef as ArrayDefinition;\n    const elementType = asArrayDef.elementType;\n    if (elementType) {\n        const unalignedSize = elementType.size;\n        const align = getAlignmentOfTypeDef(elementType);\n        return {\n            unalignedSize,\n            align,\n            size: roundUpToMultipleOf(unalignedSize, align),\n        };\n    }\n\n    const asStructDef = typeDef as StructDefinition;\n    const fields = asStructDef.fields;\n    if (fields) {\n        const lastField = Object.values(fields).pop()!;\n        if (lastField.type.size === 0) {\n            return getSizeAndAlignmentOfUnsizedArrayElementOfTypeDef(lastField.type);\n        }\n    }\n\n    return {\n        size: 0,\n        unalignedSize: 0,\n        align: 1,\n    };\n}\n\n/**\n * Returns the size, align, and unalignedSize of \"the\" unsized array element. Unsized arrays are only\n * allowed at the outer most level or the last member of a top level struct.\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct Foo {\n *   a: u32,\n *   b: array<vec3f>,\n * };\n * @group(0) @binding(0) var<storage> f: Foo;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const { size, align, unalignedSize } = getSizeAndAlignmentOfUnsizedArrayElement(\n *    defs.storages.f);\n * // size = 16   (since you need to allocate 16 bytes per element)\n * // align = 16  (since vec3f needs to be aligned to 16 bytes)\n * // unalignedSize = 12 (since only 12 bytes are used for a vec3f)\n * ```\n *\n * Generally you only need size. Example:\n *\n *\n * ```js\n * const code = `\n * struct Foo {\n *   a: u32,\n *   b: array<vec3f>,\n * };\n * @group(0) @binding(0) var<storage> f: Foo;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const { size } = getSizeAndAlignmentOfUnsizedArrayElement(defs.storages.f);\n * const numElements = 10;\n * const views = makeStructuredViews(\n *    defs.storages.f,\n *    new ArrayBuffer(defs.storages.f.size + size * numElements));\n * ```\n  * @param varDef A variable definition provided by @link {makeShaderDataDefinitions}\n * @returns the size, align, and unalignedSize in bytes of the unsized array element in this type definition.\n *   If there is no unsized array, size = 0.\n */\nexport function getSizeAndAlignmentOfUnsizedArrayElement(varDef: VariableDefinition | StructDefinition): {size: number, align: number} {\n    const asVarDef = varDef as VariableDefinition;\n    const typeDef = asVarDef.group === undefined ? varDef as StructDefinition : asVarDef.typeDefinition;\n    return getSizeAndAlignmentOfUnsizedArrayElementOfTypeDef(typeDef);\n}\n","class ParseContext {\n    constructor() {\n        this.constants = new Map();\n        this.aliases = new Map();\n        this.structs = new Map();\n    }\n}\n/**\n * @class Node\n * @category AST\n * Base class for AST nodes parsed from a WGSL shader.\n */\nclass Node {\n    constructor() { }\n    get isAstNode() {\n        return true;\n    }\n    get astNodeType() {\n        return \"\";\n    }\n    evaluate(context) {\n        throw new Error(\"Cannot evaluate node\");\n    }\n    evaluateString(context) {\n        return this.evaluate(context).toString();\n    }\n}\n/**\n * @class Statement\n * @extends Node\n * @category AST\n */\nclass Statement extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class Function\n * @extends Statement\n * @category AST\n */\nclass Function extends Statement {\n    constructor(name, args, returnType, body) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.returnType = returnType;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"function\";\n    }\n}\n/**\n * @class StaticAssert\n * @extends Statement\n * @category AST\n */\nclass StaticAssert extends Statement {\n    constructor(expression) {\n        super();\n        this.expression = expression;\n    }\n    get astNodeType() {\n        return \"staticAssert\";\n    }\n}\n/**\n * @class While\n * @extends Statement\n * @category AST\n */\nclass While extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"while\";\n    }\n}\n/**\n * @class Continuing\n * @extends Statement\n * @category AST\n */\nclass Continuing extends Statement {\n    constructor(body) {\n        super();\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"continuing\";\n    }\n}\n/**\n * @class For\n * @extends Statement\n * @category AST\n */\nclass For extends Statement {\n    constructor(init, condition, increment, body) {\n        super();\n        this.init = init;\n        this.condition = condition;\n        this.increment = increment;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"for\";\n    }\n}\n/**\n * @class Var\n * @extends Statement\n * @category AST\n */\nclass Var extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"var\";\n    }\n}\n/**\n * @class Override\n * @extends Statement\n * @category AST\n */\nclass Override extends Statement {\n    constructor(name, type, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"override\";\n    }\n}\n/**\n * @class Let\n * @extends Statement\n * @category AST\n */\nclass Let extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"let\";\n    }\n}\n/**\n * @class Const\n * @extends Statement\n * @category AST\n */\nclass Const extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"const\";\n    }\n    evaluate(context) {\n        return this.value.evaluate(context);\n    }\n}\nvar IncrementOperator;\n(function (IncrementOperator) {\n    IncrementOperator[\"increment\"] = \"++\";\n    IncrementOperator[\"decrement\"] = \"--\";\n})(IncrementOperator || (IncrementOperator = {}));\n(function (IncrementOperator) {\n    function parse(val) {\n        const key = val;\n        if (key == \"parse\")\n            throw new Error(\"Invalid value for IncrementOperator\");\n        return IncrementOperator[key];\n    }\n    IncrementOperator.parse = parse;\n})(IncrementOperator || (IncrementOperator = {}));\n/**\n * @class Increment\n * @extends Statement\n * @category AST\n */\nclass Increment extends Statement {\n    constructor(operator, variable) {\n        super();\n        this.operator = operator;\n        this.variable = variable;\n    }\n    get astNodeType() {\n        return \"increment\";\n    }\n}\nvar AssignOperator;\n(function (AssignOperator) {\n    AssignOperator[\"assign\"] = \"=\";\n    AssignOperator[\"addAssign\"] = \"+=\";\n    AssignOperator[\"subtractAssin\"] = \"-=\";\n    AssignOperator[\"multiplyAssign\"] = \"*=\";\n    AssignOperator[\"divideAssign\"] = \"/=\";\n    AssignOperator[\"moduloAssign\"] = \"%=\";\n    AssignOperator[\"andAssign\"] = \"&=\";\n    AssignOperator[\"orAssign\"] = \"|=\";\n    AssignOperator[\"xorAssign\"] = \"^=\";\n    AssignOperator[\"shiftLeftAssign\"] = \"<<=\";\n    AssignOperator[\"shiftRightAssign\"] = \">>=\";\n})(AssignOperator || (AssignOperator = {}));\n(function (AssignOperator) {\n    function parse(val) {\n        const key = val;\n        if (key == \"parse\")\n            throw new Error(\"Invalid value for AssignOperator\");\n        return AssignOperator[key];\n    }\n    AssignOperator.parse = parse;\n})(AssignOperator || (AssignOperator = {}));\n/**\n * @class Assign\n * @extends Statement\n * @category AST\n */\nclass Assign extends Statement {\n    constructor(operator, variable, value) {\n        super();\n        this.operator = operator;\n        this.variable = variable;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"assign\";\n    }\n}\n/**\n * @class Call\n * @extends Statement\n * @category AST\n */\nclass Call extends Statement {\n    constructor(name, args) {\n        super();\n        this.name = name;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"call\";\n    }\n}\n/**\n * @class Loop\n * @extends Statement\n * @category AST\n */\nclass Loop extends Statement {\n    constructor(body, continuing) {\n        super();\n        this.body = body;\n        this.continuing = continuing;\n    }\n    get astNodeType() {\n        return \"loop\";\n    }\n}\n/**\n * @class Switch\n * @extends Statement\n * @category AST\n */\nclass Switch extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"body\";\n    }\n}\n/**\n * @class If\n * @extends Statement\n * @category AST\n */\nclass If extends Statement {\n    constructor(condition, body, elseif, _else) {\n        super();\n        this.condition = condition;\n        this.body = body;\n        this.elseif = elseif;\n        this.else = _else;\n    }\n    get astNodeType() {\n        return \"if\";\n    }\n}\n/**\n * @class Return\n * @extends Statement\n * @category AST\n */\nclass Return extends Statement {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"return\";\n    }\n}\n/**\n * @class Enable\n * @extends Statement\n * @category AST\n */\nclass Enable extends Statement {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"enable\";\n    }\n}\n/**\n * @class Alias\n * @extends Statement\n * @category AST\n */\nclass Alias extends Statement {\n    constructor(name, type) {\n        super();\n        this.name = name;\n        this.type = type;\n    }\n    get astNodeType() {\n        return \"alias\";\n    }\n}\n/**\n * @class Discard\n * @extends Statement\n * @category AST\n */\nclass Discard extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"discard\";\n    }\n}\n/**\n * @class Break\n * @extends Statement\n * @category AST\n */\nclass Break extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"break\";\n    }\n}\n/**\n * @class Continue\n * @extends Statement\n * @category AST\n */\nclass Continue extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"continue\";\n    }\n}\n/**\n * @class Type\n * @extends Statement\n * @category AST\n */\nclass Type extends Statement {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"type\";\n    }\n    get isStruct() {\n        return false;\n    }\n    get isArray() {\n        return false;\n    }\n}\n/**\n * @class StructType\n * @extends Type\n * @category AST\n */\nclass Struct extends Type {\n    constructor(name, members) {\n        super(name);\n        this.members = members;\n    }\n    get astNodeType() {\n        return \"struct\";\n    }\n    get isStruct() {\n        return true;\n    }\n    /// Return the index of the member with the given name, or -1 if not found.\n    getMemberIndex(name) {\n        for (let i = 0; i < this.members.length; i++) {\n            if (this.members[i].name == name)\n                return i;\n        }\n        return -1;\n    }\n}\n/**\n * @class TemplateType\n * @extends Type\n * @category AST\n */\nclass TemplateType extends Type {\n    constructor(name, format, access) {\n        super(name);\n        this.format = format;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"template\";\n    }\n}\n/**\n * @class PointerType\n * @extends Type\n * @category AST\n */\nclass PointerType extends Type {\n    constructor(name, storage, type, access) {\n        super(name);\n        this.storage = storage;\n        this.type = type;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"pointer\";\n    }\n}\n/**\n * @class ArrayType\n * @extends Type\n * @category AST\n */\nclass ArrayType extends Type {\n    constructor(name, attributes, format, count) {\n        super(name);\n        this.attributes = attributes;\n        this.format = format;\n        this.count = count;\n    }\n    get astNodeType() {\n        return \"array\";\n    }\n    get isArray() {\n        return true;\n    }\n}\n/**\n * @class SamplerType\n * @extends Type\n * @category AST\n */\nclass SamplerType extends Type {\n    constructor(name, format, access) {\n        super(name);\n        this.format = format;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"sampler\";\n    }\n}\n/**\n * @class Expression\n * @extends Node\n * @category AST\n */\nclass Expression extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class StringExpr\n * @extends Expression\n * @category AST\n */\nclass StringExpr extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"stringExpr\";\n    }\n    toString() {\n        return this.value;\n    }\n    evaluateString() {\n        return this.value;\n    }\n}\n/**\n * @class CreateExpr\n * @extends Expression\n * @category AST\n */\nclass CreateExpr extends Expression {\n    constructor(type, args) {\n        super();\n        this.type = type;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"createExpr\";\n    }\n}\n/**\n * @class CallExpr\n * @extends Expression\n * @category AST\n */\nclass CallExpr extends Expression {\n    constructor(name, args) {\n        super();\n        this.name = name;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"callExpr\";\n    }\n    evaluate(context) {\n        switch (this.name) {\n            case \"abs\":\n                return Math.abs(this.args[0].evaluate(context));\n            case \"acos\":\n                return Math.acos(this.args[0].evaluate(context));\n            case \"acosh\":\n                return Math.acosh(this.args[0].evaluate(context));\n            case \"asin\":\n                return Math.asin(this.args[0].evaluate(context));\n            case \"asinh\":\n                return Math.asinh(this.args[0].evaluate(context));\n            case \"atan\":\n                return Math.atan(this.args[0].evaluate(context));\n            case \"atan2\":\n                return Math.atan2(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"atanh\":\n                return Math.atanh(this.args[0].evaluate(context));\n            case \"ceil\":\n                return Math.ceil(this.args[0].evaluate(context));\n            case \"clamp\":\n                return Math.min(Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context)), this.args[2].evaluate(context));\n            case \"cos\":\n                return Math.cos(this.args[0].evaluate(context));\n            //case \"cross\":\n            //TODO: (x[i] * y[j] - x[j] * y[i])\n            case \"degrees\":\n                return (this.args[0].evaluate(context) * 180) / Math.PI;\n            //case \"determinant\":\n            //TODO implement\n            case \"distance\":\n                return Math.sqrt(Math.pow(this.args[0].evaluate(context) - this.args[1].evaluate(context), 2));\n            case \"dot\":\n            //TODO: (x[i] * y[i])\n            case \"exp\":\n                return Math.exp(this.args[0].evaluate(context));\n            case \"exp2\":\n                return Math.pow(2, this.args[0].evaluate(context));\n            //case \"extractBits\":\n            //TODO: implement\n            //case \"firstLeadingBit\":\n            //TODO: implement\n            case \"floor\":\n                return Math.floor(this.args[0].evaluate(context));\n            case \"fma\":\n                return (this.args[0].evaluate(context) * this.args[1].evaluate(context) +\n                    this.args[2].evaluate(context));\n            case \"fract\":\n                return (this.args[0].evaluate(context) -\n                    Math.floor(this.args[0].evaluate(context)));\n            //case \"frexp\":\n            //TODO: implement\n            case \"inverseSqrt\":\n                return 1 / Math.sqrt(this.args[0].evaluate(context));\n            //case \"length\":\n            //TODO: implement\n            case \"log\":\n                return Math.log(this.args[0].evaluate(context));\n            case \"log2\":\n                return Math.log2(this.args[0].evaluate(context));\n            case \"max\":\n                return Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"min\":\n                return Math.min(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"mix\":\n                return (this.args[0].evaluate(context) *\n                    (1 - this.args[2].evaluate(context)) +\n                    this.args[1].evaluate(context) * this.args[2].evaluate(context));\n            case \"modf\":\n                return (this.args[0].evaluate(context) -\n                    Math.floor(this.args[0].evaluate(context)));\n            case \"pow\":\n                return Math.pow(this.args[0].evaluate(context), this.args[1].evaluate(context));\n            case \"radians\":\n                return (this.args[0].evaluate(context) * Math.PI) / 180;\n            case \"round\":\n                return Math.round(this.args[0].evaluate(context));\n            case \"sign\":\n                return Math.sign(this.args[0].evaluate(context));\n            case \"sin\":\n                return Math.sin(this.args[0].evaluate(context));\n            case \"sinh\":\n                return Math.sinh(this.args[0].evaluate(context));\n            case \"saturate\":\n                return Math.min(Math.max(this.args[0].evaluate(context), 0), 1);\n            case \"smoothstep\":\n                return (this.args[0].evaluate(context) *\n                    this.args[0].evaluate(context) *\n                    (3 - 2 * this.args[0].evaluate(context)));\n            case \"sqrt\":\n                return Math.sqrt(this.args[0].evaluate(context));\n            case \"step\":\n                return this.args[0].evaluate(context) < this.args[1].evaluate(context)\n                    ? 0\n                    : 1;\n            case \"tan\":\n                return Math.tan(this.args[0].evaluate(context));\n            case \"tanh\":\n                return Math.tanh(this.args[0].evaluate(context));\n            case \"trunc\":\n                return Math.trunc(this.args[0].evaluate(context));\n            default:\n                throw new Error(\"Non const function: \" + this.name);\n        }\n    }\n}\n/**\n * @class VariableExpr\n * @extends Expression\n * @category AST\n */\nclass VariableExpr extends Expression {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"varExpr\";\n    }\n}\n/**\n * @class ConstExpr\n * @extends Expression\n * @category AST\n */\nclass ConstExpr extends Expression {\n    constructor(name, initializer) {\n        super();\n        this.name = name;\n        this.initializer = initializer;\n    }\n    get astNodeType() {\n        return \"constExpr\";\n    }\n    evaluate(context) {\n        var _a, _b;\n        if (this.initializer instanceof CreateExpr) {\n            // This is a struct constant\n            const property = (_a = this.postfix) === null || _a === void 0 ? void 0 : _a.evaluateString(context);\n            const type = (_b = this.initializer.type) === null || _b === void 0 ? void 0 : _b.name;\n            const struct = context.structs.get(type);\n            const memberIndex = struct === null || struct === void 0 ? void 0 : struct.getMemberIndex(property);\n            if (memberIndex != -1) {\n                const value = this.initializer.args[memberIndex].evaluate(context);\n                return value;\n            }\n            console.log(memberIndex);\n        }\n        return this.initializer.evaluate(context);\n    }\n}\n/**\n * @class LiteralExpr\n * @extends Expression\n * @category AST\n */\nclass LiteralExpr extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"literalExpr\";\n    }\n    evaluate() {\n        return this.value;\n    }\n}\n/**\n * @class BitcastExpr\n * @extends Expression\n * @category AST\n */\nclass BitcastExpr extends Expression {\n    constructor(type, value) {\n        super();\n        this.type = type;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"bitcastExpr\";\n    }\n}\n/**\n * @class TypecastExpr\n * @extends Expression\n * @category AST\n */\nclass TypecastExpr extends Expression {\n    constructor(type, args) {\n        super();\n        this.type = type;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"typecastExpr\";\n    }\n    evaluate(context) {\n        return this.args[0].evaluate(context);\n    }\n}\n/**\n * @class GroupingExpr\n * @extends Expression\n * @category AST\n */\nclass GroupingExpr extends Expression {\n    constructor(contents) {\n        super();\n        this.contents = contents;\n    }\n    get astNodeType() {\n        return \"groupExpr\";\n    }\n    evaluate(context) {\n        return this.contents[0].evaluate(context);\n    }\n}\n/**\n * @class Operator\n * @extends Expression\n * @category AST\n */\nclass Operator extends Expression {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class UnaryOperator\n * @extends Operator\n * @category AST\n * @property {string} operator +, -, !, ~\n */\nclass UnaryOperator extends Operator {\n    constructor(operator, right) {\n        super();\n        this.operator = operator;\n        this.right = right;\n    }\n    get astNodeType() {\n        return \"unaryOp\";\n    }\n    evaluate(context) {\n        switch (this.operator) {\n            case \"+\":\n                return this.right.evaluate(context);\n            case \"-\":\n                return -this.right.evaluate(context);\n            case \"!\":\n                return this.right.evaluate(context) ? 0 : 1;\n            case \"~\":\n                return ~this.right.evaluate(context);\n            default:\n                throw new Error(\"Unknown unary operator: \" + this.operator);\n        }\n    }\n}\n/**\n * @class BinaryOperator\n * @extends Operator\n * @category AST\n * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||\n */\nclass BinaryOperator extends Operator {\n    constructor(operator, left, right) {\n        super();\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n    get astNodeType() {\n        return \"binaryOp\";\n    }\n    evaluate(context) {\n        switch (this.operator) {\n            case \"+\":\n                return this.left.evaluate(context) + this.right.evaluate(context);\n            case \"-\":\n                return this.left.evaluate(context) - this.right.evaluate(context);\n            case \"*\":\n                return this.left.evaluate(context) * this.right.evaluate(context);\n            case \"/\":\n                return this.left.evaluate(context) / this.right.evaluate(context);\n            case \"%\":\n                return this.left.evaluate(context) % this.right.evaluate(context);\n            case \"==\":\n                return this.left.evaluate(context) == this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"!=\":\n                return this.left.evaluate(context) != this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"<\":\n                return this.left.evaluate(context) < this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \">\":\n                return this.left.evaluate(context) > this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"<=\":\n                return this.left.evaluate(context) <= this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \">=\":\n                return this.left.evaluate(context) >= this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"&&\":\n                return this.left.evaluate(context) && this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            case \"||\":\n                return this.left.evaluate(context) || this.right.evaluate(context)\n                    ? 1\n                    : 0;\n            default:\n                throw new Error(`Unknown operator ${this.operator}`);\n        }\n    }\n}\n/**\n * @class SwitchCase\n * @extends Node\n * @category AST\n */\nclass SwitchCase extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class Case\n * @extends SwitchCase\n * @category AST\n */\nclass Case extends SwitchCase {\n    constructor(selector, body) {\n        super();\n        this.selector = selector;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"case\";\n    }\n}\n/**\n * @class Default\n * @extends SwitchCase\n * @category AST\n */\nclass Default extends SwitchCase {\n    constructor(body) {\n        super();\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"default\";\n    }\n}\n/**\n * @class Argument\n * @extends Node\n * @category AST\n */\nclass Argument extends Node {\n    constructor(name, type, attributes) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n    }\n    get astNodeType() {\n        return \"argument\";\n    }\n}\n/**\n * @class ElseIf\n * @extends Node\n * @category AST\n */\nclass ElseIf extends Node {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"elseif\";\n    }\n}\n/**\n * @class Member\n * @extends Node\n * @category AST\n */\nclass Member extends Node {\n    constructor(name, type, attributes) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n    }\n    get astNodeType() {\n        return \"member\";\n    }\n}\n/**\n * @class Attribute\n * @extends Node\n * @category AST\n */\nclass Attribute extends Node {\n    constructor(name, value) {\n        super();\n        this.name = name;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"attribute\";\n    }\n}\n\nvar _a;\nvar TokenClass;\n(function (TokenClass) {\n    TokenClass[TokenClass[\"token\"] = 0] = \"token\";\n    TokenClass[TokenClass[\"keyword\"] = 1] = \"keyword\";\n    TokenClass[TokenClass[\"reserved\"] = 2] = \"reserved\";\n})(TokenClass || (TokenClass = {}));\nclass TokenType {\n    constructor(name, type, rule) {\n        this.name = name;\n        this.type = type;\n        this.rule = rule;\n    }\n    toString() {\n        return this.name;\n    }\n}\n/// Catalog of defined token types, keywords, and reserved words.\nclass TokenTypes {\n}\n_a = TokenTypes;\nTokenTypes.none = new TokenType(\"\", TokenClass.reserved, \"\");\nTokenTypes.eof = new TokenType(\"EOF\", TokenClass.token, \"\");\nTokenTypes.reserved = {\n    asm: new TokenType(\"asm\", TokenClass.reserved, \"asm\"),\n    bf16: new TokenType(\"bf16\", TokenClass.reserved, \"bf16\"),\n    do: new TokenType(\"do\", TokenClass.reserved, \"do\"),\n    enum: new TokenType(\"enum\", TokenClass.reserved, \"enum\"),\n    f16: new TokenType(\"f16\", TokenClass.reserved, \"f16\"),\n    f64: new TokenType(\"f64\", TokenClass.reserved, \"f64\"),\n    handle: new TokenType(\"handle\", TokenClass.reserved, \"handle\"),\n    i8: new TokenType(\"i8\", TokenClass.reserved, \"i8\"),\n    i16: new TokenType(\"i16\", TokenClass.reserved, \"i16\"),\n    i64: new TokenType(\"i64\", TokenClass.reserved, \"i64\"),\n    mat: new TokenType(\"mat\", TokenClass.reserved, \"mat\"),\n    premerge: new TokenType(\"premerge\", TokenClass.reserved, \"premerge\"),\n    regardless: new TokenType(\"regardless\", TokenClass.reserved, \"regardless\"),\n    typedef: new TokenType(\"typedef\", TokenClass.reserved, \"typedef\"),\n    u8: new TokenType(\"u8\", TokenClass.reserved, \"u8\"),\n    u16: new TokenType(\"u16\", TokenClass.reserved, \"u16\"),\n    u64: new TokenType(\"u64\", TokenClass.reserved, \"u64\"),\n    unless: new TokenType(\"unless\", TokenClass.reserved, \"unless\"),\n    using: new TokenType(\"using\", TokenClass.reserved, \"using\"),\n    vec: new TokenType(\"vec\", TokenClass.reserved, \"vec\"),\n    void: new TokenType(\"void\", TokenClass.reserved, \"void\"),\n};\nTokenTypes.keywords = {\n    array: new TokenType(\"array\", TokenClass.keyword, \"array\"),\n    atomic: new TokenType(\"atomic\", TokenClass.keyword, \"atomic\"),\n    bool: new TokenType(\"bool\", TokenClass.keyword, \"bool\"),\n    f32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\n    i32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\n    mat2x2: new TokenType(\"mat2x2\", TokenClass.keyword, \"mat2x2\"),\n    mat2x3: new TokenType(\"mat2x3\", TokenClass.keyword, \"mat2x3\"),\n    mat2x4: new TokenType(\"mat2x4\", TokenClass.keyword, \"mat2x4\"),\n    mat3x2: new TokenType(\"mat3x2\", TokenClass.keyword, \"mat3x2\"),\n    mat3x3: new TokenType(\"mat3x3\", TokenClass.keyword, \"mat3x3\"),\n    mat3x4: new TokenType(\"mat3x4\", TokenClass.keyword, \"mat3x4\"),\n    mat4x2: new TokenType(\"mat4x2\", TokenClass.keyword, \"mat4x2\"),\n    mat4x3: new TokenType(\"mat4x3\", TokenClass.keyword, \"mat4x3\"),\n    mat4x4: new TokenType(\"mat4x4\", TokenClass.keyword, \"mat4x4\"),\n    ptr: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),\n    sampler: new TokenType(\"sampler\", TokenClass.keyword, \"sampler\"),\n    sampler_comparison: new TokenType(\"sampler_comparison\", TokenClass.keyword, \"sampler_comparison\"),\n    struct: new TokenType(\"struct\", TokenClass.keyword, \"struct\"),\n    texture_1d: new TokenType(\"texture_1d\", TokenClass.keyword, \"texture_1d\"),\n    texture_2d: new TokenType(\"texture_2d\", TokenClass.keyword, \"texture_2d\"),\n    texture_2d_array: new TokenType(\"texture_2d_array\", TokenClass.keyword, \"texture_2d_array\"),\n    texture_3d: new TokenType(\"texture_3d\", TokenClass.keyword, \"texture_3d\"),\n    texture_cube: new TokenType(\"texture_cube\", TokenClass.keyword, \"texture_cube\"),\n    texture_cube_array: new TokenType(\"texture_cube_array\", TokenClass.keyword, \"texture_cube_array\"),\n    texture_multisampled_2d: new TokenType(\"texture_multisampled_2d\", TokenClass.keyword, \"texture_multisampled_2d\"),\n    texture_storage_1d: new TokenType(\"texture_storage_1d\", TokenClass.keyword, \"texture_storage_1d\"),\n    texture_storage_2d: new TokenType(\"texture_storage_2d\", TokenClass.keyword, \"texture_storage_2d\"),\n    texture_storage_2d_array: new TokenType(\"texture_storage_2d_array\", TokenClass.keyword, \"texture_storage_2d_array\"),\n    texture_storage_3d: new TokenType(\"texture_storage_3d\", TokenClass.keyword, \"texture_storage_3d\"),\n    texture_depth_2d: new TokenType(\"texture_depth_2d\", TokenClass.keyword, \"texture_depth_2d\"),\n    texture_depth_2d_array: new TokenType(\"texture_depth_2d_array\", TokenClass.keyword, \"texture_depth_2d_array\"),\n    texture_depth_cube: new TokenType(\"texture_depth_cube\", TokenClass.keyword, \"texture_depth_cube\"),\n    texture_depth_cube_array: new TokenType(\"texture_depth_cube_array\", TokenClass.keyword, \"texture_depth_cube_array\"),\n    texture_depth_multisampled_2d: new TokenType(\"texture_depth_multisampled_2d\", TokenClass.keyword, \"texture_depth_multisampled_2d\"),\n    texture_external: new TokenType(\"texture_external\", TokenClass.keyword, \"texture_external\"),\n    u32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\n    vec2: new TokenType(\"vec2\", TokenClass.keyword, \"vec2\"),\n    vec3: new TokenType(\"vec3\", TokenClass.keyword, \"vec3\"),\n    vec4: new TokenType(\"vec4\", TokenClass.keyword, \"vec4\"),\n    bitcast: new TokenType(\"bitcast\", TokenClass.keyword, \"bitcast\"),\n    block: new TokenType(\"block\", TokenClass.keyword, \"block\"),\n    break: new TokenType(\"break\", TokenClass.keyword, \"break\"),\n    case: new TokenType(\"case\", TokenClass.keyword, \"case\"),\n    continue: new TokenType(\"continue\", TokenClass.keyword, \"continue\"),\n    continuing: new TokenType(\"continuing\", TokenClass.keyword, \"continuing\"),\n    default: new TokenType(\"default\", TokenClass.keyword, \"default\"),\n    discard: new TokenType(\"discard\", TokenClass.keyword, \"discard\"),\n    else: new TokenType(\"else\", TokenClass.keyword, \"else\"),\n    enable: new TokenType(\"enable\", TokenClass.keyword, \"enable\"),\n    fallthrough: new TokenType(\"fallthrough\", TokenClass.keyword, \"fallthrough\"),\n    false: new TokenType(\"false\", TokenClass.keyword, \"false\"),\n    fn: new TokenType(\"fn\", TokenClass.keyword, \"fn\"),\n    for: new TokenType(\"for\", TokenClass.keyword, \"for\"),\n    function: new TokenType(\"function\", TokenClass.keyword, \"function\"),\n    if: new TokenType(\"if\", TokenClass.keyword, \"if\"),\n    let: new TokenType(\"let\", TokenClass.keyword, \"let\"),\n    const: new TokenType(\"const\", TokenClass.keyword, \"const\"),\n    loop: new TokenType(\"loop\", TokenClass.keyword, \"loop\"),\n    while: new TokenType(\"while\", TokenClass.keyword, \"while\"),\n    private: new TokenType(\"private\", TokenClass.keyword, \"private\"),\n    read: new TokenType(\"read\", TokenClass.keyword, \"read\"),\n    read_write: new TokenType(\"read_write\", TokenClass.keyword, \"read_write\"),\n    return: new TokenType(\"return\", TokenClass.keyword, \"return\"),\n    storage: new TokenType(\"storage\", TokenClass.keyword, \"storage\"),\n    switch: new TokenType(\"switch\", TokenClass.keyword, \"switch\"),\n    true: new TokenType(\"true\", TokenClass.keyword, \"true\"),\n    alias: new TokenType(\"alias\", TokenClass.keyword, \"alias\"),\n    type: new TokenType(\"type\", TokenClass.keyword, \"type\"),\n    uniform: new TokenType(\"uniform\", TokenClass.keyword, \"uniform\"),\n    var: new TokenType(\"var\", TokenClass.keyword, \"var\"),\n    override: new TokenType(\"override\", TokenClass.keyword, \"override\"),\n    workgroup: new TokenType(\"workgroup\", TokenClass.keyword, \"workgroup\"),\n    write: new TokenType(\"write\", TokenClass.keyword, \"write\"),\n    r8unorm: new TokenType(\"r8unorm\", TokenClass.keyword, \"r8unorm\"),\n    r8snorm: new TokenType(\"r8snorm\", TokenClass.keyword, \"r8snorm\"),\n    r8uint: new TokenType(\"r8uint\", TokenClass.keyword, \"r8uint\"),\n    r8sint: new TokenType(\"r8sint\", TokenClass.keyword, \"r8sint\"),\n    r16uint: new TokenType(\"r16uint\", TokenClass.keyword, \"r16uint\"),\n    r16sint: new TokenType(\"r16sint\", TokenClass.keyword, \"r16sint\"),\n    r16float: new TokenType(\"r16float\", TokenClass.keyword, \"r16float\"),\n    rg8unorm: new TokenType(\"rg8unorm\", TokenClass.keyword, \"rg8unorm\"),\n    rg8snorm: new TokenType(\"rg8snorm\", TokenClass.keyword, \"rg8snorm\"),\n    rg8uint: new TokenType(\"rg8uint\", TokenClass.keyword, \"rg8uint\"),\n    rg8sint: new TokenType(\"rg8sint\", TokenClass.keyword, \"rg8sint\"),\n    r32uint: new TokenType(\"r32uint\", TokenClass.keyword, \"r32uint\"),\n    r32sint: new TokenType(\"r32sint\", TokenClass.keyword, \"r32sint\"),\n    r32float: new TokenType(\"r32float\", TokenClass.keyword, \"r32float\"),\n    rg16uint: new TokenType(\"rg16uint\", TokenClass.keyword, \"rg16uint\"),\n    rg16sint: new TokenType(\"rg16sint\", TokenClass.keyword, \"rg16sint\"),\n    rg16float: new TokenType(\"rg16float\", TokenClass.keyword, \"rg16float\"),\n    rgba8unorm: new TokenType(\"rgba8unorm\", TokenClass.keyword, \"rgba8unorm\"),\n    rgba8unorm_srgb: new TokenType(\"rgba8unorm_srgb\", TokenClass.keyword, \"rgba8unorm_srgb\"),\n    rgba8snorm: new TokenType(\"rgba8snorm\", TokenClass.keyword, \"rgba8snorm\"),\n    rgba8uint: new TokenType(\"rgba8uint\", TokenClass.keyword, \"rgba8uint\"),\n    rgba8sint: new TokenType(\"rgba8sint\", TokenClass.keyword, \"rgba8sint\"),\n    bgra8unorm: new TokenType(\"bgra8unorm\", TokenClass.keyword, \"bgra8unorm\"),\n    bgra8unorm_srgb: new TokenType(\"bgra8unorm_srgb\", TokenClass.keyword, \"bgra8unorm_srgb\"),\n    rgb10a2unorm: new TokenType(\"rgb10a2unorm\", TokenClass.keyword, \"rgb10a2unorm\"),\n    rg11b10float: new TokenType(\"rg11b10float\", TokenClass.keyword, \"rg11b10float\"),\n    rg32uint: new TokenType(\"rg32uint\", TokenClass.keyword, \"rg32uint\"),\n    rg32sint: new TokenType(\"rg32sint\", TokenClass.keyword, \"rg32sint\"),\n    rg32float: new TokenType(\"rg32float\", TokenClass.keyword, \"rg32float\"),\n    rgba16uint: new TokenType(\"rgba16uint\", TokenClass.keyword, \"rgba16uint\"),\n    rgba16sint: new TokenType(\"rgba16sint\", TokenClass.keyword, \"rgba16sint\"),\n    rgba16float: new TokenType(\"rgba16float\", TokenClass.keyword, \"rgba16float\"),\n    rgba32uint: new TokenType(\"rgba32uint\", TokenClass.keyword, \"rgba32uint\"),\n    rgba32sint: new TokenType(\"rgba32sint\", TokenClass.keyword, \"rgba32sint\"),\n    rgba32float: new TokenType(\"rgba32float\", TokenClass.keyword, \"rgba32float\"),\n    static_assert: new TokenType(\"static_assert\", TokenClass.keyword, \"static_assert\"),\n    // WGSL grammar has a few keywords that have different token names than the strings they\n    // represent. Aliasing them here.\n    /*int32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\n        uint32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\n        float32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\n        pointer: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),*/\n};\nTokenTypes.tokens = {\n    decimal_float_literal: new TokenType(\"decimal_float_literal\", TokenClass.token, /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+f?)|([0-9]+f)/),\n    hex_float_literal: new TokenType(\"hex_float_literal\", TokenClass.token, /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+f?))/),\n    int_literal: new TokenType(\"int_literal\", TokenClass.token, /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),\n    uint_literal: new TokenType(\"uint_literal\", TokenClass.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),\n    ident: new TokenType(\"ident\", TokenClass.token, /[a-zA-Z][0-9a-zA-Z_]*/),\n    and: new TokenType(\"and\", TokenClass.token, \"&\"),\n    and_and: new TokenType(\"and_and\", TokenClass.token, \"&&\"),\n    arrow: new TokenType(\"arrow \", TokenClass.token, \"->\"),\n    attr: new TokenType(\"attr\", TokenClass.token, \"@\"),\n    attr_left: new TokenType(\"attr_left\", TokenClass.token, \"[[\"),\n    attr_right: new TokenType(\"attr_right\", TokenClass.token, \"]]\"),\n    forward_slash: new TokenType(\"forward_slash\", TokenClass.token, \"/\"),\n    bang: new TokenType(\"bang\", TokenClass.token, \"!\"),\n    bracket_left: new TokenType(\"bracket_left\", TokenClass.token, \"[\"),\n    bracket_right: new TokenType(\"bracket_right\", TokenClass.token, \"]\"),\n    brace_left: new TokenType(\"brace_left\", TokenClass.token, \"{\"),\n    brace_right: new TokenType(\"brace_right\", TokenClass.token, \"}\"),\n    colon: new TokenType(\"colon\", TokenClass.token, \":\"),\n    comma: new TokenType(\"comma\", TokenClass.token, \",\"),\n    equal: new TokenType(\"equal\", TokenClass.token, \"=\"),\n    equal_equal: new TokenType(\"equal_equal\", TokenClass.token, \"==\"),\n    not_equal: new TokenType(\"not_equal\", TokenClass.token, \"!=\"),\n    greater_than: new TokenType(\"greater_than\", TokenClass.token, \">\"),\n    greater_than_equal: new TokenType(\"greater_than_equal\", TokenClass.token, \">=\"),\n    shift_right: new TokenType(\"shift_right\", TokenClass.token, \">>\"),\n    less_than: new TokenType(\"less_than\", TokenClass.token, \"<\"),\n    less_than_equal: new TokenType(\"less_than_equal\", TokenClass.token, \"<=\"),\n    shift_left: new TokenType(\"shift_left\", TokenClass.token, \"<<\"),\n    modulo: new TokenType(\"modulo\", TokenClass.token, \"%\"),\n    minus: new TokenType(\"minus\", TokenClass.token, \"-\"),\n    minus_minus: new TokenType(\"minus_minus\", TokenClass.token, \"--\"),\n    period: new TokenType(\"period\", TokenClass.token, \".\"),\n    plus: new TokenType(\"plus\", TokenClass.token, \"+\"),\n    plus_plus: new TokenType(\"plus_plus\", TokenClass.token, \"++\"),\n    or: new TokenType(\"or\", TokenClass.token, \"|\"),\n    or_or: new TokenType(\"or_or\", TokenClass.token, \"||\"),\n    paren_left: new TokenType(\"paren_left\", TokenClass.token, \"(\"),\n    paren_right: new TokenType(\"paren_right\", TokenClass.token, \")\"),\n    semicolon: new TokenType(\"semicolon\", TokenClass.token, \";\"),\n    star: new TokenType(\"star\", TokenClass.token, \"*\"),\n    tilde: new TokenType(\"tilde\", TokenClass.token, \"~\"),\n    underscore: new TokenType(\"underscore\", TokenClass.token, \"_\"),\n    xor: new TokenType(\"xor\", TokenClass.token, \"^\"),\n    plus_equal: new TokenType(\"plus_equal\", TokenClass.token, \"+=\"),\n    minus_equal: new TokenType(\"minus_equal\", TokenClass.token, \"-=\"),\n    times_equal: new TokenType(\"times_equal\", TokenClass.token, \"*=\"),\n    division_equal: new TokenType(\"division_equal\", TokenClass.token, \"/=\"),\n    modulo_equal: new TokenType(\"modulo_equal\", TokenClass.token, \"%=\"),\n    and_equal: new TokenType(\"and_equal\", TokenClass.token, \"&=\"),\n    or_equal: new TokenType(\"or_equal\", TokenClass.token, \"|=\"),\n    xor_equal: new TokenType(\"xor_equal\", TokenClass.token, \"^=\"),\n    shift_right_equal: new TokenType(\"shift_right_equal\", TokenClass.token, \">>=\"),\n    shift_left_equal: new TokenType(\"shift_left_equal\", TokenClass.token, \"<<=\"),\n};\nTokenTypes.storage_class = [\n    _a.keywords.function,\n    _a.keywords.private,\n    _a.keywords.workgroup,\n    _a.keywords.uniform,\n    _a.keywords.storage,\n];\nTokenTypes.access_mode = [\n    _a.keywords.read,\n    _a.keywords.write,\n    _a.keywords.read_write,\n];\nTokenTypes.sampler_type = [\n    _a.keywords.sampler,\n    _a.keywords.sampler_comparison,\n];\nTokenTypes.sampled_texture_type = [\n    _a.keywords.texture_1d,\n    _a.keywords.texture_2d,\n    _a.keywords.texture_2d_array,\n    _a.keywords.texture_3d,\n    _a.keywords.texture_cube,\n    _a.keywords.texture_cube_array,\n];\nTokenTypes.multisampled_texture_type = [\n    _a.keywords.texture_multisampled_2d,\n];\nTokenTypes.storage_texture_type = [\n    _a.keywords.texture_storage_1d,\n    _a.keywords.texture_storage_2d,\n    _a.keywords.texture_storage_2d_array,\n    _a.keywords.texture_storage_3d,\n];\nTokenTypes.depth_texture_type = [\n    _a.keywords.texture_depth_2d,\n    _a.keywords.texture_depth_2d_array,\n    _a.keywords.texture_depth_cube,\n    _a.keywords.texture_depth_cube_array,\n    _a.keywords.texture_depth_multisampled_2d,\n];\nTokenTypes.texture_external_type = [_a.keywords.texture_external];\nTokenTypes.any_texture_type = [\n    ..._a.sampled_texture_type,\n    ..._a.multisampled_texture_type,\n    ..._a.storage_texture_type,\n    ..._a.depth_texture_type,\n    ..._a.texture_external_type,\n];\nTokenTypes.texel_format = [\n    _a.keywords.r8unorm,\n    _a.keywords.r8snorm,\n    _a.keywords.r8uint,\n    _a.keywords.r8sint,\n    _a.keywords.r16uint,\n    _a.keywords.r16sint,\n    _a.keywords.r16float,\n    _a.keywords.rg8unorm,\n    _a.keywords.rg8snorm,\n    _a.keywords.rg8uint,\n    _a.keywords.rg8sint,\n    _a.keywords.r32uint,\n    _a.keywords.r32sint,\n    _a.keywords.r32float,\n    _a.keywords.rg16uint,\n    _a.keywords.rg16sint,\n    _a.keywords.rg16float,\n    _a.keywords.rgba8unorm,\n    _a.keywords.rgba8unorm_srgb,\n    _a.keywords.rgba8snorm,\n    _a.keywords.rgba8uint,\n    _a.keywords.rgba8sint,\n    _a.keywords.bgra8unorm,\n    _a.keywords.bgra8unorm_srgb,\n    _a.keywords.rgb10a2unorm,\n    _a.keywords.rg11b10float,\n    _a.keywords.rg32uint,\n    _a.keywords.rg32sint,\n    _a.keywords.rg32float,\n    _a.keywords.rgba16uint,\n    _a.keywords.rgba16sint,\n    _a.keywords.rgba16float,\n    _a.keywords.rgba32uint,\n    _a.keywords.rgba32sint,\n    _a.keywords.rgba32float,\n];\nTokenTypes.const_literal = [\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.decimal_float_literal,\n    _a.tokens.hex_float_literal,\n    _a.keywords.true,\n    _a.keywords.false,\n];\nTokenTypes.literal_or_ident = [\n    _a.tokens.ident,\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.decimal_float_literal,\n    _a.tokens.hex_float_literal,\n];\nTokenTypes.element_count_expression = [\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.ident,\n];\nTokenTypes.template_types = [\n    _a.keywords.vec2,\n    _a.keywords.vec3,\n    _a.keywords.vec4,\n    _a.keywords.mat2x2,\n    _a.keywords.mat2x3,\n    _a.keywords.mat2x4,\n    _a.keywords.mat3x2,\n    _a.keywords.mat3x3,\n    _a.keywords.mat3x4,\n    _a.keywords.mat4x2,\n    _a.keywords.mat4x3,\n    _a.keywords.mat4x4,\n    _a.keywords.atomic,\n    _a.keywords.bitcast,\n    ..._a.any_texture_type,\n];\n// The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\n// The attribute grammar should be ident | block.\nTokenTypes.attribute_name = [_a.tokens.ident, _a.keywords.block];\nTokenTypes.assignment_operators = [\n    _a.tokens.equal,\n    _a.tokens.plus_equal,\n    _a.tokens.minus_equal,\n    _a.tokens.times_equal,\n    _a.tokens.division_equal,\n    _a.tokens.modulo_equal,\n    _a.tokens.and_equal,\n    _a.tokens.or_equal,\n    _a.tokens.xor_equal,\n    _a.tokens.shift_right_equal,\n    _a.tokens.shift_left_equal,\n];\nTokenTypes.increment_operators = [\n    _a.tokens.plus_plus,\n    _a.tokens.minus_minus,\n];\n/// A token parsed by the WgslScanner.\nclass Token {\n    constructor(type, lexeme, line) {\n        this.type = type;\n        this.lexeme = lexeme;\n        this.line = line;\n    }\n    toString() {\n        return this.lexeme;\n    }\n    isTemplateType() {\n        return TokenTypes.template_types.indexOf(this.type) != -1;\n    }\n    isArrayType() {\n        return this.type == TokenTypes.keywords.array;\n    }\n    isArrayOrTemplateType() {\n        return this.isArrayType() || this.isTemplateType();\n    }\n}\n/// Lexical scanner for the WGSL language. This takes an input source text and generates a list\n/// of Token objects, which can then be fed into the WgslParser to generate an AST.\nclass WgslScanner {\n    constructor(source) {\n        this._tokens = [];\n        this._start = 0;\n        this._current = 0;\n        this._line = 1;\n        this._source = source !== null && source !== void 0 ? source : \"\";\n    }\n    /// Scan all tokens from the source.\n    scanTokens() {\n        while (!this._isAtEnd()) {\n            this._start = this._current;\n            if (!this.scanToken())\n                throw `Invalid syntax at line ${this._line}`;\n        }\n        this._tokens.push(new Token(TokenTypes.eof, \"\", this._line));\n        return this._tokens;\n    }\n    /// Scan a single token from the source.\n    scanToken() {\n        // Find the longest consecutive set of characters that match a rule.\n        let lexeme = this._advance();\n        // Skip line-feed, adding to the line counter.\n        if (lexeme == \"\\n\") {\n            this._line++;\n            return true;\n        }\n        // Skip whitespace\n        if (this._isWhitespace(lexeme)) {\n            return true;\n        }\n        if (lexeme == \"/\") {\n            // If it's a // comment, skip everything until the next line-feed.\n            if (this._peekAhead() == \"/\") {\n                while (lexeme != \"\\n\") {\n                    if (this._isAtEnd())\n                        return true;\n                    lexeme = this._advance();\n                }\n                // skip the linefeed\n                this._line++;\n                return true;\n            }\n            else if (this._peekAhead() == \"*\") {\n                // If it's a / * block comment, skip everything until the matching * /,\n                // allowing for nested block comments.\n                this._advance();\n                let commentLevel = 1;\n                while (commentLevel > 0) {\n                    if (this._isAtEnd())\n                        return true;\n                    lexeme = this._advance();\n                    if (lexeme == \"\\n\") {\n                        this._line++;\n                    }\n                    else if (lexeme == \"*\") {\n                        if (this._peekAhead() == \"/\") {\n                            this._advance();\n                            commentLevel--;\n                            if (commentLevel == 0) {\n                                return true;\n                            }\n                        }\n                    }\n                    else if (lexeme == \"/\") {\n                        if (this._peekAhead() == \"*\") {\n                            this._advance();\n                            commentLevel++;\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n        let matchType = TokenTypes.none;\n        for (;;) {\n            let matchedType = this._findType(lexeme);\n            // An exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a\n            // shift_right.\n            // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\n            // and one to close the array).\n            // Another ambiguity is '>='. In the case of vec2<i32>=vec2(1,2),\n            // it's a greather_than and an equal, not a greater_than_equal.\n            // WGSL requires context sensitive parsing to resolve these ambiguities. Both of these cases\n            // are predicated on it the > either closing a template, or being part of an operator.\n            // The solution here is to check if there was a less_than up to some number of tokens\n            // previously, and the token prior to that is a keyword that requires a '<', then it will be\n            // split into two operators; otherwise it's a single operator.\n            const nextLexeme = this._peekAhead();\n            if (lexeme == \">\" && (nextLexeme == \">\" || nextLexeme == \"=\")) {\n                let foundLessThan = false;\n                let ti = this._tokens.length - 1;\n                for (let count = 0; count < 5 && ti >= 0; ++count, --ti) {\n                    if (this._tokens[ti].type === TokenTypes.tokens.less_than) {\n                        if (ti > 0 && this._tokens[ti - 1].isArrayOrTemplateType()) {\n                            foundLessThan = true;\n                        }\n                        break;\n                    }\n                }\n                // If there was a less_than in the recent token history, then this is probably a\n                // greater_than.\n                if (foundLessThan) {\n                    this._addToken(matchedType);\n                    return true;\n                }\n            }\n            // The current lexeme may not match any rule, but some token types may be invalid for\n            // part of the string but valid after a few more characters.\n            // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\n            // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\n            // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\n            // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\n            // hex_float_literal. So that means if we hit an non-matching string, we should look\n            // ahead up to two characters to see if the string starts matching a valid rule again.\n            if (matchedType === TokenTypes.none) {\n                let lookAheadLexeme = lexeme;\n                let lookAhead = 0;\n                const maxLookAhead = 2;\n                for (let li = 0; li < maxLookAhead; ++li) {\n                    lookAheadLexeme += this._peekAhead(li);\n                    matchedType = this._findType(lookAheadLexeme);\n                    if (matchedType !== TokenTypes.none) {\n                        lookAhead = li;\n                        break;\n                    }\n                }\n                if (matchedType === TokenTypes.none) {\n                    if (matchType === TokenTypes.none)\n                        return false;\n                    this._current--;\n                    this._addToken(matchType);\n                    return true;\n                }\n                lexeme = lookAheadLexeme;\n                this._current += lookAhead + 1;\n            }\n            matchType = matchedType;\n            if (this._isAtEnd())\n                break;\n            lexeme += this._advance();\n        }\n        // We got to the end of the input stream. Then the token we've ready so far is it.\n        if (matchType === TokenTypes.none)\n            return false;\n        this._addToken(matchType);\n        return true;\n    }\n    _findType(lexeme) {\n        for (const name in TokenTypes.keywords) {\n            const type = TokenTypes.keywords[name];\n            if (this._match(lexeme, type.rule)) {\n                return type;\n            }\n        }\n        for (const name in TokenTypes.tokens) {\n            const type = TokenTypes.tokens[name];\n            if (this._match(lexeme, type.rule)) {\n                return type;\n            }\n        }\n        return TokenTypes.none;\n    }\n    _match(lexeme, rule) {\n        if (typeof rule === \"string\") {\n            if (rule == lexeme) {\n                return true;\n            }\n        }\n        else {\n            // regex\n            const match = rule.exec(lexeme);\n            if (match && match.index == 0 && match[0] == lexeme)\n                return true;\n        }\n        return false;\n    }\n    _isAtEnd() {\n        return this._current >= this._source.length;\n    }\n    _isWhitespace(c) {\n        return c == \" \" || c == \"\\t\" || c == \"\\r\";\n    }\n    _advance(amount = 0) {\n        let c = this._source[this._current];\n        amount = amount || 0;\n        amount++;\n        this._current += amount;\n        return c;\n    }\n    _peekAhead(offset = 0) {\n        offset = offset || 0;\n        if (this._current + offset >= this._source.length)\n            return \"\\0\";\n        return this._source[this._current + offset];\n    }\n    _addToken(type) {\n        const text = this._source.substring(this._start, this._current);\n        this._tokens.push(new Token(type, text, this._line));\n    }\n}\n\n/**\n * @author Brendan Duncan / https://github.com/brendan-duncan\n */\n/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).\nclass WgslParser {\n    constructor() {\n        this._tokens = [];\n        this._current = 0;\n        this._context = new ParseContext();\n    }\n    parse(tokensOrCode) {\n        this._initialize(tokensOrCode);\n        let statements = [];\n        while (!this._isAtEnd()) {\n            const statement = this._global_decl_or_directive();\n            if (!statement)\n                break;\n            statements.push(statement);\n        }\n        return statements;\n    }\n    _initialize(tokensOrCode) {\n        if (tokensOrCode) {\n            if (typeof tokensOrCode == \"string\") {\n                const scanner = new WgslScanner(tokensOrCode);\n                this._tokens = scanner.scanTokens();\n            }\n            else {\n                this._tokens = tokensOrCode;\n            }\n        }\n        else {\n            this._tokens = [];\n        }\n        this._current = 0;\n    }\n    _error(token, message) {\n        console.error(token, message);\n        return {\n            token,\n            message,\n            toString: function () {\n                return `${message}`;\n            },\n        };\n    }\n    _isAtEnd() {\n        return (this._current >= this._tokens.length ||\n            this._peek().type == TokenTypes.eof);\n    }\n    _match(types) {\n        if (types instanceof TokenType) {\n            if (this._check(types)) {\n                this._advance();\n                return true;\n            }\n            return false;\n        }\n        for (let i = 0, l = types.length; i < l; ++i) {\n            const type = types[i];\n            if (this._check(type)) {\n                this._advance();\n                return true;\n            }\n        }\n        return false;\n    }\n    _consume(types, message) {\n        if (this._check(types))\n            return this._advance();\n        throw this._error(this._peek(), message);\n    }\n    _check(types) {\n        if (this._isAtEnd())\n            return false;\n        const tk = this._peek();\n        if (types instanceof Array) {\n            let t = tk.type;\n            let index = types.indexOf(t);\n            return index != -1;\n        }\n        return tk.type == types;\n    }\n    _advance() {\n        if (!this._isAtEnd())\n            this._current++;\n        return this._previous();\n    }\n    _peek() {\n        return this._tokens[this._current];\n    }\n    _previous() {\n        return this._tokens[this._current - 1];\n    }\n    _global_decl_or_directive() {\n        // semicolon\n        // global_variable_decl semicolon\n        // global_constant_decl semicolon\n        // type_alias semicolon\n        // struct_decl\n        // function_decl\n        // enable_directive\n        // Ignore any stand-alone semicolons\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\n            ;\n        if (this._match(TokenTypes.keywords.alias)) {\n            const type = this._type_alias();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return type;\n        }\n        if (this._match(TokenTypes.keywords.enable)) {\n            const enable = this._enable_directive();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return enable;\n        }\n        // The following statements have an optional attribute*\n        const attrs = this._attribute();\n        if (this._check(TokenTypes.keywords.var)) {\n            const _var = this._global_variable_decl();\n            if (_var != null)\n                _var.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _var;\n        }\n        if (this._check(TokenTypes.keywords.override)) {\n            const _override = this._override_variable_decl();\n            if (_override != null)\n                _override.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _override;\n        }\n        if (this._check(TokenTypes.keywords.let)) {\n            const _let = this._global_let_decl();\n            if (_let != null)\n                _let.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _let;\n        }\n        if (this._check(TokenTypes.keywords.const)) {\n            const _const = this._global_const_decl();\n            if (_const != null)\n                _const.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _const;\n        }\n        if (this._check(TokenTypes.keywords.struct)) {\n            const _struct = this._struct_decl();\n            if (_struct != null)\n                _struct.attributes = attrs;\n            return _struct;\n        }\n        if (this._check(TokenTypes.keywords.fn)) {\n            const _fn = this._function_decl();\n            if (_fn != null)\n                _fn.attributes = attrs;\n            return _fn;\n        }\n        return null;\n    }\n    _function_decl() {\n        // attribute* function_header compound_statement\n        // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\n        if (!this._match(TokenTypes.keywords.fn))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\").toString();\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '(' for function arguments.\");\n        const args = [];\n        if (!this._check(TokenTypes.tokens.paren_right)) {\n            do {\n                if (this._check(TokenTypes.tokens.paren_right))\n                    break;\n                const argAttrs = this._attribute();\n                const name = this._consume(TokenTypes.tokens.ident, \"Expected argument name.\").toString();\n                this._consume(TokenTypes.tokens.colon, \"Expected ':' for argument type.\");\n                const typeAttrs = this._attribute();\n                const type = this._type_decl();\n                if (type != null) {\n                    type.attributes = typeAttrs;\n                    args.push(new Argument(name, type, argAttrs));\n                }\n            } while (this._match(TokenTypes.tokens.comma));\n        }\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' after function arguments.\");\n        let _return = null;\n        if (this._match(TokenTypes.tokens.arrow)) {\n            const attrs = this._attribute();\n            _return = this._type_decl();\n            if (_return != null)\n                _return.attributes = attrs;\n        }\n        const body = this._compound_statement();\n        return new Function(name, args, _return, body);\n    }\n    _compound_statement() {\n        // brace_left statement* brace_right\n        const statements = [];\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for block.\");\n        while (!this._check(TokenTypes.tokens.brace_right)) {\n            const statement = this._statement();\n            if (statement !== null)\n                statements.push(statement);\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for block.\");\n        return statements;\n    }\n    _statement() {\n        // semicolon\n        // return_statement semicolon\n        // if_statement\n        // switch_statement\n        // loop_statement\n        // for_statement\n        // func_call_statement semicolon\n        // variable_statement semicolon\n        // break_statement semicolon\n        // continue_statement semicolon\n        // continuing_statement compound_statement\n        // discard semicolon\n        // assignment_statement semicolon\n        // compound_statement\n        // increment_statement semicolon\n        // decrement_statement semicolon\n        // static_assert_statement semicolon\n        // Ignore any stand-alone semicolons\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\n            ;\n        if (this._check(TokenTypes.keywords.if))\n            return this._if_statement();\n        if (this._check(TokenTypes.keywords.switch))\n            return this._switch_statement();\n        if (this._check(TokenTypes.keywords.loop))\n            return this._loop_statement();\n        if (this._check(TokenTypes.keywords.for))\n            return this._for_statement();\n        if (this._check(TokenTypes.keywords.while))\n            return this._while_statement();\n        if (this._check(TokenTypes.keywords.continuing))\n            return this._continuing_statement();\n        if (this._check(TokenTypes.keywords.static_assert))\n            return this._static_assert_statement();\n        if (this._check(TokenTypes.tokens.brace_left))\n            return this._compound_statement();\n        let result = null;\n        if (this._check(TokenTypes.keywords.return))\n            result = this._return_statement();\n        else if (this._check([\n            TokenTypes.keywords.var,\n            TokenTypes.keywords.let,\n            TokenTypes.keywords.const,\n        ]))\n            result = this._variable_statement();\n        else if (this._match(TokenTypes.keywords.discard))\n            result = new Discard();\n        else if (this._match(TokenTypes.keywords.break))\n            result = new Break();\n        else if (this._match(TokenTypes.keywords.continue))\n            result = new Continue();\n        else\n            result =\n                this._increment_decrement_statement() ||\n                    this._func_call_statement() ||\n                    this._assignment_statement();\n        if (result != null)\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';' after statement.\");\n        return result;\n    }\n    _static_assert_statement() {\n        if (!this._match(TokenTypes.keywords.static_assert))\n            return null;\n        let expression = this._optional_paren_expression();\n        return new StaticAssert(expression);\n    }\n    _while_statement() {\n        if (!this._match(TokenTypes.keywords.while))\n            return null;\n        let condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        return new While(condition, block);\n    }\n    _continuing_statement() {\n        if (!this._match(TokenTypes.keywords.continuing))\n            return null;\n        const block = this._compound_statement();\n        return new Continuing(block);\n    }\n    _for_statement() {\n        // for paren_left for_header paren_right compound_statement\n        if (!this._match(TokenTypes.keywords.for))\n            return null;\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\n        const init = !this._check(TokenTypes.tokens.semicolon)\n            ? this._for_init()\n            : null;\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n        const condition = !this._check(TokenTypes.tokens.semicolon)\n            ? this._short_circuit_or_expression()\n            : null;\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n        const increment = !this._check(TokenTypes.tokens.paren_right)\n            ? this._for_increment()\n            : null;\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        const body = this._compound_statement();\n        return new For(init, condition, increment, body);\n    }\n    _for_init() {\n        // (variable_statement assignment_statement func_call_statement)?\n        return (this._variable_statement() ||\n            this._func_call_statement() ||\n            this._assignment_statement());\n    }\n    _for_increment() {\n        // (assignment_statement func_call_statement increment_statement)?\n        return (this._func_call_statement() ||\n            this._increment_decrement_statement() ||\n            this._assignment_statement());\n    }\n    _variable_statement() {\n        // variable_decl\n        // variable_decl equal short_circuit_or_expression\n        // let (ident variable_ident_decl) equal short_circuit_or_expression\n        // const (ident variable_ident_decl) equal short_circuit_or_expression\n        if (this._check(TokenTypes.keywords.var)) {\n            const _var = this._variable_decl();\n            if (_var === null)\n                throw this._error(this._peek(), \"Variable declaration expected.\");\n            let value = null;\n            if (this._match(TokenTypes.tokens.equal))\n                value = this._short_circuit_or_expression();\n            return new Var(_var.name, _var.type, _var.storage, _var.access, value);\n        }\n        if (this._match(TokenTypes.keywords.let)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for let.\").toString();\n            let type = null;\n            if (this._match(TokenTypes.tokens.colon)) {\n                const typeAttrs = this._attribute();\n                type = this._type_decl();\n                if (type != null)\n                    type.attributes = typeAttrs;\n            }\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for let.\");\n            const value = this._short_circuit_or_expression();\n            return new Let(name, type, null, null, value);\n        }\n        if (this._match(TokenTypes.keywords.const)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for const.\").toString();\n            let type = null;\n            if (this._match(TokenTypes.tokens.colon)) {\n                const typeAttrs = this._attribute();\n                type = this._type_decl();\n                if (type != null)\n                    type.attributes = typeAttrs;\n            }\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for const.\");\n            const value = this._short_circuit_or_expression();\n            return new Const(name, type, null, null, value);\n        }\n        return null;\n    }\n    _increment_decrement_statement() {\n        const savedPos = this._current;\n        const _var = this._unary_expression();\n        if (_var == null)\n            return null;\n        if (!this._check(TokenTypes.increment_operators)) {\n            this._current = savedPos;\n            return null;\n        }\n        const token = this._consume(TokenTypes.increment_operators, \"Expected increment operator\");\n        return new Increment(token.type === TokenTypes.tokens.plus_plus\n            ? IncrementOperator.increment\n            : IncrementOperator.decrement, _var);\n    }\n    _assignment_statement() {\n        // (unary_expression underscore) equal short_circuit_or_expression\n        let _var = null;\n        if (this._check(TokenTypes.tokens.brace_right))\n            return null;\n        let isUnderscore = this._match(TokenTypes.tokens.underscore);\n        if (!isUnderscore)\n            _var = this._unary_expression();\n        if (!isUnderscore && _var == null)\n            return null;\n        const type = this._consume(TokenTypes.assignment_operators, \"Expected assignment operator.\");\n        const value = this._short_circuit_or_expression();\n        return new Assign(AssignOperator.parse(type.lexeme), _var, value);\n    }\n    _func_call_statement() {\n        // ident argument_expression_list\n        if (!this._check(TokenTypes.tokens.ident))\n            return null;\n        const savedPos = this._current;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\");\n        const args = this._argument_expression_list();\n        if (args === null) {\n            this._current = savedPos;\n            return null;\n        }\n        return new Call(name.lexeme, args);\n    }\n    _loop_statement() {\n        // loop brace_left statement* continuing_statement? brace_right\n        if (!this._match(TokenTypes.keywords.loop))\n            return null;\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for loop.\");\n        // statement*\n        const statements = [];\n        let statement = this._statement();\n        while (statement !== null) {\n            if (Array.isArray(statement)) {\n                for (let s of statement) {\n                    statements.push(s);\n                }\n            }\n            else {\n                statements.push(statement);\n            }\n            statement = this._statement();\n        }\n        // continuing_statement: continuing compound_statement\n        let continuing = null;\n        if (this._match(TokenTypes.keywords.continuing))\n            continuing = this._compound_statement();\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for loop.\");\n        return new Loop(statements, continuing);\n    }\n    _switch_statement() {\n        // switch optional_paren_expression brace_left switch_body+ brace_right\n        if (!this._match(TokenTypes.keywords.switch))\n            return null;\n        const condition = this._optional_paren_expression();\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for switch.\");\n        const body = this._switch_body();\n        if (body == null || body.length == 0)\n            throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for switch.\");\n        return new Switch(condition, body);\n    }\n    _switch_body() {\n        // case case_selectors colon brace_left case_body? brace_right\n        // default colon brace_left case_body? brace_right\n        const cases = [];\n        if (this._match(TokenTypes.keywords.case)) {\n            const selector = this._case_selectors();\n            this._match(TokenTypes.tokens.colon); // colon is optional\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch case.\");\n            const body = this._case_body();\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch case.\");\n            cases.push(new Case(selector, body));\n        }\n        if (this._match(TokenTypes.keywords.default)) {\n            this._match(TokenTypes.tokens.colon); // colon is optional\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch default.\");\n            const body = this._case_body();\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch default.\");\n            cases.push(new Default(body));\n        }\n        if (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {\n            const _cases = this._switch_body();\n            cases.push(_cases[0]);\n        }\n        return cases;\n    }\n    _case_selectors() {\n        var _a, _b, _c, _d;\n        // const_literal (comma const_literal)* comma?\n        const selectors = [\n            (_b = (_a = this._shift_expression()) === null || _a === void 0 ? void 0 : _a.evaluate(this._context).toString()) !== null && _b !== void 0 ? _b : \"\",\n        ];\n        while (this._match(TokenTypes.tokens.comma)) {\n            selectors.push((_d = (_c = this._shift_expression()) === null || _c === void 0 ? void 0 : _c.evaluate(this._context).toString()) !== null && _d !== void 0 ? _d : \"\");\n        }\n        return selectors;\n    }\n    _case_body() {\n        // statement case_body?\n        // fallthrough semicolon\n        if (this._match(TokenTypes.keywords.fallthrough)) {\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return [];\n        }\n        let statement = this._statement();\n        if (statement == null)\n            return [];\n        if (!(statement instanceof Array)) {\n            statement = [statement];\n        }\n        const nextStatement = this._case_body();\n        if (nextStatement.length == 0)\n            return statement;\n        return [...statement, nextStatement[0]];\n    }\n    _if_statement() {\n        // if optional_paren_expression compound_statement elseif_statement? else_statement?\n        if (!this._match(TokenTypes.keywords.if))\n            return null;\n        const condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        let elseif = [];\n        if (this._match_elseif()) {\n            elseif = this._elseif_statement(elseif);\n        }\n        let _else = null;\n        if (this._match(TokenTypes.keywords.else))\n            _else = this._compound_statement();\n        return new If(condition, block, elseif, _else);\n    }\n    _match_elseif() {\n        if (this._tokens[this._current].type === TokenTypes.keywords.else &&\n            this._tokens[this._current + 1].type === TokenTypes.keywords.if) {\n            this._advance();\n            this._advance();\n            return true;\n        }\n        return false;\n    }\n    _elseif_statement(elseif = []) {\n        // else_if optional_paren_expression compound_statement elseif_statement?\n        const condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        elseif.push(new ElseIf(condition, block));\n        if (this._match_elseif()) {\n            this._elseif_statement(elseif);\n        }\n        return elseif;\n    }\n    _return_statement() {\n        // return short_circuit_or_expression?\n        if (!this._match(TokenTypes.keywords.return))\n            return null;\n        const value = this._short_circuit_or_expression();\n        return new Return(value);\n    }\n    _short_circuit_or_expression() {\n        // short_circuit_and_expression\n        // short_circuit_or_expression or_or short_circuit_and_expression\n        let expr = this._short_circuit_and_expr();\n        while (this._match(TokenTypes.tokens.or_or)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._short_circuit_and_expr());\n        }\n        return expr;\n    }\n    _short_circuit_and_expr() {\n        // inclusive_or_expression\n        // short_circuit_and_expression and_and inclusive_or_expression\n        let expr = this._inclusive_or_expression();\n        while (this._match(TokenTypes.tokens.and_and)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._inclusive_or_expression());\n        }\n        return expr;\n    }\n    _inclusive_or_expression() {\n        // exclusive_or_expression\n        // inclusive_or_expression or exclusive_or_expression\n        let expr = this._exclusive_or_expression();\n        while (this._match(TokenTypes.tokens.or)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._exclusive_or_expression());\n        }\n        return expr;\n    }\n    _exclusive_or_expression() {\n        // and_expression\n        // exclusive_or_expression xor and_expression\n        let expr = this._and_expression();\n        while (this._match(TokenTypes.tokens.xor)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._and_expression());\n        }\n        return expr;\n    }\n    _and_expression() {\n        // equality_expression\n        // and_expression and equality_expression\n        let expr = this._equality_expression();\n        while (this._match(TokenTypes.tokens.and)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._equality_expression());\n        }\n        return expr;\n    }\n    _equality_expression() {\n        // relational_expression\n        // relational_expression equal_equal relational_expression\n        // relational_expression not_equal relational_expression\n        const expr = this._relational_expression();\n        if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {\n            return new BinaryOperator(this._previous().toString(), expr, this._relational_expression());\n        }\n        return expr;\n    }\n    _relational_expression() {\n        // shift_expression\n        // relational_expression less_than shift_expression\n        // relational_expression greater_than shift_expression\n        // relational_expression less_than_equal shift_expression\n        // relational_expression greater_than_equal shift_expression\n        let expr = this._shift_expression();\n        while (this._match([\n            TokenTypes.tokens.less_than,\n            TokenTypes.tokens.greater_than,\n            TokenTypes.tokens.less_than_equal,\n            TokenTypes.tokens.greater_than_equal,\n        ])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._shift_expression());\n        }\n        return expr;\n    }\n    _shift_expression() {\n        // additive_expression\n        // shift_expression shift_left additive_expression\n        // shift_expression shift_right additive_expression\n        let expr = this._additive_expression();\n        while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._additive_expression());\n        }\n        return expr;\n    }\n    _additive_expression() {\n        // multiplicative_expression\n        // additive_expression plus multiplicative_expression\n        // additive_expression minus multiplicative_expression\n        let expr = this._multiplicative_expression();\n        while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._multiplicative_expression());\n        }\n        return expr;\n    }\n    _multiplicative_expression() {\n        // unary_expression\n        // multiplicative_expression star unary_expression\n        // multiplicative_expression forward_slash unary_expression\n        // multiplicative_expression modulo unary_expression\n        let expr = this._unary_expression();\n        while (this._match([\n            TokenTypes.tokens.star,\n            TokenTypes.tokens.forward_slash,\n            TokenTypes.tokens.modulo,\n        ])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._unary_expression());\n        }\n        return expr;\n    }\n    _unary_expression() {\n        // singular_expression\n        // minus unary_expression\n        // bang unary_expression\n        // tilde unary_expression\n        // star unary_expression\n        // and unary_expression\n        if (this._match([\n            TokenTypes.tokens.minus,\n            TokenTypes.tokens.bang,\n            TokenTypes.tokens.tilde,\n            TokenTypes.tokens.star,\n            TokenTypes.tokens.and,\n        ])) {\n            return new UnaryOperator(this._previous().toString(), this._unary_expression());\n        }\n        return this._singular_expression();\n    }\n    _singular_expression() {\n        // primary_expression postfix_expression ?\n        const expr = this._primary_expression();\n        const p = this._postfix_expression();\n        if (p)\n            expr.postfix = p;\n        return expr;\n    }\n    _postfix_expression() {\n        // bracket_left short_circuit_or_expression bracket_right postfix_expression?\n        if (this._match(TokenTypes.tokens.bracket_left)) {\n            const expr = this._short_circuit_or_expression();\n            this._consume(TokenTypes.tokens.bracket_right, \"Expected ']'.\");\n            const p = this._postfix_expression();\n            if (p)\n                expr.postfix = p;\n            return expr;\n        }\n        // period ident postfix_expression?\n        if (this._match(TokenTypes.tokens.period)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected member name.\");\n            const p = this._postfix_expression();\n            const expr = new StringExpr(name.lexeme);\n            if (p)\n                expr.postfix = p;\n            return expr;\n        }\n        return null;\n    }\n    _getStruct(name) {\n        if (this._context.aliases.has(name)) {\n            const alias = this._context.aliases.get(name).type;\n            return alias;\n        }\n        if (this._context.structs.has(name)) {\n            const struct = this._context.structs.get(name);\n            return struct;\n        }\n        return null;\n    }\n    _primary_expression() {\n        // ident argument_expression_list?\n        if (this._match(TokenTypes.tokens.ident)) {\n            const name = this._previous().toString();\n            if (this._check(TokenTypes.tokens.paren_left)) {\n                const args = this._argument_expression_list();\n                const struct = this._getStruct(name);\n                if (struct != null) {\n                    return new CreateExpr(struct, args);\n                }\n                return new CallExpr(name, args);\n            }\n            if (this._context.constants.has(name)) {\n                const c = this._context.constants.get(name);\n                return new ConstExpr(name, c.value);\n            }\n            return new VariableExpr(name);\n        }\n        // const_literal\n        if (this._match(TokenTypes.const_literal)) {\n            return new LiteralExpr(parseFloat(this._previous().toString()));\n        }\n        // paren_expression\n        if (this._check(TokenTypes.tokens.paren_left)) {\n            return this._paren_expression();\n        }\n        // bitcast less_than type_decl greater_than paren_expression\n        if (this._match(TokenTypes.keywords.bitcast)) {\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<'.\");\n            const type = this._type_decl();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\n            const value = this._paren_expression();\n            return new BitcastExpr(type, value);\n        }\n        // type_decl argument_expression_list\n        const type = this._type_decl();\n        const args = this._argument_expression_list();\n        return new TypecastExpr(type, args);\n    }\n    _argument_expression_list() {\n        // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\n        if (!this._match(TokenTypes.tokens.paren_left))\n            return null;\n        const args = [];\n        do {\n            if (this._check(TokenTypes.tokens.paren_right))\n                break;\n            const arg = this._short_circuit_or_expression();\n            args.push(arg);\n        } while (this._match(TokenTypes.tokens.comma));\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' for agument list\");\n        return args;\n    }\n    _optional_paren_expression() {\n        // [paren_left] short_circuit_or_expression [paren_right]\n        this._match(TokenTypes.tokens.paren_left);\n        const expr = this._short_circuit_or_expression();\n        this._match(TokenTypes.tokens.paren_right);\n        return new GroupingExpr([expr]);\n    }\n    _paren_expression() {\n        // paren_left short_circuit_or_expression paren_right\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        const expr = this._short_circuit_or_expression();\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        return new GroupingExpr([expr]);\n    }\n    _struct_decl() {\n        // attribute* struct ident struct_body_decl\n        if (!this._match(TokenTypes.keywords.struct))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected name for struct.\").toString();\n        // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for struct body.\");\n        const members = [];\n        while (!this._check(TokenTypes.tokens.brace_right)) {\n            // struct_member: attribute* variable_ident_decl\n            const memberAttrs = this._attribute();\n            const memberName = this._consume(TokenTypes.tokens.ident, \"Expected variable name.\").toString();\n            this._consume(TokenTypes.tokens.colon, \"Expected ':' for struct member type.\");\n            const typeAttrs = this._attribute();\n            const memberType = this._type_decl();\n            if (memberType != null)\n                memberType.attributes = typeAttrs;\n            if (!this._check(TokenTypes.tokens.brace_right))\n                this._consume(TokenTypes.tokens.comma, \"Expected ',' for struct member.\");\n            else\n                this._match(TokenTypes.tokens.comma); // trailing comma optional.\n            members.push(new Member(memberName, memberType, memberAttrs));\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' after struct body.\");\n        const structNode = new Struct(name, members);\n        this._context.structs.set(name, structNode);\n        return structNode;\n    }\n    _global_variable_decl() {\n        // attribute* variable_decl (equal const_expression)?\n        const _var = this._variable_decl();\n        if (_var && this._match(TokenTypes.tokens.equal))\n            _var.value = this._const_expression();\n        return _var;\n    }\n    _override_variable_decl() {\n        // attribute* override_decl (equal const_expression)?\n        const _override = this._override_decl();\n        if (_override && this._match(TokenTypes.tokens.equal))\n            _override.value = this._const_expression();\n        return _override;\n    }\n    _global_const_decl() {\n        // attribute* const (ident variable_ident_decl) global_const_initializer?\n        if (!this._match(TokenTypes.keywords.const))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        let value = null;\n        if (this._match(TokenTypes.tokens.equal)) {\n            const valueExpr = this._short_circuit_or_expression();\n            if (valueExpr instanceof CreateExpr) {\n                value = valueExpr;\n            }\n            else if (valueExpr instanceof ConstExpr &&\n                valueExpr.initializer instanceof CreateExpr) {\n                value = valueExpr.initializer;\n            }\n            else {\n                try {\n                    const constValue = valueExpr.evaluate(this._context);\n                    value = new LiteralExpr(constValue);\n                }\n                catch (_a) {\n                    value = valueExpr;\n                }\n            }\n        }\n        const c = new Const(name.toString(), type, \"\", \"\", value);\n        this._context.constants.set(c.name, c);\n        return c;\n    }\n    _global_let_decl() {\n        // attribute* let (ident variable_ident_decl) global_const_initializer?\n        if (!this._match(TokenTypes.keywords.let))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        let value = null;\n        if (this._match(TokenTypes.tokens.equal)) {\n            value = this._const_expression();\n        }\n        return new Let(name.toString(), type, \"\", \"\", value);\n    }\n    _const_expression() {\n        // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\n        // const_literal\n        if (this._match(TokenTypes.const_literal))\n            return new StringExpr(this._previous().toString());\n        const type = this._type_decl();\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        let args = [];\n        while (!this._check(TokenTypes.tokens.paren_right)) {\n            args.push(this._const_expression());\n            if (!this._check(TokenTypes.tokens.comma))\n                break;\n            this._advance();\n        }\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        return new CreateExpr(type, args);\n    }\n    _variable_decl() {\n        // var variable_qualifier? (ident variable_ident_decl)\n        if (!this._match(TokenTypes.keywords.var))\n            return null;\n        // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\n        let storage = \"\";\n        let access = \"\";\n        if (this._match(TokenTypes.tokens.less_than)) {\n            storage = this._consume(TokenTypes.storage_class, \"Expected storage_class.\").toString();\n            if (this._match(TokenTypes.tokens.comma))\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode.\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\n        }\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        return new Var(name.toString(), type, storage, access, null);\n    }\n    _override_decl() {\n        // override (ident variable_ident_decl)\n        if (!this._match(TokenTypes.keywords.override))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        return new Override(name.toString(), type, null);\n    }\n    _enable_directive() {\n        // enable ident semicolon\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n        return new Enable(name.toString());\n    }\n    _type_alias() {\n        // type ident equal type_decl\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n        this._consume(TokenTypes.tokens.equal, \"Expected '=' for type alias.\");\n        let aliasType = this._type_decl();\n        if (aliasType === null) {\n            throw this._error(this._peek(), \"Expected Type for Alias.\");\n        }\n        if (this._context.aliases.has(aliasType.name)) {\n            aliasType = this._context.aliases.get(aliasType.name).type;\n        }\n        const aliasNode = new Alias(name.toString(), aliasType);\n        this._context.aliases.set(aliasNode.name, aliasNode);\n        return aliasNode;\n    }\n    _type_decl() {\n        // ident\n        // bool\n        // float32\n        // int32\n        // uint32\n        // vec2 less_than type_decl greater_than\n        // vec3 less_than type_decl greater_than\n        // vec4 less_than type_decl greater_than\n        // mat2x2 less_than type_decl greater_than\n        // mat2x3 less_than type_decl greater_than\n        // mat2x4 less_than type_decl greater_than\n        // mat3x2 less_than type_decl greater_than\n        // mat3x3 less_than type_decl greater_than\n        // mat3x4 less_than type_decl greater_than\n        // mat4x2 less_than type_decl greater_than\n        // mat4x3 less_than type_decl greater_than\n        // mat4x4 less_than type_decl greater_than\n        // atomic less_than type_decl greater_than\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\n        // array_type_decl\n        // texture_sampler_types\n        if (this._check([\n            TokenTypes.tokens.ident,\n            ...TokenTypes.texel_format,\n            TokenTypes.keywords.bool,\n            TokenTypes.keywords.f32,\n            TokenTypes.keywords.i32,\n            TokenTypes.keywords.u32,\n        ])) {\n            const type = this._advance();\n            const typeName = type.toString();\n            if (this._context.structs.has(typeName)) {\n                return this._context.structs.get(typeName);\n            }\n            if (this._context.aliases.has(typeName)) {\n                return this._context.aliases.get(typeName).type;\n            }\n            return new Type(type.toString());\n        }\n        // texture_sampler_types\n        let type = this._texture_sampler_types();\n        if (type)\n            return type;\n        if (this._check(TokenTypes.template_types)) {\n            let type = this._advance().toString();\n            let format = null;\n            let access = null;\n            if (this._match(TokenTypes.tokens.less_than)) {\n                format = this._type_decl();\n                access = null;\n                if (this._match(TokenTypes.tokens.comma))\n                    access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for type.\");\n            }\n            return new TemplateType(type, format, access);\n        }\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\n        if (this._match(TokenTypes.keywords.ptr)) {\n            let pointer = this._previous().toString();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for pointer.\");\n            const storage = this._consume(TokenTypes.storage_class, \"Expected storage_class for pointer\");\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' for pointer.\");\n            const decl = this._type_decl();\n            let access = null;\n            if (this._match(TokenTypes.tokens.comma))\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for pointer.\");\n            return new PointerType(pointer, storage.toString(), decl, access);\n        }\n        // The following type_decl's have an optional attribyte_list*\n        const attrs = this._attribute();\n        // attribute* array\n        // attribute* array less_than type_decl (comma element_count_expression)? greater_than\n        if (this._match(TokenTypes.keywords.array)) {\n            let format = null;\n            let countInt = -1;\n            const array = this._previous();\n            if (this._match(TokenTypes.tokens.less_than)) {\n                format = this._type_decl();\n                if (this._context.aliases.has(format.name)) {\n                    format = this._context.aliases.get(format.name).type;\n                }\n                let count = \"\";\n                if (this._match(TokenTypes.tokens.comma)) {\n                    let c = this._shift_expression();\n                    count = c.evaluate(this._context).toString();\n                }\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for array.\");\n                countInt = count ? parseInt(count) : 0;\n            }\n            return new ArrayType(array.toString(), attrs, format, countInt);\n        }\n        return null;\n    }\n    _texture_sampler_types() {\n        // sampler_type\n        if (this._match(TokenTypes.sampler_type))\n            return new SamplerType(this._previous().toString(), null, null);\n        // depth_texture_type\n        if (this._match(TokenTypes.depth_texture_type))\n            return new SamplerType(this._previous().toString(), null, null);\n        // sampled_texture_type less_than type_decl greater_than\n        // multisampled_texture_type less_than type_decl greater_than\n        if (this._match(TokenTypes.sampled_texture_type) ||\n            this._match(TokenTypes.multisampled_texture_type)) {\n            const sampler = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\n            const format = this._type_decl();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\n            return new SamplerType(sampler.toString(), format, null);\n        }\n        // storage_texture_type less_than texel_format comma access_mode greater_than\n        if (this._match(TokenTypes.storage_texture_type)) {\n            const sampler = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\n            const format = this._consume(TokenTypes.texel_format, \"Invalid texel format.\").toString();\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' after texel format.\");\n            const access = this._consume(TokenTypes.access_mode, \"Expected access mode for storage texture type.\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\n            return new SamplerType(sampler.toString(), format, access);\n        }\n        return null;\n    }\n    _attribute() {\n        // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\n        // attr ident\n        let attributes = [];\n        while (this._match(TokenTypes.tokens.attr)) {\n            const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\n            const attr = new Attribute(name.toString(), null);\n            if (this._match(TokenTypes.tokens.paren_left)) {\n                // literal_or_ident\n                attr.value = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                if (this._check(TokenTypes.tokens.comma)) {\n                    this._advance();\n                    do {\n                        const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                        if (!(attr.value instanceof Array)) {\n                            attr.value = [attr.value];\n                        }\n                        attr.value.push(v);\n                    } while (this._match(TokenTypes.tokens.comma));\n                }\n                this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n            }\n            attributes.push(attr);\n        }\n        // Deprecated:\n        // attr_left (attribute comma)* attribute attr_right\n        while (this._match(TokenTypes.tokens.attr_left)) {\n            if (!this._check(TokenTypes.tokens.attr_right)) {\n                do {\n                    const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\n                    const attr = new Attribute(name.toString(), null);\n                    if (this._match(TokenTypes.tokens.paren_left)) {\n                        // literal_or_ident\n                        attr.value = [\n                            this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString(),\n                        ];\n                        if (this._check(TokenTypes.tokens.comma)) {\n                            this._advance();\n                            do {\n                                const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                                attr.value.push(v);\n                            } while (this._match(TokenTypes.tokens.comma));\n                        }\n                        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n                    }\n                    attributes.push(attr);\n                } while (this._match(TokenTypes.tokens.comma));\n            }\n            // Consume ]]\n            this._consume(TokenTypes.tokens.attr_right, \"Expected ']]' after attribute declarations\");\n        }\n        if (attributes.length == 0)\n            return null;\n        return attributes;\n    }\n}\n\n/**\n * @author Brendan Duncan / https://github.com/brendan-duncan\n */\nclass TypeInfo {\n    constructor(name, attributes) {\n        this.name = name;\n        this.attributes = attributes;\n        this.size = 0;\n    }\n    get isArray() {\n        return false;\n    }\n    get isStruct() {\n        return false;\n    }\n    get isTemplate() {\n        return false;\n    }\n}\nclass MemberInfo {\n    constructor(name, type, attributes) {\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n        this.offset = 0;\n        this.size = 0;\n    }\n    get isArray() {\n        return this.type.isArray;\n    }\n    get isStruct() {\n        return this.type.isStruct;\n    }\n    get isTemplate() {\n        return this.type.isTemplate;\n    }\n    get align() {\n        return this.type.isStruct ? this.type.align : 0;\n    }\n    get members() {\n        return this.type.isStruct ? this.type.members : null;\n    }\n    get format() {\n        return this.type.isArray\n            ? this.type.format\n            : this.type.isTemplate\n                ? this.type.format\n                : null;\n    }\n    get count() {\n        return this.type.isArray ? this.type.count : 0;\n    }\n    get stride() {\n        return this.type.isArray ? this.type.stride : this.size;\n    }\n}\nclass StructInfo extends TypeInfo {\n    constructor(name, attributes) {\n        super(name, attributes);\n        this.members = [];\n        this.align = 0;\n    }\n    get isStruct() {\n        return true;\n    }\n}\nclass ArrayInfo extends TypeInfo {\n    constructor(name, attributes) {\n        super(name, attributes);\n        this.count = 0;\n        this.stride = 0;\n    }\n    get isArray() {\n        return true;\n    }\n}\nclass TemplateInfo extends TypeInfo {\n    constructor(name, format, attributes, access) {\n        super(name, attributes);\n        this.format = format;\n        this.access = access;\n    }\n    get isTemplate() {\n        return true;\n    }\n}\nvar ResourceType;\n(function (ResourceType) {\n    ResourceType[ResourceType[\"Uniform\"] = 0] = \"Uniform\";\n    ResourceType[ResourceType[\"Storage\"] = 1] = \"Storage\";\n    ResourceType[ResourceType[\"Texture\"] = 2] = \"Texture\";\n    ResourceType[ResourceType[\"Sampler\"] = 3] = \"Sampler\";\n    ResourceType[ResourceType[\"StorageTexture\"] = 4] = \"StorageTexture\";\n})(ResourceType || (ResourceType = {}));\nclass VariableInfo {\n    constructor(name, type, group, binding, attributes, resourceType, access) {\n        this.name = name;\n        this.type = type;\n        this.group = group;\n        this.binding = binding;\n        this.attributes = attributes;\n        this.resourceType = resourceType;\n        this.access = access;\n    }\n    get isArray() {\n        return this.type.isArray;\n    }\n    get isStruct() {\n        return this.type.isStruct;\n    }\n    get isTemplate() {\n        return this.type.isTemplate;\n    }\n    get size() {\n        return this.type.size;\n    }\n    get align() {\n        return this.type.isStruct ? this.type.align : 0;\n    }\n    get members() {\n        return this.type.isStruct ? this.type.members : null;\n    }\n    get format() {\n        return this.type.isArray\n            ? this.type.format\n            : this.type.isTemplate\n                ? this.type.format\n                : null;\n    }\n    get count() {\n        return this.type.isArray ? this.type.count : 0;\n    }\n    get stride() {\n        return this.type.isArray ? this.type.stride : this.size;\n    }\n}\nclass AliasInfo {\n    constructor(name, type) {\n        this.name = name;\n        this.type = type;\n    }\n}\nclass _TypeSize {\n    constructor(align, size) {\n        this.align = align;\n        this.size = size;\n    }\n}\nclass InputInfo {\n    constructor(name, type, locationType, location) {\n        this.name = name;\n        this.type = type;\n        this.locationType = locationType;\n        this.location = location;\n        this.interpolation = null;\n    }\n}\nclass OutputInfo {\n    constructor(name, type, locationType, location) {\n        this.name = name;\n        this.type = type;\n        this.locationType = locationType;\n        this.location = location;\n    }\n}\nclass FunctionInfo {\n    constructor(name, stage = null) {\n        this.stage = null;\n        this.inputs = [];\n        this.outputs = [];\n        this.name = name;\n        this.stage = stage;\n    }\n}\nclass EntryFunctions {\n    constructor() {\n        this.vertex = [];\n        this.fragment = [];\n        this.compute = [];\n    }\n}\nclass OverrideInfo {\n    constructor(name, type, attributes, id) {\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n        this.id = id;\n    }\n}\nclass WgslReflect {\n    constructor(code) {\n        /// All top-level uniform vars in the shader.\n        this.uniforms = [];\n        /// All top-level storage vars in the shader.\n        this.storage = [];\n        /// All top-level texture vars in the shader;\n        this.textures = [];\n        // All top-level sampler vars in the shader.\n        this.samplers = [];\n        /// All top-level type aliases in the shader.\n        this.aliases = [];\n        /// All top-level overrides in the shader.\n        this.overrides = [];\n        /// All top-level structs in the shader.\n        this.structs = [];\n        /// All entry functions in the shader: vertex, fragment, and/or compute.\n        this.entry = new EntryFunctions();\n        this._types = new Map();\n        if (code) {\n            this.update(code);\n        }\n    }\n    _isStorageTexture(type) {\n        return (type.name == \"texture_storage_1d\" ||\n            type.name == \"texture_storage_2d\" ||\n            type.name == \"texture_storage_2d_array\" ||\n            type.name == \"texture_storage_3d\");\n    }\n    update(code) {\n        const parser = new WgslParser();\n        const ast = parser.parse(code);\n        for (const node of ast) {\n            if (node instanceof Struct) {\n                const info = this._getTypeInfo(node, null);\n                if (info instanceof StructInfo) {\n                    this.structs.push(info);\n                }\n                continue;\n            }\n            if (node instanceof Alias) {\n                this.aliases.push(this._getAliasInfo(node));\n                continue;\n            }\n            if (node instanceof Override) {\n                const v = node;\n                const id = this._getAttributeNum(v.attributes, \"id\", 0);\n                const type = v.type != null ? this._getTypeInfo(v.type, v.attributes) : null;\n                this.overrides.push(new OverrideInfo(v.name, type, v.attributes, id));\n                continue;\n            }\n            if (this._isUniformVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Uniform, v.access);\n                this.uniforms.push(varInfo);\n                continue;\n            }\n            if (this._isStorageVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const isStorageTexture = this._isStorageTexture(type);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Storage, v.access);\n                this.storage.push(varInfo);\n                continue;\n            }\n            if (this._isTextureVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const isStorageTexture = this._isStorageTexture(type);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Texture, v.access);\n                if (isStorageTexture) {\n                    this.storage.push(varInfo);\n                }\n                else {\n                    this.textures.push(varInfo);\n                }\n                continue;\n            }\n            if (this._isSamplerVar(node)) {\n                const v = node;\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\n                const type = this._getTypeInfo(v.type, v.attributes);\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Sampler, v.access);\n                this.samplers.push(varInfo);\n                continue;\n            }\n            if (node instanceof Function) {\n                const vertexStage = this._getAttribute(node, \"vertex\");\n                const fragmentStage = this._getAttribute(node, \"fragment\");\n                const computeStage = this._getAttribute(node, \"compute\");\n                const stage = vertexStage || fragmentStage || computeStage;\n                if (stage) {\n                    const fn = new FunctionInfo(node.name, stage.name);\n                    fn.inputs = this._getInputs(node.args);\n                    fn.outputs = this._getOutputs(node.returnType);\n                    this.entry[stage.name].push(fn);\n                }\n                continue;\n            }\n        }\n    }\n    getBindGroups() {\n        const groups = [];\n        function _makeRoom(group, binding) {\n            if (group >= groups.length)\n                groups.length = group + 1;\n            if (groups[group] === undefined)\n                groups[group] = [];\n            if (binding >= groups[group].length)\n                groups[group].length = binding + 1;\n        }\n        for (const u of this.uniforms) {\n            _makeRoom(u.group, u.binding);\n            const group = groups[u.group];\n            group[u.binding] = u;\n        }\n        for (const u of this.storage) {\n            _makeRoom(u.group, u.binding);\n            const group = groups[u.group];\n            group[u.binding] = u;\n        }\n        for (const t of this.textures) {\n            _makeRoom(t.group, t.binding);\n            const group = groups[t.group];\n            group[t.binding] = t;\n        }\n        for (const t of this.samplers) {\n            _makeRoom(t.group, t.binding);\n            const group = groups[t.group];\n            group[t.binding] = t;\n        }\n        return groups;\n    }\n    _getOutputs(type, outputs = undefined) {\n        if (outputs === undefined)\n            outputs = [];\n        if (type instanceof Struct) {\n            this._getStructOutputs(type, outputs);\n        }\n        else {\n            const output = this._getOutputInfo(type);\n            if (output !== null)\n                outputs.push(output);\n        }\n        return outputs;\n    }\n    _getStructOutputs(struct, outputs) {\n        for (const m of struct.members) {\n            if (m.type instanceof Struct) {\n                this._getStructOutputs(m.type, outputs);\n            }\n            else {\n                const location = this._getAttribute(m, \"location\") || this._getAttribute(m, \"builtin\");\n                if (location !== null) {\n                    const typeInfo = this._getTypeInfo(m.type, m.type.attributes);\n                    const locationValue = this._parseInt(location.value);\n                    const info = new OutputInfo(m.name, typeInfo, location.name, locationValue);\n                    outputs.push(info);\n                }\n            }\n        }\n    }\n    _getOutputInfo(type) {\n        const location = this._getAttribute(type, \"location\") ||\n            this._getAttribute(type, \"builtin\");\n        if (location !== null) {\n            const typeInfo = this._getTypeInfo(type, type.attributes);\n            const locationValue = this._parseInt(location.value);\n            const info = new OutputInfo(\"\", typeInfo, location.name, locationValue);\n            return info;\n        }\n        return null;\n    }\n    _getInputs(args, inputs = undefined) {\n        if (inputs === undefined)\n            inputs = [];\n        for (const arg of args) {\n            if (arg.type instanceof Struct) {\n                this._getStructInputs(arg.type, inputs);\n            }\n            else {\n                const input = this._getInputInfo(arg);\n                if (input !== null)\n                    inputs.push(input);\n            }\n        }\n        return inputs;\n    }\n    _getStructInputs(struct, inputs) {\n        for (const m of struct.members) {\n            if (m.type instanceof Struct) {\n                this._getStructInputs(m.type, inputs);\n            }\n            else {\n                const input = this._getInputInfo(m);\n                if (input !== null)\n                    inputs.push(input);\n            }\n        }\n    }\n    _getInputInfo(node) {\n        const location = this._getAttribute(node, \"location\") ||\n            this._getAttribute(node, \"builtin\");\n        if (location !== null) {\n            const interpolation = this._getAttribute(node, \"interpolation\");\n            const type = this._getTypeInfo(node.type, node.attributes);\n            const locationValue = this._parseInt(location.value);\n            const info = new InputInfo(node.name, type, location.name, locationValue);\n            if (interpolation !== null) {\n                info.interpolation = this._parseString(interpolation.value);\n            }\n            return info;\n        }\n        return null;\n    }\n    _parseString(s) {\n        if (s instanceof Array) {\n            s = s[0];\n        }\n        return s;\n    }\n    _parseInt(s) {\n        if (s instanceof Array) {\n            s = s[0];\n        }\n        const n = parseInt(s);\n        return isNaN(n) ? s : n;\n    }\n    _getAlias(name) {\n        for (const a of this.aliases) {\n            if (a.name == name)\n                return a.type;\n        }\n        return null;\n    }\n    _getAliasInfo(node) {\n        return new AliasInfo(node.name, this._getTypeInfo(node.type, null));\n    }\n    _getTypeInfo(type, attributes) {\n        if (this._types.has(type)) {\n            return this._types.get(type);\n        }\n        if (type instanceof ArrayType) {\n            const a = type;\n            const t = this._getTypeInfo(a.format, a.attributes);\n            const info = new ArrayInfo(a.name, attributes);\n            info.format = t;\n            info.count = a.count;\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        if (type instanceof Struct) {\n            const s = type;\n            const info = new StructInfo(s.name, attributes);\n            for (const m of s.members) {\n                const t = this._getTypeInfo(m.type, m.attributes);\n                info.members.push(new MemberInfo(m.name, t, m.attributes));\n            }\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        if (type instanceof SamplerType) {\n            const s = type;\n            const formatIsType = s.format instanceof Type;\n            const format = s.format\n                ? formatIsType\n                    ? this._getTypeInfo(s.format, null)\n                    : new TypeInfo(s.format, null)\n                : null;\n            const info = new TemplateInfo(s.name, format, attributes, s.access);\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        if (type instanceof TemplateType) {\n            const t = type;\n            const format = t.format ? this._getTypeInfo(t.format, null) : null;\n            const info = new TemplateInfo(t.name, format, attributes, t.access);\n            this._types.set(type, info);\n            this._updateTypeInfo(info);\n            return info;\n        }\n        const info = new TypeInfo(type.name, attributes);\n        this._types.set(type, info);\n        this._updateTypeInfo(info);\n        return info;\n    }\n    _updateTypeInfo(type) {\n        var _a, _b;\n        const typeSize = this._getTypeSize(type);\n        type.size = (_a = typeSize === null || typeSize === void 0 ? void 0 : typeSize.size) !== null && _a !== void 0 ? _a : 0;\n        if (type instanceof ArrayInfo) {\n            const formatInfo = this._getTypeSize(type[\"format\"]);\n            type.stride = (_b = formatInfo === null || formatInfo === void 0 ? void 0 : formatInfo.size) !== null && _b !== void 0 ? _b : 0;\n            this._updateTypeInfo(type[\"format\"]);\n        }\n        if (type instanceof StructInfo) {\n            this._updateStructInfo(type);\n        }\n    }\n    _updateStructInfo(struct) {\n        var _a;\n        let offset = 0;\n        let lastSize = 0;\n        let lastOffset = 0;\n        let structAlign = 0;\n        for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\n            const member = struct.members[mi];\n            const sizeInfo = this._getTypeSize(member);\n            if (!sizeInfo)\n                continue;\n            (_a = this._getAlias(member.type.name)) !== null && _a !== void 0 ? _a : member.type;\n            const align = sizeInfo.align;\n            const size = sizeInfo.size;\n            offset = this._roundUp(align, offset + lastSize);\n            lastSize = size;\n            lastOffset = offset;\n            structAlign = Math.max(structAlign, align);\n            member.offset = offset;\n            member.size = size;\n            this._updateTypeInfo(member.type);\n        }\n        struct.size = this._roundUp(structAlign, lastOffset + lastSize);\n        struct.align = structAlign;\n    }\n    _getTypeSize(type) {\n        var _a;\n        if (type === null || type === undefined)\n            return null;\n        const explicitSize = this._getAttributeNum(type.attributes, \"size\", 0);\n        const explicitAlign = this._getAttributeNum(type.attributes, \"align\", 0);\n        if (type instanceof MemberInfo)\n            type = type.type;\n        if (type instanceof TypeInfo) {\n            const alias = this._getAlias(type.name);\n            if (alias !== null) {\n                type = alias;\n            }\n        }\n        {\n            const info = WgslReflect._typeInfo[type.name];\n            if (info !== undefined) {\n                const divisor = type[\"format\"] === \"f16\" ? 2 : 1;\n                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\n            }\n        }\n        {\n            const info = WgslReflect._typeInfo[type.name.substring(0, type.name.length - 1)];\n            if (info) {\n                const divisor = type.name[type.name.length - 1] === \"h\" ? 2 : 1;\n                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\n            }\n        }\n        if (type instanceof ArrayInfo) {\n            let arrayType = type;\n            let align = 8;\n            let size = 8;\n            // Type                 AlignOf(T)          Sizeof(T)\n            // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\n            // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\n            //\n            // @stride(Q)\n            // array<E, N>          AlignOf(E)          N * Q\n            //\n            // @stride(Q)\n            // array<E>             AlignOf(E)          Nruntime * Q\n            //const E = type.format.name;\n            const E = this._getTypeSize(arrayType.format);\n            if (E !== null) {\n                size = E.size;\n                align = E.align;\n            }\n            const N = arrayType.count;\n            const stride = this._getAttributeNum((_a = type === null || type === void 0 ? void 0 : type.attributes) !== null && _a !== void 0 ? _a : null, \"stride\", this._roundUp(align, size));\n            size = N * stride;\n            if (explicitSize)\n                size = explicitSize;\n            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));\n        }\n        if (type instanceof StructInfo) {\n            let align = 0;\n            let size = 0;\n            // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\n            //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\n            //                          Where L is the last member of the structure\n            let offset = 0;\n            let lastSize = 0;\n            let lastOffset = 0;\n            for (const m of type.members) {\n                const mi = this._getTypeSize(m.type);\n                if (mi !== null) {\n                    align = Math.max(mi.align, align);\n                    offset = this._roundUp(mi.align, offset + lastSize);\n                    lastSize = mi.size;\n                    lastOffset = offset;\n                }\n            }\n            size = this._roundUp(align, lastOffset + lastSize);\n            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));\n        }\n        return null;\n    }\n    _isUniformVar(node) {\n        return node instanceof Var && node.storage == \"uniform\";\n    }\n    _isStorageVar(node) {\n        return node instanceof Var && node.storage == \"storage\";\n    }\n    _isTextureVar(node) {\n        return (node instanceof Var &&\n            node.type !== null &&\n            WgslReflect._textureTypes.indexOf(node.type.name) != -1);\n    }\n    _isSamplerVar(node) {\n        return (node instanceof Var &&\n            node.type !== null &&\n            WgslReflect._samplerTypes.indexOf(node.type.name) != -1);\n    }\n    _getAttribute(node, name) {\n        const obj = node;\n        if (!obj || !obj[\"attributes\"])\n            return null;\n        const attrs = obj[\"attributes\"];\n        for (let a of attrs) {\n            if (a.name == name)\n                return a;\n        }\n        return null;\n    }\n    _getAttributeNum(attributes, name, defaultValue) {\n        if (attributes === null)\n            return defaultValue;\n        for (let a of attributes) {\n            if (a.name == name) {\n                let v = a !== null && a.value !== null ? a.value : defaultValue;\n                if (v instanceof Array) {\n                    v = v[0];\n                }\n                if (typeof v === \"number\") {\n                    return v;\n                }\n                if (typeof v === \"string\") {\n                    return parseInt(v);\n                }\n                return defaultValue;\n            }\n        }\n        return defaultValue;\n    }\n    _roundUp(k, n) {\n        return Math.ceil(n / k) * k;\n    }\n}\n// Type                 AlignOf(T)          Sizeof(T)\n// i32, u32, or f32     4                   4\n// atomic<T>            4                   4\n// vec2<T>              8                   8\n// vec3<T>              16                  12\n// vec4<T>              16                  16\n// mat2x2<f32>          8                   16\n// mat3x2<f32>          8                   24\n// mat4x2<f32>          8                   32\n// mat2x3<f32>          16                  32\n// mat3x3<f32>          16                  48\n// mat4x3<f32>          16                  64\n// mat2x4<f32>          16                  32\n// mat3x4<f32>          16                  48\n// mat4x4<f32>          16                  64\nWgslReflect._typeInfo = {\n    f16: { align: 2, size: 2 },\n    i32: { align: 4, size: 4 },\n    u32: { align: 4, size: 4 },\n    f32: { align: 4, size: 4 },\n    atomic: { align: 4, size: 4 },\n    vec2: { align: 8, size: 8 },\n    vec3: { align: 16, size: 12 },\n    vec4: { align: 16, size: 16 },\n    mat2x2: { align: 8, size: 16 },\n    mat3x2: { align: 8, size: 24 },\n    mat4x2: { align: 8, size: 32 },\n    mat2x3: { align: 16, size: 32 },\n    mat3x3: { align: 16, size: 48 },\n    mat4x3: { align: 16, size: 64 },\n    mat2x4: { align: 16, size: 32 },\n    mat3x4: { align: 16, size: 48 },\n    mat4x4: { align: 16, size: 64 },\n};\nWgslReflect._textureTypes = TokenTypes.any_texture_type.map((t) => {\n    return t.name;\n});\nWgslReflect._samplerTypes = TokenTypes.sampler_type.map((t) => {\n    return t.name;\n});\n\nexport { Alias, AliasInfo, Argument, ArrayInfo, ArrayType, Assign, AssignOperator, Attribute, BinaryOperator, BitcastExpr, Break, Call, CallExpr, Case, Const, ConstExpr, Continue, Continuing, CreateExpr, Default, Discard, ElseIf, Enable, EntryFunctions, Expression, For, Function, FunctionInfo, GroupingExpr, If, Increment, IncrementOperator, InputInfo, Let, LiteralExpr, Loop, Member, MemberInfo, Node, Operator, OutputInfo, Override, OverrideInfo, ParseContext, PointerType, ResourceType, Return, SamplerType, Statement, StaticAssert, StringExpr, Struct, StructInfo, Switch, SwitchCase, TemplateInfo, TemplateType, Token, TokenClass, TokenType, TokenTypes, Type, TypeInfo, TypecastExpr, UnaryOperator, Var, VariableExpr, VariableInfo, WgslParser, WgslReflect, WgslScanner, While };\n//# sourceMappingURL=wgsl_reflect.module.js.map\n","import {\n    WgslReflect,\n    ArrayInfo,\n    StructInfo,\n    TemplateInfo,\n    TypeInfo,\n    VariableInfo,\n} from 'wgsl_reflect';\n\nexport type FieldDefinition = {\n    offset: number;\n    type: TypeDefinition;\n};\n\nexport type FieldDefinitions = {\n    [x: string]: FieldDefinition;\n};\n\nexport type TypeDefinition = {\n    size: number;\n};\n\n// These 3 types are wonky. Maybe we should make them inherit from a common\n// type with a `type` field. I wanted this to be a plain object though, not an object\n// with a constructor. In any case, right now, the way you tell them apart is\n// If it's got `elementType` then it's an ArrayDefinition\n// If it's got `fields` then it's a StructDefinition\n// else it's an IntrinsicDefinition\nexport type StructDefinition = TypeDefinition & {\n    fields: FieldDefinitions;\n    size: number;\n};\n\nexport type IntrinsicDefinition = TypeDefinition & {\n    type: string;\n    numElements?: number;\n};\n\nexport type ArrayDefinition = TypeDefinition & {\n    elementType: TypeDefinition,\n    numElements: number,\n};\n\n/**\n * @group(x) @binding(y) var<...> definition\n */\nexport interface VariableDefinition {\n    binding: number;\n    group: number;\n    size: number;\n    typeDefinition: TypeDefinition;\n}\n\nexport type StructDefinitions = {\n    [x: string]: StructDefinition;\n};\n\nexport type VariableDefinitions = {\n    [x: string]: VariableDefinition;\n};\n\ntype ShaderDataDefinitions = {\n    uniforms: VariableDefinitions,\n    storages: VariableDefinitions,\n    structs: StructDefinitions,\n};\n\nfunction getNamedVariables(reflect: WgslReflect, variables: VariableInfo[]): VariableDefinitions {\n    return Object.fromEntries(variables.map(v => {\n        const typeDefinition = addType(reflect, v.type, 0);\n        return [\n            v.name,\n            {\n                typeDefinition,\n                group: v.group,\n                binding: v.binding,\n                size: typeDefinition.size,\n            },\n        ];\n    })) as VariableDefinitions;\n}\n\nfunction makeStructDefinition(reflect: WgslReflect, structInfo: StructInfo, offset: number) {\n    // StructDefinition\n    const fields: FieldDefinitions = Object.fromEntries(structInfo.members.map(m => {\n        return [\n            m.name,\n            {\n                offset: m.offset,\n                type: addType(reflect, m.type, 0),\n            },\n        ];\n    }));\n    return {\n        fields,\n        size: structInfo.size,\n        offset,\n    };\n}\n\n/**\n * Given a WGSL shader, returns data definitions for structures,\n * uniforms, and storage buffers\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct MyStruct {\n *    color: vec4f,\n *    brightness: f32,\n *    kernel: array<f32, 9>,\n * };\n * @group(0) @binding(0) var<uniform> myUniforms: MyUniforms;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const myUniformValues = makeStructuredView(defs.uniforms.myUniforms);\n *\n * myUniformValues.set({\n *   color: [1, 0, 1, 1],\n *   brightness: 0.8,\n *   kernel: [\n *      1, 0, -1,\n *      2, 0, -2,\n *      1, 0, -1,\n *   ],\n * });\n * device.queue.writeBuffer(uniformBuffer, 0, myUniformValues.arrayBuffer);\n * ```\n *\n * @param code WGSL shader. Note: it is not required for this to be a complete shader\n * @returns definitions of the structures by name. Useful for passing to {@link makeStructuredView}\n */\nexport function makeShaderDataDefinitions(code: string): ShaderDataDefinitions {\n    const reflect = new WgslReflect(code);\n\n    const structs = Object.fromEntries(reflect.structs.map(structInfo => {\n        return [structInfo.name, makeStructDefinition(reflect, structInfo, 0)];\n    }));\n\n    const uniforms = getNamedVariables(reflect, reflect.uniforms);\n    const storages = getNamedVariables(reflect, reflect.storage);\n\n    return {\n        structs,\n        storages,\n        uniforms,\n    };\n}\n\nfunction assert(cond: boolean, msg = '') {\n    if (!cond) {\n        throw new Error(msg);\n    }\n}\n\n/*\n write down what I want for a given type\n\n    struct VSUniforms {\n        foo: u32,\n    };\n    @group(4) @binding(1) var<uniform> uni1: f32;\n    @group(3) @binding(2) var<uniform> uni2: array<f32, 5>;\n    @group(2) @binding(3) var<uniform> uni3: VSUniforms;\n    @group(1) @binding(4) var<uniform> uni4: array<VSUniforms, 6>;\n\n    uni1: {\n        type: 'f32',\n        numElements: undefined\n    },\n    uni2: {\n        type: 'array',\n        elementType: 'f32'\n        numElements: 5,\n    },\n    uni3: {\n        type: 'struct',\n        fields: {\n            foo: {\n                type: 'f32',\n                numElements: undefined\n            }\n        },\n    },\n    uni4: {\n        type: 'array',\n        elementType:\n        fields: {\n            foo: {\n                type: 'f32',\n                numElements: undefined\n            }\n        },\n        fields: {\n            foo: {\n                type: 'f32',\n                numElements: undefined\n            }\n        },\n        ...\n    ]\n\n    */\nfunction addType(reflect: WgslReflect, typeInfo: TypeInfo, offset: number):\n  StructDefinition |\n  IntrinsicDefinition |\n  ArrayDefinition {\n    if (typeInfo.isArray) {\n        assert(!typeInfo.isStruct, 'struct array is invalid');\n        assert(!typeInfo.isStruct, 'template array is invalid');\n        const arrayInfo = typeInfo as ArrayInfo;\n        // ArrayDefinition\n        return {\n            size: arrayInfo.size,\n            elementType: addType(reflect, arrayInfo.format, offset),\n            numElements: arrayInfo.count,\n        };\n    } else if (typeInfo.isStruct) {\n        assert(!typeInfo.isTemplate, 'template struct is invalid');\n        const structInfo = typeInfo as StructInfo;\n        return makeStructDefinition(reflect, structInfo, offset);\n    } else {\n        // template is like vec4<f32> or mat4x4<f16>\n        const asTemplateInfo = typeInfo as TemplateInfo;\n        const type = typeInfo.isTemplate\n           ? `${asTemplateInfo.name}<${asTemplateInfo.format!.name}>`\n           : typeInfo.name;\n        // IntrinsicDefinition\n        return {\n            size: typeInfo.size,\n            type,\n        };\n    }\n}\n","import {\n  isTypedArray,\n} from './typed-arrays.js';\n\nfunction guessTextureBindingViewDimensionForTexture(texture: GPUTexture): GPUTextureViewDimension {\n   switch (texture.dimension) {\n      case '1d':\n         return '1d';\n      case '3d':\n         return '3d';\n      default: // to shut up TS\n      case '2d':\n        return texture.depthOrArrayLayers > 1 ? '2d-array' : '2d';\n   }\n}\n\nfunction normalizeGPUExtent3Dict(size: GPUExtent3DDict) {\n  return [size.width, size.height || 1, size.depthOrArrayLayers || 1];\n}\n\n/**\n * Converts a `GPUExtent3D` into an array of numbers\n *\n * `GPUExtent3D` has two forms `[width, height?, depth?]` or\n * `{width: number, height?: number, depthOrArrayLayers?: number}`\n *\n * You pass one of those in here and it returns an array of 3 numbers\n * so that your code doesn't have to deal with multiple forms.\n *\n * @param size\n * @returns an array of 3 numbers, [width, height, depthOrArrayLayers]\n */\nexport function normalizeGPUExtent3D(size: GPUExtent3D): number[] {\n  return (Array.isArray(size) || isTypedArray(size))\n    ? [...(size as Iterable<number>), 1, 1].slice(0, 3)\n    : normalizeGPUExtent3Dict(size as GPUExtent3DDict);\n}\n\n/**\n * Given a GPUExtent3D returns the number of mip levels needed\n *\n * @param size\n * @returns number of mip levels needed for the given size\n */\nexport function numMipLevels(size: GPUExtent3D, dimension?: GPUTextureDimension) {\n   const sizes = normalizeGPUExtent3D(size);\n   const maxSize = Math.max(...sizes.slice(0, dimension === '3d' ? 3 : 2));\n   return 1 + Math.log2(maxSize) | 0;\n}\n\nfunction getMipmapGenerationWGSL(textureBindingViewDimension: GPUTextureViewDimension) {\n    let textureSnippet;\n    let sampleSnippet;\n    switch (textureBindingViewDimension) {\n      case '2d':\n        textureSnippet = 'texture_2d<f32>';\n        sampleSnippet = 'textureSample(ourTexture, ourSampler, fsInput.texcoord)';\n        break;\n      case '2d-array':\n        textureSnippet = 'texture_2d_array<f32>';\n        sampleSnippet = `\n          textureSample(\n              ourTexture,\n              ourSampler,\n              fsInput.texcoord,\n              uni.layer)`;\n        break;\n      case 'cube':\n        textureSnippet = 'texture_cube<f32>';\n        sampleSnippet = `\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1))`;\n        break;\n      case 'cube-array':\n        textureSnippet = 'texture_cube_array<f32>';\n        sampleSnippet = `\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1), uni.layer)`;\n        break;\n      default:\n        throw new Error(`unsupported view: ${textureBindingViewDimension}`);\n    }\n    return `\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        struct Uniforms {\n          layer: u32,\n        };\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${textureSnippet};\n        @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          _ = uni.layer; // make sure this is used so all pipelines have the same bindings\n          return ${sampleSnippet};\n        }\n      `;\n}\n\n// Use a WeakMap so the device can be destroyed and/or lost\nconst byDevice = new WeakMap();\n\n/**\n * Generates mip levels from level 0 to the last mip for an existing texture\n *\n * The texture must have been created with TEXTURE_BINDING and RENDER_ATTACHMENT\n * and been created with mip levels\n *\n * @param device A GPUDevice\n * @param texture The texture to create mips for\n * @param textureBindingViewDimension This is only needed in compatibility mode\n *   and it is only needed when the texture is going to be used as a cube map.\n */\nexport function generateMipmap(\n    device: GPUDevice,\n    texture: GPUTexture,\n    textureBindingViewDimension?: GPUTextureViewDimension) {\n  let perDeviceInfo = byDevice.get(device);\n  if (!perDeviceInfo) {\n    perDeviceInfo = {\n      pipelineByFormatAndView: {},\n      moduleByViewType: {},\n    };\n    byDevice.set(device, perDeviceInfo);\n  }\n  let {\n    sampler,\n    uniformBuffer,\n    uniformValues,\n  } = perDeviceInfo;\n  const {\n    pipelineByFormatAndView,\n    moduleByViewType,\n  } = perDeviceInfo;\n  textureBindingViewDimension = textureBindingViewDimension || guessTextureBindingViewDimensionForTexture(texture);\n  let module = moduleByViewType[textureBindingViewDimension];\n  if (!module) {\n    const code = getMipmapGenerationWGSL(textureBindingViewDimension);\n    module = device.createShaderModule({\n      label: `mip level generation for ${textureBindingViewDimension}`,\n      code,\n    });\n    moduleByViewType[textureBindingViewDimension] = module;\n  }\n\n  if (!sampler) {\n    sampler = device.createSampler({\n      minFilter: 'linear',\n      magFilter: 'linear',\n    });\n    uniformBuffer = device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    uniformValues = new Uint32Array(1);\n    Object.assign(perDeviceInfo, { sampler, uniformBuffer, uniformValues });\n  }\n\n  const id = `${texture.format}.${textureBindingViewDimension}`;\n\n  if (!pipelineByFormatAndView[id]) {\n    pipelineByFormatAndView[id] = device.createRenderPipeline({\n      label: `mip level generator pipeline for ${textureBindingViewDimension}`,\n      layout: 'auto',\n      vertex: {\n        module,\n        entryPoint: 'vs',\n      },\n      fragment: {\n        module,\n        entryPoint: 'fs',\n        targets: [{ format: texture.format }],\n      },\n    });\n  }\n  const pipeline = pipelineByFormatAndView[id];\n\n  for (let baseMipLevel = 1; baseMipLevel < texture.mipLevelCount; ++baseMipLevel) {\n    for (let baseArrayLayer = 0; baseArrayLayer < texture.depthOrArrayLayers; ++baseArrayLayer) {\n      uniformValues[0] = baseArrayLayer;\n      device.queue.writeBuffer(uniformBuffer, 0, uniformValues);\n\n      const bindGroup = device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          { binding: 0, resource: sampler },\n          {\n            binding: 1,\n            resource: texture.createView({\n              dimension: textureBindingViewDimension,\n              baseMipLevel: baseMipLevel - 1,\n              mipLevelCount: 1,\n            }),\n          },\n          { binding: 2, resource: { buffer: uniformBuffer }},\n        ],\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        label: 'mip gen renderPass',\n        colorAttachments: [\n          {\n            view: texture.createView({\n               dimension: '2d',\n               baseMipLevel,\n               mipLevelCount: 1,\n               baseArrayLayer,\n               arrayLayerCount: 1,\n            }),\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const encoder = device.createCommandEncoder({\n        label: 'mip gen encoder',\n      });\n\n      const pass = encoder.beginRenderPass(renderPassDescriptor);\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.draw(3);\n      pass.end();\n\n      const commandBuffer = encoder.finish();\n      device.queue.submit([commandBuffer]);\n    }\n  }\n}","import {\n  TypedArray,\n  TypedArrayConstructor,\n  isTypedArray,\n} from './typed-arrays.js';\n\nconst kTypedArrayToAttribFormat = new Map<TypedArrayConstructor, {formats: [string, string], defaultForType: number}>([\n  [ Int8Array,    { formats: ['sint8',   'snorm8' ], defaultForType: 1 } ],\n  [ Uint8Array,   { formats: ['uint8',   'unorm8' ], defaultForType: 1 } ],\n  [ Int16Array,   { formats: ['sint16',  'snorm16'], defaultForType: 1 } ],\n  [ Uint16Array,  { formats: ['uint16',  'unorm16'], defaultForType: 1 } ],\n  [ Int32Array,   { formats: ['sint32',  'snorm32'], defaultForType: 0 } ],\n  [ Uint32Array,  { formats: ['uint32',  'unorm32'], defaultForType: 0 } ],\n  [ Float32Array, { formats: ['float32', 'float32'], defaultForType: 0 } ],\n  // TODO: Add Float16Array\n]);\n\nconst kVertexFormatPrefixToType = new Map<string, TypedArrayConstructor>(\n  [...kTypedArrayToAttribFormat.entries()].map(([Type, {formats: [s1, s2]}]) => [[s1, Type], [s2, Type]] as [[string, TypedArrayConstructor], [string, TypedArrayConstructor]]).flat()\n);\n\n/**\n * See {@link Arrays} for details\n */\nexport type FullArraySpec = {\n  data: number | number[] | TypedArray,\n  type?: TypedArrayConstructor,\n  numComponents?: number,\n  shaderLocation?: number,\n  normalize?: boolean,\n};\n\nexport type ArrayUnion = number | number[] | TypedArray | FullArraySpec;\n\n/**\n * Named Arrays\n *\n * A set of named arrays are passed to various functions like\n * {@link createBufferLayoutsFromArrays} and {@link createBuffersAndAttributesFromArrays}\n *\n * Each array can be 1 of 4 things. A native JavaScript array, a TypedArray, a number, a {@link FullArraySpec}\n *\n * If it's a native array then, if the name of the array is `indices` the data will be converted\n * to a `Uint32Array`, otherwise a `Float32Array`.  Use a TypedArray or a {@link FullArraySpec} to choose a different type.\n * The {@link FullArraySpec} `type` is only used if it's not already a TypedArray\n *\n * If it's a native array or a TypedArray or if `numComponents` in a {@link FullArraySpec} is not\n * specified it will be guessed. If the name contains 'coord', 'texture' or 'uv' then numComponents will be 2.\n * If the name contains 'color' or 'colour' then numComponents will be 4. Otherwise it's 3.\n *\n * For attribute formats, guesses are made based on type and number of components. The guess is\n * based on this table where (d) is the default for that type if `normalize` is not specified\n *\n * | Type          |     ..      | normalize   |\n * | ------------  | ----------- | ----------- |\n * | Int8Array     | sint8       | snorm8 (d)  |\n * | Uint8Array    | uint8       | unorm8 (d)  |\n * | Int16Array    | sint16      | snorm16 (d) |\n * | Uint16Array   | uint16      | unorm16 (d) |\n * | Int32Array    | sint32 (d)  | snorm32     |\n * | Uint32Array   | uint32 (d)  | unorm32     |\n * | Float32Array  | float32 (d) | float32     |\n *\n */\nexport type Arrays = { [key: string]: ArrayUnion };\nexport type ArraysOptions = {\n  interleave?: boolean,\n  stepMode?: GPUVertexStepMode,\n  usage?: GPUBufferUsageFlags,\n  shaderLocation?: number,\n};\n\n/**\n * Returned by {@link createBuffersAndAttributesFromArrays}\n */\nexport type BuffersAndAttributes = {\n  numElements: number,\n  bufferLayouts: GPUVertexBufferLayout[],\n  buffers: GPUBuffer[],\n  indexBuffer?: GPUBuffer,\n  indexFormat?: GPUIndexFormat,\n};\n\nfunction isIndices(name: string) {\n  return name === \"indices\";\n}\n\nfunction makeTypedArrayFromArrayUnion(array: ArrayUnion, name: string): TypedArray {\n  if (isTypedArray(array)) {\n    return array as TypedArray;\n  }\n\n  let asFullSpec = array as FullArraySpec;\n  if (isTypedArray(asFullSpec.data)) {\n    return asFullSpec.data as TypedArray;\n  }\n\n  if (Array.isArray(array) || typeof array === 'number') {\n    asFullSpec = {\n      data: array,\n    };\n  }\n\n  let Type = asFullSpec.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint32Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(asFullSpec.data as any); // ugh!\n}\n\nfunction getArray(array: ArrayUnion): number[] | TypedArray {\n  const arr = (array as TypedArray).length ? array : (array as FullArraySpec).data;\n  return arr as TypedArray;\n}\n\nconst kNameToNumComponents = [\n  { re: /coord|texture|uv/i, numComponents: 2 },\n  { re: /color|colour/i, numComponents: 4 },\n];\n\nfunction guessNumComponentsFromNameImpl(name: string) {\n  for (const {re, numComponents} of kNameToNumComponents) {\n    if (re.test(name)) {\n      return numComponents;\n    }\n  }\n  return 3;\n}\n\nfunction guessNumComponentsFromName(name: string, length: number) {\n  const numComponents = guessNumComponentsFromNameImpl(name);\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n  return numComponents;\n}\n\nfunction getNumComponents(array: ArrayUnion , arrayName: string) {\n  return (array as FullArraySpec).numComponents || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nconst kVertexFormatRE = /(\\w+)(?:x(\\d))$/;\nfunction numComponentsAndTypeFromVertexFormat(format: GPUVertexFormat) {\n  const m = kVertexFormatRE.exec(format);\n  const [prefix, numComponents] = m ? [m[1], parseInt(m[2])] : [format, 1];\n  return {\n    Type: kVertexFormatPrefixToType.get(prefix),\n    numComponents,\n  };\n}\n\nfunction createTypedArrayOfSameType(typedArray: TypedArray, arrayBuffer: ArrayBuffer) {\n  const Ctor = Object.getPrototypeOf(typedArray).constructor;\n  return new Ctor(arrayBuffer);\n}\n\ntype TypedArrayWithOffsetAndStride = {\n  data: TypedArray,\n  offset: number, /** In elements not bytes */\n  stride: number, /** In elements not bytes */\n};\n\n/**\n * Given a set of named arrays, generates an array `GPUBufferLayout`s\n *\n * Examples:\n *\n * ```js\n *   const arrays = {\n *     position: [1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1],\n *     normal: [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1],\n *     texcoord: [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],\n *   };\n *\n *   const { bufferLayouts, typedArrays } = createBufferLayoutsFromArrays(arrays);\n * ```\n *\n * results in `bufferLayouts` being\n *\n * ```js\n * [\n *   {\n *     stepMode: 'vertex',\n *     arrayStride: 32,\n *     attributes: [\n *       { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *       { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *       { shaderLocation: 2, offset: 24, format: 'float32x2' },\n *     ],\n *   },\n * ]\n * ```\n *\n * and `typedArrays` being\n *\n * ```\n * [\n *   someFloat32Array0,\n *   someFloat32Array1,\n *   someFloat32Array2,\n * ]\n * ```\n *\n * See {@link Arrays} for details on the various types of arrays.\n *\n * Note: If typed arrays are passed in the same typed arrays will come out (copies will not be made)\n */\nexport function createBufferLayoutsFromArrays(arrays: Arrays, options: ArraysOptions = {}) {\n  const interleave = options.interleave === undefined ? true : options.interleave;\n  const stepMode = options.stepMode || 'vertex';\n  const shaderLocations: number[] = options.shaderLocation\n     ? (Array.isArray(options.shaderLocation) ? options.shaderLocation : [options.shaderLocation])\n     : [0];\n  let currentOffset = 0;\n  const bufferLayouts: GPUVertexBufferLayout[] = [];\n  const attributes: GPUVertexAttribute[] = [];\n  const typedArrays: TypedArrayWithOffsetAndStride[] = [];\n  Object.keys(arrays)\n    .filter(arrayName => !isIndices(arrayName))\n    .forEach(arrayName => {\n      const array = arrays[arrayName];\n      const data = makeTypedArrayFromArrayUnion(array, arrayName);\n      const totalNumComponents = getNumComponents(array, arrayName);\n      // if totalNumComponents > 4 then we clearly need to split this into multiple\n      // attributes\n      // (a) <= 4 doesn't mean don't split and\n      // (b) how to split? We could divide by 4 and if it's not even then divide by 3\n      //     as a guess?\n      //     5 is error? or 1x4 + 1x1?\n      //     6 is 2x3\n      //     7 is error? or 1x4 + 1x3?\n      //     8 is 2x4\n      //     9 is 3x3\n      //    10 is error? or 2x4 + 1x2?\n      //    11 is error? or 2x4 + 1x3?\n      //    12 is 3x4 or 4x3?\n      //    13 is error? or 3x4 + 1x1 or 4x3 + 1x1?\n      //    14 is error? or 3x4 + 1x2 or 4x3 + 1x2?\n      //    15 is error? or 3x4 + 1x3 or 4x3 + 1x3?\n      //    16 is 4x4\n      const by4 = totalNumComponents / 4;\n      const by3 = totalNumComponents / 3;\n      const step = by4 % 1 === 0 ? 4 : (by3 % 1 === 0 ? 3 : 4);\n      for (let component = 0; component < totalNumComponents; component += step) {\n        const numComponents = Math.min(step, totalNumComponents - component);\n        const offset = currentOffset;\n        currentOffset += numComponents * data.BYTES_PER_ELEMENT;\n        const { defaultForType, formats } = kTypedArrayToAttribFormat.get(Object.getPrototypeOf(data).constructor)!;\n        const normalize = (array as FullArraySpec).normalize;\n        const formatNdx = typeof normalize === 'undefined' ? defaultForType : (normalize ? 1 : 0);\n        const format = `${formats[formatNdx]}${numComponents > 1 ? `x${numComponents}` : ''}` as GPUVertexFormat;\n\n        // TODO: cleanup with generator?\n        const shaderLocation = shaderLocations.shift()!;\n        if (shaderLocations.length === 0) {\n          shaderLocations.push(shaderLocation + 1);\n        }\n        attributes.push({\n          offset,\n          format,\n          shaderLocation,\n        });\n        typedArrays.push({\n          data,\n          offset: component,\n          stride: totalNumComponents,\n        });\n      }\n      if (!interleave) {\n        bufferLayouts.push({\n          stepMode,\n          arrayStride: currentOffset,\n          attributes: attributes.slice(),\n        });\n        currentOffset = 0;\n        attributes.length = 0;\n      }\n    });\n  if (attributes.length) {\n    bufferLayouts.push({\n      stepMode,\n      arrayStride: currentOffset,\n      attributes: attributes,\n    });\n  }\n  return {\n    bufferLayouts,\n    typedArrays,\n  };\n}\n\nfunction getTypedArrayWithOffsetAndStride(ta: TypedArray | TypedArrayWithOffsetAndStride, numComponents: number) {\n  return (isTypedArray(ta)\n    ? { data: ta, offset: 0, stride: numComponents }\n    : ta) as TypedArrayWithOffsetAndStride;\n}\n\n/**\n * Given an array of `GPUVertexAttribute`s and a corresponding array\n * of TypedArrays, interleaves the contents of the typed arrays\n * into the given ArrayBuffer\n *\n * example:\n *\n * ```js\n * const attributes: GPUVertexAttribute[] = [\n *   { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *   { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *   { shaderLocation: 2, offset: 24, format: 'float32x2' },\n * ];\n * const typedArrays = [\n *   new Float32Array([1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1]),\n *   new Float32Array([1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1]),\n *   new Float32Array([1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1]),\n * ];\n * const arrayStride = (3 + 3 + 2) * 4;  // pos + nrm + uv\n * const arrayBuffer = new ArrayBuffer(arrayStride * 24)\n * interleaveVertexData(attributes, typedArrays, arrayStride, arrayBuffer)\n * ```\n *\n * results in the contents of `arrayBuffer` to be the 3 TypedArrays interleaved\n *\n * See {@link Arrays} for details on the various types of arrays.\n *\n * Note: You can generate `attributes` and `typedArrays` above by calling\n * {@link createBufferLayoutsFromArrays}\n */\nexport function interleaveVertexData(\n    attributes: GPUVertexAttribute[],\n    typedArrays: (TypedArray | TypedArrayWithOffsetAndStride)[],\n    arrayStride: number,\n    arrayBuffer: ArrayBuffer,\n) {\n  const views = new Map<TypedArrayConstructor, TypedArray>();\n  const getView = (typedArray: TypedArray) => {\n    const Ctor = Object.getPrototypeOf(typedArray).constructor;\n    const view = views.get(Ctor);\n    if (view) {\n      return view;\n    }\n    const newView = new Ctor(arrayBuffer);\n    views.set(Ctor, newView);\n    return newView;\n  };\n\n  attributes.forEach((attribute, ndx) => {\n    const { offset, format } = attribute;\n    const { numComponents } = numComponentsAndTypeFromVertexFormat(format);\n    const {\n      data,\n      offset: srcOffset,\n      stride,\n    } = getTypedArrayWithOffsetAndStride(typedArrays[ndx], numComponents);\n\n    const view = getView(data);\n    for (let i = 0; i < data.length; i += stride) {\n      const ndx = i / stride;\n      const dstOffset = (offset + ndx * arrayStride) / view.BYTES_PER_ELEMENT;\n      const srcOff = i + srcOffset;\n      const s = data.subarray(srcOff, srcOff + numComponents);\n      view.set(s, dstOffset);\n    }\n  });\n}\n\n/**\n * Given arrays, create buffers, fills the buffers with data if provided, optionally\n * interleaves the data (the default).\n *\n * Example:\n *\n * ```js\n *  const {\n *    buffers,\n *    bufferLayouts,\n *    indexBuffer,\n *    indexFormat,\n *    numElements,\n *  } = createBuffersAndAttributesFromArrays(device, {\n *    position: [1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1],\n *    normal: [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1],\n *    texcoord: [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],\n *    indices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23],\n *  });\n * ```\n *\n * Where `bufferLayouts` will be\n *\n * ```js\n * [\n *   {\n *     stepMode: 'vertex',\n *     arrayStride: 32,\n *     attributes: [\n *       { shaderLocation: 0, offset:  0, format: 'float32x3' },\n *       { shaderLocation: 1, offset: 12, format: 'float32x3' },\n *       { shaderLocation: 2, offset: 24, format: 'float32x2' },\n *     ],\n *   },\n * ]\n * ```\n *\n * * `buffers` will have one `GPUBuffer` of usage `GPUBufferUsage.VERTEX`\n * * `indexBuffer` will be `GPUBuffer` of usage `GPUBufferUsage.INDEX`\n * * `indexFormat` will be `uint32` (use a full spec or a typedarray of `Uint16Array` if you want 16bit indices)\n * * `numElements` will be 36 (this is either the number entries in the array named `indices` or if no\n *    indices are provided then it's the length of the first array divided by numComponents. See {@link Arrays})\n *\n * See {@link Arrays} for details on the various types of arrays.\n * Also see the cube and instancing examples.\n */\nexport function createBuffersAndAttributesFromArrays(device: GPUDevice, arrays: Arrays, options: ArraysOptions = {}) {\n  const usage = (options.usage || 0);\n\n  const {\n    bufferLayouts,\n    typedArrays,\n  } = createBufferLayoutsFromArrays(arrays, options);\n\n  const buffers = [];\n  let numElements = -1;\n  let bufferNdx = 0;\n  for (const {attributes, arrayStride} of bufferLayouts) {\n    const attribs = attributes as GPUVertexAttribute[];\n    const attrib0 = attribs[0];\n    const {numComponents} = numComponentsAndTypeFromVertexFormat(attrib0.format);\n\n    const {\n      data: data0,\n      stride,\n     } = getTypedArrayWithOffsetAndStride(typedArrays[bufferNdx], numComponents);\n\n    if (numElements < 0) {\n      numElements = data0.length / stride;\n    }\n\n    const size = arrayStride * numElements;\n    const buffer = device.createBuffer({\n      usage: usage | GPUBufferUsage.VERTEX,\n      size,\n      mappedAtCreation: true,\n    });\n\n    const arrayBuffer = buffer.getMappedRange();\n    if (attribs.length === 1 && arrayStride === data0.BYTES_PER_ELEMENT * numComponents) {\n      const view = createTypedArrayOfSameType(data0, arrayBuffer);\n      view.set(data0);\n    } else {\n      interleaveVertexData(attribs, typedArrays.slice(bufferNdx), arrayStride, arrayBuffer);\n    }\n    buffer.unmap();\n    buffers.push(buffer);\n    bufferNdx += attribs.length;\n  }\n\n  const buffersAndAttributes: BuffersAndAttributes = {\n    numElements,\n    bufferLayouts,\n    buffers,\n  };\n\n  const indicesEntry = Object.entries(arrays).find(([arrayName]) => isIndices(arrayName));\n  if (indicesEntry) {\n    const indices = makeTypedArrayFromArrayUnion(indicesEntry[1], 'indices');\n    const indexBuffer = device.createBuffer({\n      size: indices.byteLength,\n      usage: GPUBufferUsage.INDEX | usage,\n      mappedAtCreation: true,\n    });\n    const dst = createTypedArrayOfSameType(indices, indexBuffer.getMappedRange());\n    dst.set(indices);\n    indexBuffer.unmap();\n\n    buffersAndAttributes.indexBuffer = indexBuffer;\n    buffersAndAttributes.indexFormat = indices instanceof Uint16Array ? 'uint16' : 'uint32';\n    buffersAndAttributes.numElements = indices.length;\n  }\n\n  return buffersAndAttributes;\n}\n\n/**\n * Calls `passEncoder.setVertexBuffer` and optionally `passEncoder.setIndexBuffer`\n * for the buffers specified in `buffersAndAttributes`.\n *\n * This is extremely simple function. It is equivalent to\n *\n * ```js\n * buffersAndAttributes.buffers.forEach((buffer, i) => {\n *   passEncoder.setVertexBuffer(firstVertexBufferIndex + i, buffer);\n * });\n*\n * if (buffersAndAttributes.indexBuffer) {\n *   passEncoder.setIndexBuffer(buffersAndAttributes.indexBuffer, buffersAndAttributes.indexFormat!);\n * }\n * ```\n *\n * It exists solely for simple cases. If you have a complex case, call the passEncoder\n * yourself as appropriate.\n *\n * @param passEncoder a render pass encoder\n * @param buffersAndAttributes As returned from {@link createBuffersAndAttributesFromArrays}\n * @param firstVertexBufferIndex The first vertex buffer index. default = 0.\n */\nexport function setVertexAndIndexBuffers(\n    passEncoder: GPURenderPassEncoder,\n    buffersAndAttributes: BuffersAndAttributes,\n    firstVertexBufferIndex = 0) {\n  buffersAndAttributes.buffers.forEach((buffer, i) => {\n    passEncoder.setVertexBuffer(firstVertexBufferIndex + i, buffer);\n  });\n\n  if (buffersAndAttributes.indexBuffer) {\n    passEncoder.setIndexBuffer(buffersAndAttributes.indexBuffer, buffersAndAttributes.indexFormat!);\n  }\n}\n\n/**\n * Calls {@link setVertexAndIndexBuffers} and then calls either `draw` or `drawIndexed`\n *\n * This is an extremely simple function. See  {@link setVertexAndIndexBuffers}.\n * If you need something more complex, call pass encoder functions yourself as appropriate.\n *\n * @param passEncoder a render pass encoder\n * @param buffersAndAttributes As returned from {@link createBuffersAndAttributesFromArrays}\n */\nexport function drawArrays(passEncoder: GPURenderPassEncoder, buffersAndAttributes: BuffersAndAttributes) {\n  setVertexAndIndexBuffers(passEncoder, buffersAndAttributes);\n  if (buffersAndAttributes.indexBuffer) {\n    passEncoder.drawIndexed(buffersAndAttributes.numElements);\n  } else {\n    passEncoder.draw(buffersAndAttributes.numElements);\n  }\n}","import {\n  TypedArray,\n  TypedArrayConstructor,\n  isTypedArray,\n} from './typed-arrays.js';\nimport {\n  generateMipmap,\n  numMipLevels,\n} from './generate-mipmap.js';\n\nexport type CopyTextureOptions = {\n  flipY?: boolean,\n  premultipliedAlpha?: boolean,\n  colorSpace?: PredefinedColorSpace;\n  dimension?: GPUTextureViewDimension;\n  baseArrayLayer?: number;\n};\n\nexport type TextureData = {\n  data: TypedArray | number[],\n};\nexport type TextureCreationData = TextureData & {\n  width?: number,\n  height?: number,\n};\n\nexport type TextureRawDataSource = TextureCreationData | TypedArray | number[];\nexport type TextureSource = GPUImageCopyExternalImage['source'] | TextureRawDataSource;\n\nfunction isTextureData(source: TextureSource) {\n  const src = source as TextureData;\n  return isTypedArray(src.data) || Array.isArray(src.data);\n}\n\nfunction isTextureRawDataSource(source: TextureSource) {\n  return isTypedArray(source) || Array.isArray(source) || isTextureData(source);\n}\n\nfunction toTypedArray(v: TypedArray | number[], format: GPUTextureFormat): TypedArray {\n  if (isTypedArray(v)) {\n    return v as TypedArray;\n  }\n  const { Type } = getTextureFormatInfo(format);\n  return new Type(v);\n}\n\nfunction guessDimensions(width: number | undefined, height: number | undefined, numElements: number, dimension: GPUTextureViewDimension = '2d'): number[] {\n  if (numElements % 1 !== 0) {\n    throw new Error(\"can't guess dimensions\");\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (dimension === 'cube' ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width!;\n    if (height % 1) {\n      throw new Error(\"can't guess dimensions\");\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw new Error(\"can't guess dimensions\");\n    }\n  }\n  const depth = numElements / width! / height;\n  if (depth % 1) {\n    throw new Error(\"can't guess dimensions\");\n  }\n  return [width!, height, depth];\n}\n\nfunction textureViewDimensionToDimension(viewDimension: GPUTextureViewDimension | undefined) {\n  switch (viewDimension) {\n    case '1d': return '1d';\n    case '3d': return '3d';\n    default: return '2d';\n  }\n}\n\nconst kFormatToTypedArray: {[key: string]: TypedArrayConstructor} = {\n  '8snorm': Int8Array,\n  '8unorm': Uint8Array,\n  '8sint': Int8Array,\n  '8uint': Uint8Array,\n  '16snorm': Int16Array,\n  '16unorm': Uint16Array,\n  '16sint': Int16Array,\n  '16uint': Uint16Array,\n  '32snorm': Int32Array,\n  '32unorm': Uint32Array,\n  '32sint': Int32Array,\n  '32uint': Uint32Array,\n  '16float': Uint16Array,  // TODO: change to Float16Array\n  '32float': Float32Array,\n};\n\nconst kTextureFormatRE = /([a-z]+)(\\d+)([a-z]+)/;\n\nfunction getTextureFormatInfo(format: GPUTextureFormat) {\n  // this is a hack! It will only work for common formats\n  const [, channels, bits, typeName] = kTextureFormatRE.exec(format)!;\n  // TODO: if the regex fails, use table for other formats?\n  const numChannels = channels.length;\n  const bytesPerChannel = parseInt(bits) / 8;\n  const bytesPerElement = numChannels * bytesPerChannel;\n  const Type = kFormatToTypedArray[`${bits}${typeName}`];\n\n  return {\n    channels,\n    numChannels,\n    bytesPerChannel,\n    bytesPerElement,\n    Type,\n  };\n}\n\n\n/**\n * Gets the size of a mipLevel. Returns an array of 3 numbers [width, height, depthOrArrayLayers]\n */\nexport function getSizeForMipFromTexture(texture: GPUTexture, mipLevel: number) {\n  return [\n    texture.width,\n    texture.height,\n    texture.depthOrArrayLayers,\n  ].map(v => Math.max(1, Math.floor(v / 2 ** mipLevel)));\n}\n\n/**\n * Uploads Data to a texture\n */\nfunction uploadDataToTexture(\n  device: GPUDevice,\n  texture: GPUTexture,\n  source: TextureRawDataSource,\n  options: { origin?: GPUOrigin3D },\n) {\n  const data = toTypedArray((source as TextureData).data || source, texture.format);\n  const mipLevel = 0;\n  const size = getSizeForMipFromTexture(texture, mipLevel);\n  const { bytesPerElement } = getTextureFormatInfo(texture.format);\n  const origin = options.origin || [0, 0, 0];\n  device.queue.writeTexture(\n    { texture, origin },\n    data,\n    { bytesPerRow: bytesPerElement * size[0], rowsPerImage: size[1] },\n    size,\n  );\n}\n/**\n * Copies a an array of \"sources\" (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * to a texture and then optionally generates mip levels\n */\nexport function copySourcesToTexture(\n    device: GPUDevice,\n    texture: GPUTexture,\n    sources: TextureSource[],\n    options: CopyTextureOptions = {},\n) {\n  sources.forEach((source, layer) => {\n    const origin = [0, 0, layer + (options.baseArrayLayer || 0)];\n    if (isTextureRawDataSource(source)) {\n      uploadDataToTexture(device, texture, source as TextureRawDataSource, { origin });\n    } else {\n      const s = source as GPUImageCopyExternalImage['source'];\n      const {flipY, premultipliedAlpha, colorSpace} = options;\n      device.queue.copyExternalImageToTexture(\n        { source: s, flipY, },\n        { texture, premultipliedAlpha, colorSpace, origin },\n        getSizeFromSource(s, options),\n      );\n    }\n  });\n\n  if (texture.mipLevelCount > 1) {\n    generateMipmap(device, texture);\n  }\n}\n\n\n/**\n * Copies a \"source\" (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * to a texture and then optionally generates mip levels\n */\nexport function copySourceToTexture(\n    device: GPUDevice,\n    texture: GPUTexture,\n    source: TextureSource,\n    options: CopyTextureOptions = {}) {\n  copySourcesToTexture(device, texture, [source], options);\n}\n\n/**\n * @property mips if true and mipLevelCount is not set then wll automatically generate\n *    the correct number of mip levels.\n * @property format Defaults to \"rgba8unorm\"\n * @property mipLeveLCount Defaults to 1 or the number of mips needed for a full mipmap if `mips` is true\n */\nexport type CreateTextureOptions = CopyTextureOptions & {\n  mips?: boolean,\n  usage?: GPUTextureUsageFlags,\n  format?: GPUTextureFormat,\n  mipLevelCount?: number,\n};\n\n/**\n * Gets the size from a source. This is to smooth out the fact that different\n * sources have a different way to get their size.\n */\nexport function getSizeFromSource(source: TextureSource, options: CreateTextureOptions) {\n  if (source instanceof HTMLVideoElement) {\n    return [source.videoWidth, source.videoHeight, 1];\n  } else {\n    const maybeHasWidthAndHeight = source as { width: number, height: number };\n    const { width, height } = maybeHasWidthAndHeight;\n    if (width > 0 && height > 0 && !isTextureRawDataSource(source)) {\n      // this should cover Canvas, Image, ImageData, ImageBitmap, TextureCreationData\n      return [width, height, 1];\n    }\n    const format = options.format || 'rgba8unorm';\n    const { bytesPerElement, bytesPerChannel } = getTextureFormatInfo(format);\n    const data = isTypedArray(source) || Array.isArray(source)\n       ? source\n       : (source as TextureData).data;\n    const numBytes = isTypedArray(data)\n        ? (data as TypedArray).byteLength\n        : ((data as number[]).length * bytesPerChannel);\n    const numElements = numBytes / bytesPerElement;\n    return guessDimensions(width, height, numElements);\n  }\n}\n\n/**\n * Create a texture from an array of sources (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * and optionally create mip levels. If you set `mips: true` and don't set a mipLevelCount\n * then it will automatically make the correct number of mip levels.\n *\n * Example:\n *\n * ```js\n * const texture = createTextureFromSource(\n *     device,\n *     [\n *        someCanvasOrVideoOrImageImageBitmap0,\n *        someCanvasOrVideoOrImageImageBitmap1,\n *     ],\n *     {\n *       usage: GPUTextureUsage.TEXTURE_BINDING |\n *              GPUTextureUsage.RENDER_ATTACHMENT |\n *              GPUTextureUsage.COPY_DST,\n *       mips: true,\n *     }\n * );\n * ```\n */\nexport function createTextureFromSources(\n    device: GPUDevice,\n    sources: TextureSource[],\n    options: CreateTextureOptions = {}) {\n  // NOTE: We assume all the sizes are the same. If they are not you'll get\n  // an error.\n  const size = getSizeFromSource(sources[0], options);\n  size[2] = size[2] > 1 ? size[2] : sources.length;\n\n  const texture = device.createTexture({\n    dimension: textureViewDimensionToDimension(options.dimension),\n    format: options.format || 'rgba8unorm',\n    mipLevelCount: options.mipLevelCount\n        ? options.mipLevelCount\n        : options.mips ? numMipLevels(size) : 1,\n    size,\n    usage: (options.usage ?? 0) |\n           GPUTextureUsage.TEXTURE_BINDING |\n           GPUTextureUsage.COPY_DST |\n           GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  copySourcesToTexture(device, texture, sources, options);\n\n  return texture;\n}\n\n/**\n * Create a texture from a source (Video, Canvas, OffscreenCanvas, ImageBitmap)\n * and optionally create mip levels. If you set `mips: true` and don't set a mipLevelCount\n * then it will automatically make the correct number of mip levels.\n *\n * Example:\n *\n * ```js\n * const texture = createTextureFromSource(\n *     device,\n *     someCanvasOrVideoOrImageImageBitmap,\n *     {\n *       usage: GPUTextureUsage.TEXTURE_BINDING |\n *              GPUTextureUsage.RENDER_ATTACHMENT |\n *              GPUTextureUsage.COPY_DST,\n *       mips: true,\n *     }\n * );\n * ```\n */\nexport function createTextureFromSource(\n    device: GPUDevice,\n    source: TextureSource,\n    options: CreateTextureOptions = {}) {\n  return createTextureFromSources(device, [source], options);\n}\n\nexport type CreateTextureFromBitmapOptions = CreateTextureOptions & ImageBitmapOptions;\n\n/**\n * Load an ImageBitmap\n * @param url\n * @param options\n * @returns the loaded ImageBitmap\n */\nexport async function loadImageBitmap(url: string, options: ImageBitmapOptions = {}) {\n  const res = await fetch(url);\n  const blob = await res.blob();\n  const opt: ImageBitmapOptions = {\n    ...options,\n    ...(options.colorSpaceConversion !== undefined && {colorSpaceConversion: 'none'}),\n  };\n  return await createImageBitmap(blob, opt);\n}\n\n/**\n * Load images and create a texture from them, optionally generating mip levels\n *\n * Assumes all the urls reference images of the same size.\n *\n * Example:\n *\n * ```js\n * const texture = await createTextureFromImage(\n *   device,\n *   [\n *     'https://someimage1.url',\n *     'https://someimage2.url',\n *   ],\n *   {\n *     mips: true,\n *     flipY: true,\n *   },\n * );\n * ```\n */\nexport async function createTextureFromImages(device: GPUDevice, urls: string[], options: CreateTextureFromBitmapOptions = {}) {\n  // TODO: start once we've loaded one?\n  // We need at least 1 to know the size of the texture to create\n  const imgBitmaps = await Promise.all(urls.map(url => loadImageBitmap(url)));\n  return createTextureFromSources(device, imgBitmaps, options);\n}\n\n/**\n * Load an image and create a texture from it, optionally generating mip levels\n *\n * Example:\n *\n * ```js\n * const texture = await createTextureFromImage(device, 'https://someimage.url', {\n *   mips: true,\n *   flipY: true,\n * });\n * ```\n */\nexport async function createTextureFromImage(device: GPUDevice, url: string, options: CreateTextureFromBitmapOptions = {}) {\n  return createTextureFromImages(device, [url], options);\n}\n","/*\n * Copyright 2023 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport { isTypedArray, TypedArray, TypedArrayConstructor } from './typed-arrays.js';\nimport { Arrays } from './attribute-utils.js';\n\n/**\n * A class to provide `push` on a typed array.\n *\n * example:\n *\n * ```js\n * const positions = new TypedArrayWrapper(new Float32Array(300), 3);\n * positions.push(1, 2, 3); // add a position\n * positions.push([4, 5, 6]);  // add a position\n * positions.push(new Float32Array(6)); // add 2 positions\n * const data = positions.typedArray;\n * ```\n */\nexport class TypedArrayWrapper<T extends TypedArray> {\n  typedArray: T;\n  cursor = 0;\n  numComponents: number;\n\n  constructor(arr: T, numComponents: number) {\n    this.typedArray = arr;\n    this.numComponents = numComponents;\n  }\n  get numElements() {\n    return this.typedArray.length / this.numComponents;\n  }\n  push(...data: (number | Iterable<number>)[]) {\n    for (const value of data) {\n      if (Array.isArray(value) || isTypedArray(value)) {\n        const asArray = data as number[];\n        this.typedArray.set(asArray, this.cursor);\n        this.cursor += asArray.length;\n      } else {\n        this.typedArray[this.cursor++] = value as number;\n      }\n    }\n  }\n  reset(index = 0) {\n    this.cursor = index;\n  }\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2, Float32Array);\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param numComponents number of components\n * @param numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param Type A constructor for the type. Default = `Float32Array`.\n */\nfunction createAugmentedTypedArray<T extends TypedArrayConstructor>(numComponents: number, numElements: number, Type: T) {\n  return new TypedArrayWrapper(new Type(numComponents * numElements) as InstanceType<T>, numComponents);\n}\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param params\n * @param params.size the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param params.xOffset the amount to offset the quad in X. Default = 0\n * @param params.yOffset the amount to offset the quad in Y. Default = 0\n * @return the created XY Quad vertices\n */\nexport function createXYQuadVertices({\n    size: inSize = 2, xOffset = 0, yOffset = 0\n  } = {}) {\n  const size = inSize * 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  } as Arrays;\n}\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param params\n * @param params.width Width of the plane. Default = 1\n * @param params.depth Depth of the plane. Default = 1\n * @param params.subdivisionsWidth Number of steps across the plane. Default = 1\n * @param params.subdivisionsDepth Number of steps down the plane. Default = 1\n * @return The created plane vertices.\n */\nexport function createPlaneVertices({\n    width = 1,\n    depth = 1,\n    subdivisionsWidth = 1,\n    subdivisionsDepth = 1,\n} = {}) {\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param params\n * @param params.radius radius of the sphere. Default = 1\n * @param params.subdivisionsAxis number of steps around the sphere. Default = 24\n * @param params.subdivisionsHeight number of vertically on the sphere. Default = 12\n * @param params.startLatitudeInRadians where to start the\n *     top of the sphere. Default = 0\n * @param params.endLatitudeInRadians Where to end the\n *     bottom of the sphere. Default = Ï€\n * @param params.startLongitudeInRadians where to start\n *     wrapping the sphere. Default = 0\n * @param params.endLongitudeInRadians where to end\n *     wrapping the sphere. Default = 2Ï€\n * @return The created sphere vertices.\n */\nexport function createSphereVertices({\n    radius = 1,\n    subdivisionsAxis = 24,\n    subdivisionsHeight = 12,\n    startLatitudeInRadians = 0,\n    endLatitudeInRadians = Math.PI,\n    startLongitudeInRadians = 0,\n    endLongitudeInRadians = Math.PI * 2,\n} = {}) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  const latRange = endLatitudeInRadians - startLatitudeInRadians;\n  const longRange = endLongitudeInRadians - startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + startLongitudeInRadians;\n      const phi = latRange * v + startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param params\n * @param params.size width, height and depth of the cube. Default = 1\n * @return The created vertices.\n */\nexport function createCubeVertices({size = 1} = {}) {\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2 , numVertices, Float32Array);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(...position);\n      normals.push(...normal);\n      texcoords.push(...uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param bottomRadius Bottom radius of truncated cone. Default = 1\n * @param topRadius Top radius of truncated cone. Default = 0\n * @param height Height of truncated cone. Default = 1\n * @param radialSubdivisions The number of subdivisions around the\n *     truncated cone. Default = 24\n * @param verticalSubdivisions The number of subdivisions down the\n *     truncated cone. Default = 1\n * @param topCap Create top cap. Default = true.\n * @param bottomCap Create bottom cap. Default = true.\n * @return The created cone vertices.\n */\nexport function createTruncatedConeVertices({\n    bottomRadius = 1,\n    topRadius = 0,\n    height = 1,\n    radialSubdivisions = 24,\n    verticalSubdivisions = 1,\n    topCap = true,\n    bottomCap = true,\n} = {}) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n\n/**\n * Expands RLE data\n * @param rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param padding value to add each entry with.\n * @return the expanded rleData\n */\nfunction expandRLEData(rleData: number[], padding: number[] = []) {\n  padding = padding || [];\n  const data: number[] = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push(...padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push(...element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return The created vertices.\n */\nexport function create3DFVertices() {\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts, Float32Array),\n    texcoord: createAugmentedTypedArray(2,  numVerts, Float32Array),\n    normal: createAugmentedTypedArray(3, numVerts, Float32Array),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return Object.fromEntries(Object.entries(arrays).map(([k, v]) => [k, v.typedArray]));\n}\n\n/**\n * Creates crescent vertices.\n *\n * @param params\n * @param params.verticalRadius The vertical radius of the crescent. Default = 2\n * @param params.outerRadius The outer radius of the crescent. Default = 1\n * @param params.innerRadius The inner radius of the crescent. Default = 0\n * @param params.thickness The thickness of the crescent. Default = 1\n * @param params.subdivisionsDown number of steps around the crescent. Default = 12\n * @param params.startOffset Where to start arc. Default 0. Default = 0\n * @param params.endOffset Where to end arg. Default 1. Default = 1\n * @return The created vertices.\n */\nexport function createCrescentVertices({\n    verticalRadius = 2,\n    outerRadius = 1,\n    innerRadius = 0,\n    thickness = 1,\n    subdivisionsDown = 12,\n    startOffset = 0,\n    endOffset = 1,\n} = {}) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals     = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords   = createAugmentedTypedArray(2, numVertices, Float32Array);\n\n  function lerp(a: number, b: number, s: number) {\n    return a + (b - a) * s;\n  }\n\n  function vAdd(a: number[], b: number[]) {\n    return a.map((v, i) => v + b[i]);\n  }\n\n  function vMultiply(a: number[], b: number[]) {\n    return a.map((v, i) => v * b[i]);\n  }\n\n  function createArc(arcRadius: number, x: number, normalMult: number[], normalAdd: number[], uMult: number, uAdd: number) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = vAdd(vMultiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset: number, rightArcOffset: number) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions.typedArray,\n    normal:   normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices:  indices.typedArray,\n  };\n}\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param params\n  * @param params.radius Radius of cylinder. Default = 1\n  * @param params.height Height of cylinder. Default = 1\n  * @param params.radialSubdivisions The number of subdivisions around the cylinder. Default = 24\n  * @param params.verticalSubdivisions The number of subdivisions down the cylinder. Default = 1\n  * @param params.topCap Create top cap. Default = true.\n  * @param params.bottomCap Create bottom cap. Default = true.\n  * @return The created vertices.\n  */\nexport function createCylinderVertices({\n    radius = 1,\n    height = 1,\n    radialSubdivisions = 24,\n    verticalSubdivisions = 1,\n    topCap = true,\n    bottomCap = true,\n} = {}) {\n  return createTruncatedConeVertices({\n      bottomRadius: radius,\n      topRadius: radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap,\n  });\n}\n\n/**\n * Creates vertices for a torus\n *\n * @param params\n * @param params.radius radius of center of torus circle. Default = 1\n * @param params.thickness radius of torus ring. Default = 0.24\n * @param params.radialSubdivisions The number of subdivisions around the torus. Default = 24\n * @param params.bodySubdivisions The number of subdivisions around the body torus. Default = 12\n * @param params.startAngle start angle in radians. Default = 0.\n * @param params.endAngle end angle in radians. Default = Math.PI * 2.\n * @return The created vertices.\n */\nexport function createTorusVertices({\n    radius = 1,\n    thickness = 0.24,\n    radialSubdivisions = 24,\n    bodySubdivisions = 12,\n    startAngle = 0,\n    endAngle = Math.PI * 2,\n} = {}) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals     = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords   = createAugmentedTypedArray(2, numVertices, Float32Array);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions.typedArray,\n    normal:   normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices:  indices.typedArray,\n  };\n}\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param params\n * @param params.radius Radius of the ground plane. Default = 1\n * @param params.divisions Number of triangles in the ground plane (at least 3). Default = 24\n * @param params.stacks Number of radial divisions. Default = 1\n * @param params.innerRadius Default = 0\n * @param params.stackPower Power to raise stack size to for decreasing width. Default = 1\n * @return The created vertices.\n */\nexport function createDiscVertices({\n    radius = 1,\n    divisions = 24,\n    stacks = 1,\n    innerRadius = 0,\n    stackPower = 1,\n} = {}) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const normals   = createAugmentedTypedArray(3, numVertices, Float32Array);\n  const texcoords = createAugmentedTypedArray(2, numVertices, Float32Array);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions.typedArray,\n    normal: normals.typedArray,\n    texcoord: texcoords.typedArray,\n    indices: indices.typedArray,\n  };\n}\n"],"names":["roundUpToMultipleOf","v","multiple","isTypedArray","arr","length","buffer","ArrayBuffer","byteLength","b","i32","numElements","align","size","type","View","Int32Array","u32","Uint32Array","f32","Float32Array","f16","Uint16Array","vec2f","vec2i","vec2u","vec2h","vec3i","vec3u","vec3f","vec3h","vec4i","vec4u","vec4f","vec4h","mat2x2f","mat2x2h","mat3x2f","mat3x2h","mat4x2f","mat4x2h","mat2x3f","pad","mat2x3h","mat3x3f","mat3x3h","mat4x3f","mat4x3h","mat2x4f","mat2x4h","mat3x4f","mat3x4h","mat4x4f","mat4x4h","bool","typeInfo","kTypes","obj","Object","keys","setIntrinsicsToView","types","flatten","visited","Set","info","has","add","includes","makeIntrinsicTypedArrayView","typeDef","baseOffset","isArray","undefined","sizeInBytes","baseNumElements","BYTES_PER_ELEMENT","Error","isIntrinsic","fields","elementType","makeTypedArrayViews","arrayBuffer","offset","asArrayDef","asStructDef","asIntrinsicDef","getSizeOfTypeDef","makeViews","getSizeAndAlignmentOfUnsizedArrayElementOfTypeDef","effectiveNumElements","fn","i","Array","fill","map","_","views","name","entries","setStructuredView","data","view","dataLen","stride","set","asArray","forEach","newValue","ndx","asViews","key","s_views","WeakMap","getView","Ctor","viewsByCtor","get","Map","getViewsByCtor","setIntrinsicFromArrayLikeOfNumber","index","setTypedValues","isArrayLikeOfNumber","fieldDef","getAlignmentOfTypeDef","values","reduce","max","Math","unalignedSize","lastField","pop","ParseContext","constructor","this","constants","aliases","structs","Node","isAstNode","astNodeType","evaluate","context","evaluateString","toString","Statement","super","Function","args","returnType","body","StaticAssert","expression","While","condition","Continuing","For","init","increment","Var","storage","access","value","Override","Let","Const","IncrementOperator","AssignOperator","_a","TokenClass","ResourceType","parse","val","Increment","operator","variable","Assign","Call","Loop","continuing","Switch","If","elseif","_else","else","Return","Enable","Alias","Discard","Break","Continue","Type","isStruct","Struct","members","getMemberIndex","TemplateType","format","PointerType","ArrayType","attributes","count","SamplerType","Expression","StringExpr","CreateExpr","CallExpr","abs","acos","acosh","asin","asinh","atan","atan2","atanh","ceil","min","cos","PI","sqrt","pow","exp","floor","log","log2","round","sign","sin","sinh","tan","tanh","trunc","VariableExpr","ConstExpr","initializer","_b","property","postfix","struct","memberIndex","console","LiteralExpr","BitcastExpr","TypecastExpr","GroupingExpr","contents","Operator","UnaryOperator","right","BinaryOperator","left","SwitchCase","Case","selector","Default","Argument","ElseIf","Member","Attribute","TokenType","rule","TokenTypes","none","reserved","eof","token","asm","bf16","do","enum","f64","handle","i8","i16","i64","mat","premerge","regardless","typedef","u8","u16","u64","unless","using","vec","void","keywords","array","keyword","atomic","mat2x2","mat2x3","mat2x4","mat3x2","mat3x3","mat3x4","mat4x2","mat4x3","mat4x4","ptr","sampler","sampler_comparison","texture_1d","texture_2d","texture_2d_array","texture_3d","texture_cube","texture_cube_array","texture_multisampled_2d","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","texture_depth_multisampled_2d","texture_external","vec2","vec3","vec4","bitcast","block","break","case","continue","default","discard","enable","fallthrough","false","for","function","if","let","const","loop","while","private","read","read_write","return","switch","true","alias","uniform","var","override","workgroup","write","r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8unorm_srgb","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","bgra8unorm_srgb","rgb10a2unorm","rg11b10float","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","static_assert","tokens","decimal_float_literal","hex_float_literal","int_literal","uint_literal","ident","and","and_and","arrow","attr","attr_left","attr_right","forward_slash","bang","bracket_left","bracket_right","brace_left","brace_right","colon","comma","equal","equal_equal","not_equal","greater_than","greater_than_equal","shift_right","less_than","less_than_equal","shift_left","modulo","minus","minus_minus","period","plus","plus_plus","or","or_or","paren_left","paren_right","semicolon","star","tilde","underscore","xor","plus_equal","minus_equal","times_equal","division_equal","modulo_equal","and_equal","or_equal","xor_equal","shift_right_equal","shift_left_equal","storage_class","access_mode","sampler_type","sampled_texture_type","multisampled_texture_type","storage_texture_type","depth_texture_type","texture_external_type","any_texture_type","texel_format","const_literal","literal_or_ident","element_count_expression","template_types","attribute_name","assignment_operators","increment_operators","Token","lexeme","line","isTemplateType","indexOf","isArrayType","isArrayOrTemplateType","WgslScanner","source","_tokens","_start","_current","_line","_source","scanTokens","_isAtEnd","scanToken","push","_advance","_isWhitespace","_peekAhead","commentLevel","matchType","matchedType","_findType","nextLexeme","foundLessThan","ti","_addToken","lookAheadLexeme","lookAhead","maxLookAhead","li","_match","match","exec","c","amount","text","substring","WgslParser","_context","tokensOrCode","_initialize","statements","statement","_global_decl_or_directive","scanner","_error","message","error","_peek","_check","l","_consume","tk","t","_previous","_type_alias","_enable_directive","attrs","_attribute","_var","_global_variable_decl","_override","_override_variable_decl","_let","_global_let_decl","_const","_global_const_decl","_struct","_struct_decl","_fn","_function_decl","argAttrs","typeAttrs","_type_decl","_return","_compound_statement","_statement","_if_statement","_switch_statement","_loop_statement","_for_statement","_while_statement","_continuing_statement","_static_assert_statement","result","_return_statement","_variable_statement","_increment_decrement_statement","_func_call_statement","_assignment_statement","_optional_paren_expression","_for_init","_short_circuit_or_expression","_for_increment","_variable_decl","savedPos","_unary_expression","decrement","isUnderscore","_argument_expression_list","s","_switch_body","cases","_case_selectors","_case_body","_cases","_c","_d","selectors","_shift_expression","nextStatement","_match_elseif","_elseif_statement","expr","_short_circuit_and_expr","_inclusive_or_expression","_exclusive_or_expression","_and_expression","_equality_expression","_relational_expression","_additive_expression","_multiplicative_expression","_singular_expression","_primary_expression","p","_postfix_expression","_getStruct","parseFloat","_paren_expression","arg","memberAttrs","memberName","memberType","structNode","_const_expression","_override_decl","valueExpr","constValue","aliasType","aliasNode","typeName","_texture_sampler_types","pointer","decl","countInt","parseInt","TypeInfo","isTemplate","MemberInfo","StructInfo","ArrayInfo","TemplateInfo","VariableInfo","group","binding","resourceType","AliasInfo","_TypeSize","InputInfo","locationType","location","interpolation","OutputInfo","FunctionInfo","stage","inputs","outputs","EntryFunctions","vertex","fragment","compute","OverrideInfo","id","WgslReflect","code","uniforms","textures","samplers","overrides","entry","_types","update","_isStorageTexture","ast","node","_getTypeInfo","_getAliasInfo","_getAttributeNum","_isUniformVar","g","varInfo","Uniform","_isStorageVar","isStorageTexture","StorageTexture","Storage","_isTextureVar","Texture","_isSamplerVar","Sampler","vertexStage","_getAttribute","fragmentStage","computeStage","_getInputs","_getOutputs","getBindGroups","groups","_makeRoom","u","_getStructOutputs","output","_getOutputInfo","m","locationValue","_parseInt","_getStructInputs","input","_getInputInfo","_parseString","n","isNaN","_getAlias","a","_updateTypeInfo","formatIsType","typeSize","_getTypeSize","formatInfo","_updateStructInfo","lastSize","lastOffset","structAlign","mi","ml","member","sizeInfo","_roundUp","explicitSize","explicitAlign","_typeInfo","divisor","arrayType","E","_textureTypes","_samplerTypes","defaultValue","k","getNamedVariables","reflect","variables","fromEntries","typeDefinition","addType","makeStructDefinition","structInfo","assert","cond","msg","arrayInfo","asTemplateInfo","normalizeGPUExtent3D","slice","width","height","depthOrArrayLayers","normalizeGPUExtent3Dict","numMipLevels","dimension","sizes","maxSize","byDevice","generateMipmap","device","texture","textureBindingViewDimension","perDeviceInfo","pipelineByFormatAndView","moduleByViewType","uniformBuffer","uniformValues","guessTextureBindingViewDimensionForTexture","module","textureSnippet","sampleSnippet","getMipmapGenerationWGSL","createShaderModule","label","createSampler","minFilter","magFilter","createBuffer","usage","GPUBufferUsage","UNIFORM","COPY_DST","assign","createRenderPipeline","layout","entryPoint","targets","pipeline","baseMipLevel","mipLevelCount","baseArrayLayer","queue","writeBuffer","bindGroup","createBindGroup","getBindGroupLayout","resource","createView","renderPassDescriptor","colorAttachments","arrayLayerCount","loadOp","storeOp","encoder","createCommandEncoder","pass","beginRenderPass","setPipeline","setBindGroup","draw","end","commandBuffer","finish","submit","kTypedArrayToAttribFormat","Int8Array","formats","defaultForType","Uint8Array","Int16Array","kVertexFormatPrefixToType","s1","s2","flat","isIndices","makeTypedArrayFromArrayUnion","asFullSpec","kNameToNumComponents","re","numComponents","guessNumComponentsFromName","test","guessNumComponentsFromNameImpl","kVertexFormatRE","numComponentsAndTypeFromVertexFormat","prefix","createTypedArrayOfSameType","typedArray","getPrototypeOf","createBufferLayoutsFromArrays","arrays","options","interleave","stepMode","shaderLocations","shaderLocation","currentOffset","bufferLayouts","typedArrays","filter","arrayName","totalNumComponents","getArray","getNumComponents","step","component","normalize","shift","arrayStride","getTypedArrayWithOffsetAndStride","ta","interleaveVertexData","attribute","srcOffset","newView","dstOffset","srcOff","subarray","setVertexAndIndexBuffers","passEncoder","buffersAndAttributes","firstVertexBufferIndex","buffers","setVertexBuffer","indexBuffer","setIndexBuffer","indexFormat","isTextureRawDataSource","src","isTextureData","textureViewDimensionToDimension","viewDimension","kFormatToTypedArray","kTextureFormatRE","getTextureFormatInfo","channels","bits","numChannels","bytesPerChannel","bytesPerElement","getSizeForMipFromTexture","mipLevel","uploadDataToTexture","toTypedArray","origin","writeTexture","bytesPerRow","rowsPerImage","copySourcesToTexture","sources","layer","flipY","premultipliedAlpha","colorSpace","copyExternalImageToTexture","getSizeFromSource","HTMLVideoElement","videoWidth","videoHeight","maybeHasWidthAndHeight","depth","guessDimensions","createTextureFromSources","createTexture","mips","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","async","loadImageBitmap","url","res","fetch","blob","opt","colorSpaceConversion","createImageBitmap","createTextureFromImages","urls","Promise","all","TypedArrayWrapper","cursor","reset","createAugmentedTypedArray","CUBE_FACE_INDICES","createTruncatedConeVertices","bottomRadius","topRadius","radialSubdivisions","verticalSubdivisions","topCap","bottomCap","extra","numVertices","positions","normals","texcoords","indices","vertsAroundEdge","slant","cosSlant","sinSlant","yy","ringRadius","y","ii","position","normal","texcoord","expandRLEData","rleData","padding","runLength","element","jj","colors","numVerts","color","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","offsetRange","lerp","vAdd","vMultiply","createArc","arcRadius","x","normalMult","normalAdd","uMult","uAdd","z","uBack","xBack","angle","radius","px","py","pz","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","cornerVertices","faceNormals","uvCoords","f","faceIndices","uv","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","theta","d","subdivisionsWidth","subdivisionsDepth","numVertsAcross","subdivisionsAxis","subdivisionsHeight","startLatitudeInRadians","endLatitudeInRadians","startLongitudeInRadians","endLongitudeInRadians","latRange","longRange","phi","sinTheta","cosTheta","sinPhi","ux","uy","uz","numVertsAround","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ny","ring","ringAngle","xSin","zCos","nx","nz","nextRingIndex","nextSliceIndex","inSize","xOffset","yOffset","byteOffset","alignment","numBytes","bufferNdx","attribs","attrib0","data0","VERTEX","mappedAtCreation","getMappedRange","unmap","indicesEntry","find","INDEX","drawIndexed","varDef","asVarDef","storages"],"mappings":"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","x_google_ignoreList":[3]}